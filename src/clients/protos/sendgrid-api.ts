/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: sendgrid-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace integration_api {
    export class Contact extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            name?: string;
        }): Contact {
            const message = new Contact({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                name?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Contact {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Contact();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Contact {
            return Contact.deserialize(bytes);
        }
    }
    export class WelcomeEmailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: number;
            to?: Contact;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getWrapperField(this, Contact, 2) as Contact;
        }
        set to(value: Contact) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_to() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            userId?: number;
            to?: ReturnType<typeof Contact.prototype.toObject>;
        }): WelcomeEmailRequest {
            const message = new WelcomeEmailRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.to != null) {
                message.to = Contact.fromObject(data.to);
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: number;
                to?: ReturnType<typeof Contact.prototype.toObject>;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.to != null) {
                data.to = this.to.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId != 0)
                writer.writeUint64(1, this.userId);
            if (this.has_to)
                writer.writeMessage(2, this.to, () => this.to.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WelcomeEmailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WelcomeEmailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.to, () => message.to = Contact.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WelcomeEmailRequest {
            return WelcomeEmailRequest.deserialize(bytes);
        }
    }
    export class WelcomeEmailResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
        }): WelcomeEmailResponse {
            const message = new WelcomeEmailResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WelcomeEmailResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WelcomeEmailResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WelcomeEmailResponse {
            return WelcomeEmailResponse.deserialize(bytes);
        }
    }
    export class ResetPasswordEmailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: number;
            to?: Contact;
            resetPasswordLink?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("resetPasswordLink" in data && data.resetPasswordLink != undefined) {
                    this.resetPasswordLink = data.resetPasswordLink;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getWrapperField(this, Contact, 2) as Contact;
        }
        set to(value: Contact) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_to() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get resetPasswordLink() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resetPasswordLink(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            userId?: number;
            to?: ReturnType<typeof Contact.prototype.toObject>;
            resetPasswordLink?: string;
        }): ResetPasswordEmailRequest {
            const message = new ResetPasswordEmailRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.to != null) {
                message.to = Contact.fromObject(data.to);
            }
            if (data.resetPasswordLink != null) {
                message.resetPasswordLink = data.resetPasswordLink;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: number;
                to?: ReturnType<typeof Contact.prototype.toObject>;
                resetPasswordLink?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.to != null) {
                data.to = this.to.toObject();
            }
            if (this.resetPasswordLink != null) {
                data.resetPasswordLink = this.resetPasswordLink;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId != 0)
                writer.writeUint64(1, this.userId);
            if (this.has_to)
                writer.writeMessage(2, this.to, () => this.to.serialize(writer));
            if (this.resetPasswordLink.length)
                writer.writeString(3, this.resetPasswordLink);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPasswordEmailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetPasswordEmailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.to, () => message.to = Contact.deserialize(reader));
                        break;
                    case 3:
                        message.resetPasswordLink = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetPasswordEmailRequest {
            return ResetPasswordEmailRequest.deserialize(bytes);
        }
    }
    export class ResetPasswordEmailResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
        }): ResetPasswordEmailResponse {
            const message = new ResetPasswordEmailResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPasswordEmailResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetPasswordEmailResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetPasswordEmailResponse {
            return ResetPasswordEmailResponse.deserialize(bytes);
        }
    }
    export class InviteMemeberEmailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: number;
            to?: Contact;
            organizationName?: string;
            projectName?: string;
            inviterName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("organizationName" in data && data.organizationName != undefined) {
                    this.organizationName = data.organizationName;
                }
                if ("projectName" in data && data.projectName != undefined) {
                    this.projectName = data.projectName;
                }
                if ("inviterName" in data && data.inviterName != undefined) {
                    this.inviterName = data.inviterName;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getWrapperField(this, Contact, 2) as Contact;
        }
        set to(value: Contact) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_to() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get organizationName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set organizationName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get projectName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set projectName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get inviterName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set inviterName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            userId?: number;
            to?: ReturnType<typeof Contact.prototype.toObject>;
            organizationName?: string;
            projectName?: string;
            inviterName?: string;
        }): InviteMemeberEmailRequest {
            const message = new InviteMemeberEmailRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.to != null) {
                message.to = Contact.fromObject(data.to);
            }
            if (data.organizationName != null) {
                message.organizationName = data.organizationName;
            }
            if (data.projectName != null) {
                message.projectName = data.projectName;
            }
            if (data.inviterName != null) {
                message.inviterName = data.inviterName;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: number;
                to?: ReturnType<typeof Contact.prototype.toObject>;
                organizationName?: string;
                projectName?: string;
                inviterName?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.to != null) {
                data.to = this.to.toObject();
            }
            if (this.organizationName != null) {
                data.organizationName = this.organizationName;
            }
            if (this.projectName != null) {
                data.projectName = this.projectName;
            }
            if (this.inviterName != null) {
                data.inviterName = this.inviterName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId != 0)
                writer.writeUint64(1, this.userId);
            if (this.has_to)
                writer.writeMessage(2, this.to, () => this.to.serialize(writer));
            if (this.organizationName.length)
                writer.writeString(3, this.organizationName);
            if (this.projectName.length)
                writer.writeString(4, this.projectName);
            if (this.inviterName.length)
                writer.writeString(5, this.inviterName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InviteMemeberEmailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InviteMemeberEmailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.to, () => message.to = Contact.deserialize(reader));
                        break;
                    case 3:
                        message.organizationName = reader.readString();
                        break;
                    case 4:
                        message.projectName = reader.readString();
                        break;
                    case 5:
                        message.inviterName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InviteMemeberEmailRequest {
            return InviteMemeberEmailRequest.deserialize(bytes);
        }
    }
    export class InviteMemeberEmailResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
        }): InviteMemeberEmailResponse {
            const message = new InviteMemeberEmailResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InviteMemeberEmailResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InviteMemeberEmailResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InviteMemeberEmailResponse {
            return InviteMemeberEmailResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSendgridServiceService {
        static definition = {
            WelcomeEmail: {
                path: "/integration_api.SendgridService/WelcomeEmail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WelcomeEmailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WelcomeEmailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WelcomeEmailResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WelcomeEmailResponse.deserialize(new Uint8Array(bytes))
            },
            ResetPasswordEmail: {
                path: "/integration_api.SendgridService/ResetPasswordEmail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResetPasswordEmailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResetPasswordEmailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResetPasswordEmailResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResetPasswordEmailResponse.deserialize(new Uint8Array(bytes))
            },
            InviteMemberEmail: {
                path: "/integration_api.SendgridService/InviteMemberEmail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InviteMemeberEmailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InviteMemeberEmailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InviteMemeberEmailResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InviteMemeberEmailResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract WelcomeEmail(call: grpc_1.ServerUnaryCall<WelcomeEmailRequest, WelcomeEmailResponse>, callback: grpc_1.sendUnaryData<WelcomeEmailResponse>): void;
        abstract ResetPasswordEmail(call: grpc_1.ServerUnaryCall<ResetPasswordEmailRequest, ResetPasswordEmailResponse>, callback: grpc_1.sendUnaryData<ResetPasswordEmailResponse>): void;
        abstract InviteMemberEmail(call: grpc_1.ServerUnaryCall<InviteMemeberEmailRequest, InviteMemeberEmailResponse>, callback: grpc_1.sendUnaryData<InviteMemeberEmailResponse>): void;
    }
    export class SendgridServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedSendgridServiceService.definition, "SendgridService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        WelcomeEmail: GrpcUnaryServiceInterface<WelcomeEmailRequest, WelcomeEmailResponse> = (message: WelcomeEmailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WelcomeEmailResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WelcomeEmailResponse>, callback?: grpc_1.requestCallback<WelcomeEmailResponse>): grpc_1.ClientUnaryCall => {
            return super.WelcomeEmail(message, metadata, options, callback);
        };
        ResetPasswordEmail: GrpcUnaryServiceInterface<ResetPasswordEmailRequest, ResetPasswordEmailResponse> = (message: ResetPasswordEmailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResetPasswordEmailResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResetPasswordEmailResponse>, callback?: grpc_1.requestCallback<ResetPasswordEmailResponse>): grpc_1.ClientUnaryCall => {
            return super.ResetPasswordEmail(message, metadata, options, callback);
        };
        InviteMemberEmail: GrpcUnaryServiceInterface<InviteMemeberEmailRequest, InviteMemeberEmailResponse> = (message: InviteMemeberEmailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InviteMemeberEmailResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InviteMemeberEmailResponse>, callback?: grpc_1.requestCallback<InviteMemeberEmailResponse>): grpc_1.ClientUnaryCall => {
            return super.InviteMemberEmail(message, metadata, options, callback);
        };
    }
}
