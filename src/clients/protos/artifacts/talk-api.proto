syntax = "proto3";
package talk_api;
option go_package = "github.com/lexatic/web-backend/protos/lexatic-backend";
option java_package = "ai.rapida.sdk.artifacts";
import "google/protobuf/any.proto";
import "common.proto";

message AssistantDefinition {
  uint64 assistantId = 1 [ jstype = JS_STRING ];
  string version = 2;
}

message AssistantMessagingRequest {
  AssistantDefinition assistant = 2;
  Message message = 3;
  optional uint64 assistantConversationId = 4 [ jstype = JS_STRING ];
  map<string, google.protobuf.Any> metadata = 6;
  Source source = 7;
  map<string, google.protobuf.Any> args = 10;
  map<string, google.protobuf.Any> options = 11;
}

message AssistantMessagingResponse {
  int32 code = 1;
  bool success = 2;
  Error error = 4;
  oneof data {
    AssistantConversationMessage message = 3;
    Event event = 5;
  }
}

message CreateMessageMetricRequest {
  uint64 assistantId = 1 [ jstype = JS_STRING ];
  uint64 assistantConversationId = 2 [ jstype = JS_STRING ];
  string messageId = 3;
  repeated Metric metrics = 4;
}

message CreateMessageMetricResponse {
  int32 code = 1;
  bool success = 2;
  repeated Metric data = 3;
  Error error = 4;
}

message CreateConversationMetricRequest {
  uint64 assistantId = 1 [ jstype = JS_STRING ];
  uint64 assistantConversationId = 2 [ jstype = JS_STRING ];
  repeated Metric metrics = 3;
}

message CreateConversationMetricResponse {
  int32 code = 1;
  bool success = 2;
  repeated Metric data = 3;
  Error error = 4;
}

service TalkService {
  rpc AssistantMessaging(AssistantMessagingRequest)
      returns (stream AssistantMessagingResponse);
  rpc AssistantTalk(stream AssistantMessagingRequest)
      returns (stream AssistantMessagingResponse);
  rpc GetAllAssistantConversation(GetAllAssistantConversationRequest)
      returns (GetAllAssistantConversationResponse);
  rpc GetAllConversationMessage(GetAllConversationMessageRequest)
      returns (GetAllConversationMessageResponse);
  rpc CreateMessageMetric(CreateMessageMetricRequest)
      returns (CreateMessageMetricResponse);
  rpc CreateConversationMetric(CreateConversationMetricRequest)
      returns (CreateConversationMetricResponse);
}