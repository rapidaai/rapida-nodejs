/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: audit-logging-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/struct";
import * as dependency_2 from "./google/protobuf/timestamp";
import * as dependency_3 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace integration_api {
    export class AuditLog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            integrationName?: string;
            assetPrefix?: string;
            responseStatus?: number;
            timeTaken?: number;
            status?: string;
            projectId?: string;
            organizationId?: string;
            credentialId?: string;
            externalAuditMetadatas?: dependency_3.Metadata[];
            createdDate?: dependency_2.google.protobuf.Timestamp;
            updatedDate?: dependency_2.google.protobuf.Timestamp;
            request?: dependency_1.google.protobuf.Struct;
            response?: dependency_1.google.protobuf.Struct;
            metrics?: dependency_3.Metric[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 15], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("integrationName" in data && data.integrationName != undefined) {
                    this.integrationName = data.integrationName;
                }
                if ("assetPrefix" in data && data.assetPrefix != undefined) {
                    this.assetPrefix = data.assetPrefix;
                }
                if ("responseStatus" in data && data.responseStatus != undefined) {
                    this.responseStatus = data.responseStatus;
                }
                if ("timeTaken" in data && data.timeTaken != undefined) {
                    this.timeTaken = data.timeTaken;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
                if ("credentialId" in data && data.credentialId != undefined) {
                    this.credentialId = data.credentialId;
                }
                if ("externalAuditMetadatas" in data && data.externalAuditMetadatas != undefined) {
                    this.externalAuditMetadatas = data.externalAuditMetadatas;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get integrationName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set integrationName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get assetPrefix() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set assetPrefix(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get responseStatus() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set responseStatus(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get timeTaken() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timeTaken(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get credentialId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "0") as string;
        }
        set credentialId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get externalAuditMetadatas() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Metadata, 10) as dependency_3.Metadata[];
        }
        set externalAuditMetadatas(value: dependency_3.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 11) as dependency_2.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 12) as dependency_2.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get request() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 13) as dependency_1.google.protobuf.Struct;
        }
        set request(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get response() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 14) as dependency_1.google.protobuf.Struct;
        }
        set response(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Metric, 15) as dependency_3.Metric[];
        }
        set metrics(value: dependency_3.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 15, value);
        }
        static fromObject(data: {
            id?: string;
            integrationName?: string;
            assetPrefix?: string;
            responseStatus?: number;
            timeTaken?: number;
            status?: string;
            projectId?: string;
            organizationId?: string;
            credentialId?: string;
            externalAuditMetadatas?: ReturnType<typeof dependency_3.Metadata.prototype.toObject>[];
            createdDate?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            request?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            response?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            metrics?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
        }): AuditLog {
            const message = new AuditLog({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.integrationName != null) {
                message.integrationName = data.integrationName;
            }
            if (data.assetPrefix != null) {
                message.assetPrefix = data.assetPrefix;
            }
            if (data.responseStatus != null) {
                message.responseStatus = data.responseStatus;
            }
            if (data.timeTaken != null) {
                message.timeTaken = data.timeTaken;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            if (data.credentialId != null) {
                message.credentialId = data.credentialId;
            }
            if (data.externalAuditMetadatas != null) {
                message.externalAuditMetadatas = data.externalAuditMetadatas.map(item => dependency_3.Metadata.fromObject(item));
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_2.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_2.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.request != null) {
                message.request = dependency_1.google.protobuf.Struct.fromObject(data.request);
            }
            if (data.response != null) {
                message.response = dependency_1.google.protobuf.Struct.fromObject(data.response);
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => dependency_3.Metric.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                integrationName?: string;
                assetPrefix?: string;
                responseStatus?: number;
                timeTaken?: number;
                status?: string;
                projectId?: string;
                organizationId?: string;
                credentialId?: string;
                externalAuditMetadatas?: ReturnType<typeof dependency_3.Metadata.prototype.toObject>[];
                createdDate?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                request?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
                response?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
                metrics?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.integrationName != null) {
                data.integrationName = this.integrationName;
            }
            if (this.assetPrefix != null) {
                data.assetPrefix = this.assetPrefix;
            }
            if (this.responseStatus != null) {
                data.responseStatus = this.responseStatus;
            }
            if (this.timeTaken != null) {
                data.timeTaken = this.timeTaken;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            if (this.credentialId != null) {
                data.credentialId = this.credentialId;
            }
            if (this.externalAuditMetadatas != null) {
                data.externalAuditMetadatas = this.externalAuditMetadatas.map((item: dependency_3.Metadata) => item.toObject());
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: dependency_3.Metric) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.integrationName.length)
                writer.writeString(2, this.integrationName);
            if (this.assetPrefix.length)
                writer.writeString(3, this.assetPrefix);
            if (this.responseStatus != 0)
                writer.writeInt64(4, this.responseStatus);
            if (this.timeTaken != 0)
                writer.writeInt64(5, this.timeTaken);
            if (this.status.length)
                writer.writeString(6, this.status);
            if (this.projectId != "0")
                writer.writeUint64String(7, this.projectId);
            if (this.organizationId != "0")
                writer.writeUint64String(8, this.organizationId);
            if (this.credentialId != "0")
                writer.writeUint64String(9, this.credentialId);
            if (this.externalAuditMetadatas.length)
                writer.writeRepeatedMessage(10, this.externalAuditMetadatas, (item: dependency_3.Metadata) => item.serialize(writer));
            if (this.has_createdDate)
                writer.writeMessage(11, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(12, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.has_request)
                writer.writeMessage(13, this.request, () => this.request.serialize(writer));
            if (this.has_response)
                writer.writeMessage(14, this.response, () => this.response.serialize(writer));
            if (this.metrics.length)
                writer.writeRepeatedMessage(15, this.metrics, (item: dependency_3.Metric) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuditLog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuditLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.integrationName = reader.readString();
                        break;
                    case 3:
                        message.assetPrefix = reader.readString();
                        break;
                    case 4:
                        message.responseStatus = reader.readInt64();
                        break;
                    case 5:
                        message.timeTaken = reader.readInt64();
                        break;
                    case 6:
                        message.status = reader.readString();
                        break;
                    case 7:
                        message.projectId = reader.readUint64String();
                        break;
                    case 8:
                        message.organizationId = reader.readUint64String();
                        break;
                    case 9:
                        message.credentialId = reader.readUint64String();
                        break;
                    case 10:
                        reader.readMessage(message.externalAuditMetadatas, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_3.Metadata.deserialize(reader), dependency_3.Metadata));
                        break;
                    case 11:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.request, () => message.request = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.response, () => message.response = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 15, dependency_3.Metric.deserialize(reader), dependency_3.Metric));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuditLog {
            return AuditLog.deserialize(bytes);
        }
    }
    export class GetAllAuditLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_3.Paginate;
            criterias?: dependency_3.Criteria[];
            projectId?: string;
            organizationId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_3.Paginate, 1) as dependency_3.Paginate;
        }
        set paginate(value: dependency_3.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Criteria, 2) as dependency_3.Criteria[];
        }
        set criterias(value: dependency_3.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_3.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_3.Criteria.prototype.toObject>[];
            projectId?: string;
            organizationId?: string;
        }): GetAllAuditLogRequest {
            const message = new GetAllAuditLogRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_3.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_3.Criteria.fromObject(item));
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_3.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_3.Criteria.prototype.toObject>[];
                projectId?: string;
                organizationId?: string;
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_3.Criteria) => item.toObject());
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_3.Criteria) => item.serialize(writer));
            if (this.projectId != "0")
                writer.writeUint64String(3, this.projectId);
            if (this.organizationId != "0")
                writer.writeUint64String(4, this.organizationId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAuditLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAuditLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_3.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.Criteria.deserialize(reader), dependency_3.Criteria));
                        break;
                    case 3:
                        message.projectId = reader.readUint64String();
                        break;
                    case 4:
                        message.organizationId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAuditLogRequest {
            return GetAllAuditLogRequest.deserialize(bytes);
        }
    }
    export class GetAllAuditLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AuditLog[];
            error?: dependency_3.Error;
            paginated?: dependency_3.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, AuditLog, 3) as AuditLog[];
        }
        set data(value: AuditLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_3.Paginated, 5) as dependency_3.Paginated;
        }
        set paginated(value: dependency_3.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AuditLog.prototype.toObject>[];
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_3.Paginated.prototype.toObject>;
        }): GetAllAuditLogResponse {
            const message = new GetAllAuditLogResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => AuditLog.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_3.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AuditLog.prototype.toObject>[];
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_3.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: AuditLog) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: AuditLog) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAuditLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAuditLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AuditLog.deserialize(reader), AuditLog));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_3.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAuditLogResponse {
            return GetAllAuditLogResponse.deserialize(bytes);
        }
    }
    export class GetAuditLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            projectId?: string;
            organizationId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            projectId?: string;
            organizationId?: string;
        }): GetAuditLogRequest {
            const message = new GetAuditLogRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                projectId?: string;
                organizationId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.projectId != "0")
                writer.writeUint64String(3, this.projectId);
            if (this.organizationId != "0")
                writer.writeUint64String(4, this.organizationId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAuditLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAuditLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 3:
                        message.projectId = reader.readUint64String();
                        break;
                    case 4:
                        message.organizationId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAuditLogRequest {
            return GetAuditLogRequest.deserialize(bytes);
        }
    }
    export class GetAuditLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AuditLog;
            error?: dependency_3.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, AuditLog, 3) as AuditLog;
        }
        set data(value: AuditLog) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AuditLog.prototype.toObject>;
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
        }): GetAuditLogResponse {
            const message = new GetAuditLogResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = AuditLog.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AuditLog.prototype.toObject>;
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAuditLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAuditLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = AuditLog.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAuditLogResponse {
            return GetAuditLogResponse.deserialize(bytes);
        }
    }
    export class CreateMetadataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            additionalData?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("additionalData" in data && data.additionalData != undefined) {
                    this.additionalData = data.additionalData;
                }
            }
            if (!this.additionalData)
                this.additionalData = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get additionalData() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set additionalData(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            id?: string;
            additionalData?: {
                [key: string]: string;
            };
        }): CreateMetadataRequest {
            const message = new CreateMetadataRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (typeof data.additionalData == "object") {
                message.additionalData = new Map(Object.entries(data.additionalData));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                additionalData?: {
                    [key: string]: string;
                };
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.additionalData != null) {
                data.additionalData = (Object.fromEntries)(this.additionalData);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            for (const [key, value] of this.additionalData) {
                writer.writeMessage(2, this.additionalData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateMetadataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateMetadataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.additionalData as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateMetadataRequest {
            return CreateMetadataRequest.deserialize(bytes);
        }
    }
    export class CreateMetadataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AuditLog;
            error?: dependency_3.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, AuditLog, 3) as AuditLog;
        }
        set data(value: AuditLog) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AuditLog.prototype.toObject>;
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
        }): CreateMetadataResponse {
            const message = new CreateMetadataResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = AuditLog.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AuditLog.prototype.toObject>;
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateMetadataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateMetadataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = AuditLog.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateMetadataResponse {
            return CreateMetadataResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuditLoggingServiceService {
        static definition = {
            GetAllAuditLog: {
                path: "/integration_api.AuditLoggingService/GetAllAuditLog",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllAuditLogRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllAuditLogRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllAuditLogResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllAuditLogResponse.deserialize(new Uint8Array(bytes))
            },
            GetAuditLog: {
                path: "/integration_api.AuditLoggingService/GetAuditLog",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAuditLogRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAuditLogRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAuditLogResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAuditLogResponse.deserialize(new Uint8Array(bytes))
            },
            CreateMetadata: {
                path: "/integration_api.AuditLoggingService/CreateMetadata",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateMetadataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateMetadataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateMetadataResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateMetadataResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetAllAuditLog(call: grpc_1.ServerUnaryCall<GetAllAuditLogRequest, GetAllAuditLogResponse>, callback: grpc_1.sendUnaryData<GetAllAuditLogResponse>): void;
        abstract GetAuditLog(call: grpc_1.ServerUnaryCall<GetAuditLogRequest, GetAuditLogResponse>, callback: grpc_1.sendUnaryData<GetAuditLogResponse>): void;
        abstract CreateMetadata(call: grpc_1.ServerUnaryCall<CreateMetadataRequest, CreateMetadataResponse>, callback: grpc_1.sendUnaryData<CreateMetadataResponse>): void;
    }
    export class AuditLoggingServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuditLoggingServiceService.definition, "AuditLoggingService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetAllAuditLog: GrpcUnaryServiceInterface<GetAllAuditLogRequest, GetAllAuditLogResponse> = (message: GetAllAuditLogRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllAuditLogResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllAuditLogResponse>, callback?: grpc_1.requestCallback<GetAllAuditLogResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllAuditLog(message, metadata, options, callback);
        };
        GetAuditLog: GrpcUnaryServiceInterface<GetAuditLogRequest, GetAuditLogResponse> = (message: GetAuditLogRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAuditLogResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAuditLogResponse>, callback?: grpc_1.requestCallback<GetAuditLogResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAuditLog(message, metadata, options, callback);
        };
        CreateMetadata: GrpcUnaryServiceInterface<CreateMetadataRequest, CreateMetadataResponse> = (message: CreateMetadataRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateMetadataResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateMetadataResponse>, callback?: grpc_1.requestCallback<CreateMetadataResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateMetadata(message, metadata, options, callback);
        };
    }
}
