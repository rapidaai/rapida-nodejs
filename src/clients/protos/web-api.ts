/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: web-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace web_api {
    export class AuthenticateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): AuthenticateRequest {
            const message = new AuthenticateRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticateRequest {
            return AuthenticateRequest.deserialize(bytes);
        }
    }
    export class RegisterUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
            name?: string;
        }): RegisterUserRequest {
            const message = new RegisterUserRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
                name?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterUserRequest {
            return RegisterUserRequest.deserialize(bytes);
        }
    }
    export class Token extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            token?: string;
            tokenType?: string;
            isExpired?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("tokenType" in data && data.tokenType != undefined) {
                    this.tokenType = data.tokenType;
                }
                if ("isExpired" in data && data.isExpired != undefined) {
                    this.isExpired = data.isExpired;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tokenType() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set tokenType(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get isExpired() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set isExpired(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            token?: string;
            tokenType?: string;
            isExpired?: boolean;
        }): Token {
            const message = new Token({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.tokenType != null) {
                message.tokenType = data.tokenType;
            }
            if (data.isExpired != null) {
                message.isExpired = data.isExpired;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                token?: string;
                tokenType?: string;
                isExpired?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.tokenType != null) {
                data.tokenType = this.tokenType;
            }
            if (this.isExpired != null) {
                data.isExpired = this.isExpired;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (this.tokenType.length)
                writer.writeString(3, this.tokenType);
            if (this.isExpired != false)
                writer.writeBool(4, this.isExpired);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Token {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Token();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    case 3:
                        message.tokenType = reader.readString();
                        break;
                    case 4:
                        message.isExpired = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Token {
            return Token.deserialize(bytes);
        }
    }
    export class OrganizationRole extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            organizationId?: string;
            role?: string;
            organizationName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("organizationName" in data && data.organizationName != undefined) {
                    this.organizationName = data.organizationName;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get organizationName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set organizationName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            organizationId?: string;
            role?: string;
            organizationName?: string;
        }): OrganizationRole {
            const message = new OrganizationRole({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.organizationName != null) {
                message.organizationName = data.organizationName;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                organizationId?: string;
                role?: string;
                organizationName?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.organizationName != null) {
                data.organizationName = this.organizationName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.organizationId != "0")
                writer.writeUint64String(2, this.organizationId);
            if (this.role.length)
                writer.writeString(3, this.role);
            if (this.organizationName.length)
                writer.writeString(4, this.organizationName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrganizationRole {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrganizationRole();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.organizationId = reader.readUint64String();
                        break;
                    case 3:
                        message.role = reader.readString();
                        break;
                    case 4:
                        message.organizationName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OrganizationRole {
            return OrganizationRole.deserialize(bytes);
        }
    }
    export class ProjectRole extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            projectId?: string;
            role?: string;
            projectName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("projectName" in data && data.projectName != undefined) {
                    this.projectName = data.projectName;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get projectName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set projectName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            projectId?: string;
            role?: string;
            projectName?: string;
        }): ProjectRole {
            const message = new ProjectRole({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.projectName != null) {
                message.projectName = data.projectName;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                projectId?: string;
                role?: string;
                projectName?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.projectName != null) {
                data.projectName = this.projectName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.projectId != "0")
                writer.writeUint64String(2, this.projectId);
            if (this.role.length)
                writer.writeString(3, this.role);
            if (this.projectName.length)
                writer.writeString(4, this.projectName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProjectRole {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProjectRole();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.projectId = reader.readUint64String();
                        break;
                    case 3:
                        message.role = reader.readString();
                        break;
                    case 4:
                        message.projectName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProjectRole {
            return ProjectRole.deserialize(bytes);
        }
    }
    export class FeaturePermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            feature?: string;
            isEnable?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("feature" in data && data.feature != undefined) {
                    this.feature = data.feature;
                }
                if ("isEnable" in data && data.isEnable != undefined) {
                    this.isEnable = data.isEnable;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get feature() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set feature(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get isEnable() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set isEnable(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            feature?: string;
            isEnable?: boolean;
        }): FeaturePermission {
            const message = new FeaturePermission({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.feature != null) {
                message.feature = data.feature;
            }
            if (data.isEnable != null) {
                message.isEnable = data.isEnable;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                feature?: string;
                isEnable?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.feature != null) {
                data.feature = this.feature;
            }
            if (this.isEnable != null) {
                data.isEnable = this.isEnable;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.feature.length)
                writer.writeString(2, this.feature);
            if (this.isEnable != false)
                writer.writeBool(3, this.isEnable);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeaturePermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeaturePermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.feature = reader.readString();
                        break;
                    case 3:
                        message.isEnable = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeaturePermission {
            return FeaturePermission.deserialize(bytes);
        }
    }
    export class Authentication extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            user?: dependency_2.User;
            token?: Token;
            projectRoles?: ProjectRole[];
            featurePermissions?: FeaturePermission[];
        } & (({
            organizationRole?: OrganizationRole;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("organizationRole" in data && data.organizationRole != undefined) {
                    this.organizationRole = data.organizationRole;
                }
                if ("projectRoles" in data && data.projectRoles != undefined) {
                    this.projectRoles = data.projectRoles;
                }
                if ("featurePermissions" in data && data.featurePermissions != undefined) {
                    this.featurePermissions = data.featurePermissions;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 1) as dependency_2.User;
        }
        set user(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get token() {
            return pb_1.Message.getWrapperField(this, Token, 2) as Token;
        }
        set token(value: Token) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_token() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get organizationRole() {
            return pb_1.Message.getWrapperField(this, OrganizationRole, 3) as OrganizationRole;
        }
        set organizationRole(value: OrganizationRole) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_organizationRole() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get projectRoles() {
            return pb_1.Message.getRepeatedWrapperField(this, ProjectRole, 4) as ProjectRole[];
        }
        set projectRoles(value: ProjectRole[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get featurePermissions() {
            return pb_1.Message.getRepeatedWrapperField(this, FeaturePermission, 5) as FeaturePermission[];
        }
        set featurePermissions(value: FeaturePermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get _organizationRole() {
            const cases: {
                [index: number]: "none" | "organizationRole";
            } = {
                0: "none",
                3: "organizationRole"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            user?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            token?: ReturnType<typeof Token.prototype.toObject>;
            organizationRole?: ReturnType<typeof OrganizationRole.prototype.toObject>;
            projectRoles?: ReturnType<typeof ProjectRole.prototype.toObject>[];
            featurePermissions?: ReturnType<typeof FeaturePermission.prototype.toObject>[];
        }): Authentication {
            const message = new Authentication({});
            if (data.user != null) {
                message.user = dependency_2.User.fromObject(data.user);
            }
            if (data.token != null) {
                message.token = Token.fromObject(data.token);
            }
            if (data.organizationRole != null) {
                message.organizationRole = OrganizationRole.fromObject(data.organizationRole);
            }
            if (data.projectRoles != null) {
                message.projectRoles = data.projectRoles.map(item => ProjectRole.fromObject(item));
            }
            if (data.featurePermissions != null) {
                message.featurePermissions = data.featurePermissions.map(item => FeaturePermission.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof dependency_2.User.prototype.toObject>;
                token?: ReturnType<typeof Token.prototype.toObject>;
                organizationRole?: ReturnType<typeof OrganizationRole.prototype.toObject>;
                projectRoles?: ReturnType<typeof ProjectRole.prototype.toObject>[];
                featurePermissions?: ReturnType<typeof FeaturePermission.prototype.toObject>[];
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.token != null) {
                data.token = this.token.toObject();
            }
            if (this.organizationRole != null) {
                data.organizationRole = this.organizationRole.toObject();
            }
            if (this.projectRoles != null) {
                data.projectRoles = this.projectRoles.map((item: ProjectRole) => item.toObject());
            }
            if (this.featurePermissions != null) {
                data.featurePermissions = this.featurePermissions.map((item: FeaturePermission) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_token)
                writer.writeMessage(2, this.token, () => this.token.serialize(writer));
            if (this.has_organizationRole)
                writer.writeMessage(3, this.organizationRole, () => this.organizationRole.serialize(writer));
            if (this.projectRoles.length)
                writer.writeRepeatedMessage(4, this.projectRoles, (item: ProjectRole) => item.serialize(writer));
            if (this.featurePermissions.length)
                writer.writeRepeatedMessage(5, this.featurePermissions, (item: FeaturePermission) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Authentication {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Authentication();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = dependency_2.User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.token, () => message.token = Token.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.organizationRole, () => message.organizationRole = OrganizationRole.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.projectRoles, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ProjectRole.deserialize(reader), ProjectRole));
                        break;
                    case 5:
                        reader.readMessage(message.featurePermissions, () => pb_1.Message.addToRepeatedWrapperField(message, 5, FeaturePermission.deserialize(reader), FeaturePermission));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Authentication {
            return Authentication.deserialize(bytes);
        }
    }
    export class ScopedAuthentication extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: number;
            organizationId?: number;
            projectId?: number;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set organizationId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set projectId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            userId?: number;
            organizationId?: number;
            projectId?: number;
            status?: string;
        }): ScopedAuthentication {
            const message = new ScopedAuthentication({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: number;
                organizationId?: number;
                projectId?: number;
                status?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId != 0)
                writer.writeUint64(1, this.userId);
            if (this.organizationId != 0)
                writer.writeUint64(2, this.organizationId);
            if (this.projectId != 0)
                writer.writeUint64(3, this.projectId);
            if (this.status.length)
                writer.writeString(4, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScopedAuthentication {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScopedAuthentication();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readUint64();
                        break;
                    case 2:
                        message.organizationId = reader.readUint64();
                        break;
                    case 3:
                        message.projectId = reader.readUint64();
                        break;
                    case 4:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScopedAuthentication {
            return ScopedAuthentication.deserialize(bytes);
        }
    }
    export class AuthenticationError extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errorCode?: string;
            errorMessage?: string;
            humanMessage?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errorCode" in data && data.errorCode != undefined) {
                    this.errorCode = data.errorCode;
                }
                if ("errorMessage" in data && data.errorMessage != undefined) {
                    this.errorMessage = data.errorMessage;
                }
                if ("humanMessage" in data && data.humanMessage != undefined) {
                    this.humanMessage = data.humanMessage;
                }
            }
        }
        get errorCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set errorCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get errorMessage() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set errorMessage(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get humanMessage() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set humanMessage(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            errorCode?: string;
            errorMessage?: string;
            humanMessage?: string;
        }): AuthenticationError {
            const message = new AuthenticationError({});
            if (data.errorCode != null) {
                message.errorCode = data.errorCode;
            }
            if (data.errorMessage != null) {
                message.errorMessage = data.errorMessage;
            }
            if (data.humanMessage != null) {
                message.humanMessage = data.humanMessage;
            }
            return message;
        }
        toObject() {
            const data: {
                errorCode?: string;
                errorMessage?: string;
                humanMessage?: string;
            } = {};
            if (this.errorCode != null) {
                data.errorCode = this.errorCode;
            }
            if (this.errorMessage != null) {
                data.errorMessage = this.errorMessage;
            }
            if (this.humanMessage != null) {
                data.humanMessage = this.humanMessage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errorCode != "0")
                writer.writeUint64String(1, this.errorCode);
            if (this.errorMessage.length)
                writer.writeString(2, this.errorMessage);
            if (this.humanMessage.length)
                writer.writeString(3, this.humanMessage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticationError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticationError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errorCode = reader.readUint64String();
                        break;
                    case 2:
                        message.errorMessage = reader.readString();
                        break;
                    case 3:
                        message.humanMessage = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticationError {
            return AuthenticationError.deserialize(bytes);
        }
    }
    export class AuthenticateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [4]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
        } & (({
            data?: Authentication;
        }) | ({
            error?: AuthenticationError;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, Authentication, 3) as Authentication;
        }
        set data(value: Authentication) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, AuthenticationError, 4) as AuthenticationError;
        }
        set error(value: AuthenticationError) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[1], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _data() {
            const cases: {
                [index: number]: "none" | "data";
            } = {
                0: "none",
                3: "data"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                4: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Authentication.prototype.toObject>;
            error?: ReturnType<typeof AuthenticationError.prototype.toObject>;
        }): AuthenticateResponse {
            const message = new AuthenticateResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = Authentication.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = AuthenticationError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Authentication.prototype.toObject>;
                error?: ReturnType<typeof AuthenticationError.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = Authentication.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = AuthenticationError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticateResponse {
            return AuthenticateResponse.deserialize(bytes);
        }
    }
    export class ForgotPasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): ForgotPasswordRequest {
            const message = new ForgotPasswordRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForgotPasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForgotPasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ForgotPasswordRequest {
            return ForgotPasswordRequest.deserialize(bytes);
        }
    }
    export class ForgotPasswordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
        } & (({
            error?: AuthenticationError;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, AuthenticationError, 3) as AuthenticationError;
        }
        set error(value: AuthenticationError) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                3: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            error?: ReturnType<typeof AuthenticationError.prototype.toObject>;
        }): ForgotPasswordResponse {
            const message = new ForgotPasswordResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error != null) {
                message.error = AuthenticationError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                error?: ReturnType<typeof AuthenticationError.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_error)
                writer.writeMessage(3, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForgotPasswordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForgotPasswordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.error, () => message.error = AuthenticationError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ForgotPasswordResponse {
            return ForgotPasswordResponse.deserialize(bytes);
        }
    }
    export class CreatePasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            password?: string;
        }): CreatePasswordRequest {
            const message = new CreatePasswordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                password?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePasswordRequest {
            return CreatePasswordRequest.deserialize(bytes);
        }
    }
    export class CreatePasswordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
        } & (({
            error?: AuthenticationError;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, AuthenticationError, 3) as AuthenticationError;
        }
        set error(value: AuthenticationError) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                3: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            error?: ReturnType<typeof AuthenticationError.prototype.toObject>;
        }): CreatePasswordResponse {
            const message = new CreatePasswordResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error != null) {
                message.error = AuthenticationError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                error?: ReturnType<typeof AuthenticationError.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_error)
                writer.writeMessage(3, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePasswordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePasswordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.error, () => message.error = AuthenticationError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePasswordResponse {
            return CreatePasswordResponse.deserialize(bytes);
        }
    }
    export class VerifyTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tokenType?: string;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tokenType" in data && data.tokenType != undefined) {
                    this.tokenType = data.tokenType;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get tokenType() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tokenType(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tokenType?: string;
            token?: string;
        }): VerifyTokenRequest {
            const message = new VerifyTokenRequest({});
            if (data.tokenType != null) {
                message.tokenType = data.tokenType;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                tokenType?: string;
                token?: string;
            } = {};
            if (this.tokenType != null) {
                data.tokenType = this.tokenType;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tokenType.length)
                writer.writeString(1, this.tokenType);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tokenType = reader.readString();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyTokenRequest {
            return VerifyTokenRequest.deserialize(bytes);
        }
    }
    export class VerifyTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: Token;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, Token, 3) as Token;
        }
        set data(value: Token) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Token.prototype.toObject>;
        }): VerifyTokenResponse {
            const message = new VerifyTokenResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = Token.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Token.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = Token.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyTokenResponse {
            return VerifyTokenResponse.deserialize(bytes);
        }
    }
    export class AuthorizeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AuthorizeRequest {
            const message = new AuthorizeRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthorizeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthorizeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthorizeRequest {
            return AuthorizeRequest.deserialize(bytes);
        }
    }
    export class ScopeAuthorizeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scope?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
            }
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set scope(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            scope?: string;
        }): ScopeAuthorizeRequest {
            const message = new ScopeAuthorizeRequest({});
            if (data.scope != null) {
                message.scope = data.scope;
            }
            return message;
        }
        toObject() {
            const data: {
                scope?: string;
            } = {};
            if (this.scope != null) {
                data.scope = this.scope;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scope.length)
                writer.writeString(1, this.scope);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScopeAuthorizeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScopeAuthorizeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scope = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScopeAuthorizeRequest {
            return ScopeAuthorizeRequest.deserialize(bytes);
        }
    }
    export class ScopedAuthenticationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
            data?: ScopedAuthentication;
        } & (({
            error?: AuthenticationError;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, ScopedAuthentication, 3) as ScopedAuthentication;
        }
        set data(value: ScopedAuthentication) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, AuthenticationError, 4) as AuthenticationError;
        }
        set error(value: AuthenticationError) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                4: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof ScopedAuthentication.prototype.toObject>;
            error?: ReturnType<typeof AuthenticationError.prototype.toObject>;
        }): ScopedAuthenticationResponse {
            const message = new ScopedAuthenticationResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = ScopedAuthentication.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = AuthenticationError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof ScopedAuthentication.prototype.toObject>;
                error?: ReturnType<typeof AuthenticationError.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScopedAuthenticationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScopedAuthenticationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = ScopedAuthentication.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = AuthenticationError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScopedAuthenticationResponse {
            return ScopedAuthenticationResponse.deserialize(bytes);
        }
    }
    export class GetUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetUserRequest {
            const message = new GetUserRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserRequest {
            return GetUserRequest.deserialize(bytes);
        }
    }
    export class GetUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_2.User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 3) as dependency_2.User;
        }
        set data(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_2.User.prototype.toObject>;
        }): GetUserResponse {
            const message = new GetUserResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = dependency_2.User.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = dependency_2.User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserResponse {
            return GetUserResponse.deserialize(bytes);
        }
    }
    export class UpdateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            email?: string;
        }) | ({
            name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_email() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _email() {
            const cases: {
                [index: number]: "none" | "email";
            } = {
                0: "none",
                1: "email"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                2: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            email?: string;
            name?: string;
        }): UpdateUserRequest {
            const message = new UpdateUserRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                name?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_email)
                writer.writeString(1, this.email);
            if (this.has_name)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserRequest {
            return UpdateUserRequest.deserialize(bytes);
        }
    }
    export class UpdateUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_2.User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 3) as dependency_2.User;
        }
        set data(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_2.User.prototype.toObject>;
        }): UpdateUserResponse {
            const message = new UpdateUserResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = dependency_2.User.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = dependency_2.User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserResponse {
            return UpdateUserResponse.deserialize(bytes);
        }
    }
    export class SocialAuthenticationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: string;
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            state?: string;
            code?: string;
        }): SocialAuthenticationRequest {
            const message = new SocialAuthenticationRequest({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: string;
                code?: string;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state.length)
                writer.writeString(1, this.state);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SocialAuthenticationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SocialAuthenticationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SocialAuthenticationRequest {
            return SocialAuthenticationRequest.deserialize(bytes);
        }
    }
    export class GetAllUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 1) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 2) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
        }): GetAllUserRequest {
            const message = new GetAllUserRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllUserRequest {
            return GetAllUserRequest.deserialize(bytes);
        }
    }
    export class GetAllUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_2.User[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.User, 3) as dependency_2.User[];
        }
        set data(value: dependency_2.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_2.User.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllUserResponse {
            const message = new GetAllUserResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => dependency_2.User.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_2.User.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: dependency_2.User) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: dependency_2.User) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.User.deserialize(reader), dependency_2.User));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllUserResponse {
            return GetAllUserResponse.deserialize(bytes);
        }
    }
    export class OrganizationError extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errorCode?: string;
            errorMessage?: string;
            humanMessage?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errorCode" in data && data.errorCode != undefined) {
                    this.errorCode = data.errorCode;
                }
                if ("errorMessage" in data && data.errorMessage != undefined) {
                    this.errorMessage = data.errorMessage;
                }
                if ("humanMessage" in data && data.humanMessage != undefined) {
                    this.humanMessage = data.humanMessage;
                }
            }
        }
        get errorCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set errorCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get errorMessage() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set errorMessage(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get humanMessage() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set humanMessage(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            errorCode?: string;
            errorMessage?: string;
            humanMessage?: string;
        }): OrganizationError {
            const message = new OrganizationError({});
            if (data.errorCode != null) {
                message.errorCode = data.errorCode;
            }
            if (data.errorMessage != null) {
                message.errorMessage = data.errorMessage;
            }
            if (data.humanMessage != null) {
                message.humanMessage = data.humanMessage;
            }
            return message;
        }
        toObject() {
            const data: {
                errorCode?: string;
                errorMessage?: string;
                humanMessage?: string;
            } = {};
            if (this.errorCode != null) {
                data.errorCode = this.errorCode;
            }
            if (this.errorMessage != null) {
                data.errorMessage = this.errorMessage;
            }
            if (this.humanMessage != null) {
                data.humanMessage = this.humanMessage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errorCode != "0")
                writer.writeUint64String(1, this.errorCode);
            if (this.errorMessage.length)
                writer.writeString(2, this.errorMessage);
            if (this.humanMessage.length)
                writer.writeString(3, this.humanMessage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrganizationError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrganizationError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errorCode = reader.readUint64String();
                        break;
                    case 2:
                        message.errorMessage = reader.readString();
                        break;
                    case 3:
                        message.humanMessage = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OrganizationError {
            return OrganizationError.deserialize(bytes);
        }
    }
    export class CreateOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            organizationName?: string;
            organizationSize?: string;
            organizationIndustry?: string;
        } & (({
            organizationContact?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("organizationName" in data && data.organizationName != undefined) {
                    this.organizationName = data.organizationName;
                }
                if ("organizationSize" in data && data.organizationSize != undefined) {
                    this.organizationSize = data.organizationSize;
                }
                if ("organizationIndustry" in data && data.organizationIndustry != undefined) {
                    this.organizationIndustry = data.organizationIndustry;
                }
                if ("organizationContact" in data && data.organizationContact != undefined) {
                    this.organizationContact = data.organizationContact;
                }
            }
        }
        get organizationName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set organizationName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get organizationSize() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set organizationSize(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get organizationIndustry() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set organizationIndustry(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get organizationContact() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set organizationContact(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_organizationContact() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _organizationContact() {
            const cases: {
                [index: number]: "none" | "organizationContact";
            } = {
                0: "none",
                4: "organizationContact"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            organizationName?: string;
            organizationSize?: string;
            organizationIndustry?: string;
            organizationContact?: string;
        }): CreateOrganizationRequest {
            const message = new CreateOrganizationRequest({});
            if (data.organizationName != null) {
                message.organizationName = data.organizationName;
            }
            if (data.organizationSize != null) {
                message.organizationSize = data.organizationSize;
            }
            if (data.organizationIndustry != null) {
                message.organizationIndustry = data.organizationIndustry;
            }
            if (data.organizationContact != null) {
                message.organizationContact = data.organizationContact;
            }
            return message;
        }
        toObject() {
            const data: {
                organizationName?: string;
                organizationSize?: string;
                organizationIndustry?: string;
                organizationContact?: string;
            } = {};
            if (this.organizationName != null) {
                data.organizationName = this.organizationName;
            }
            if (this.organizationSize != null) {
                data.organizationSize = this.organizationSize;
            }
            if (this.organizationIndustry != null) {
                data.organizationIndustry = this.organizationIndustry;
            }
            if (this.organizationContact != null) {
                data.organizationContact = this.organizationContact;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.organizationName.length)
                writer.writeString(1, this.organizationName);
            if (this.organizationSize.length)
                writer.writeString(2, this.organizationSize);
            if (this.organizationIndustry.length)
                writer.writeString(3, this.organizationIndustry);
            if (this.has_organizationContact)
                writer.writeString(4, this.organizationContact);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.organizationName = reader.readString();
                        break;
                    case 2:
                        message.organizationSize = reader.readString();
                        break;
                    case 3:
                        message.organizationIndustry = reader.readString();
                        break;
                    case 4:
                        message.organizationContact = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateOrganizationRequest {
            return CreateOrganizationRequest.deserialize(bytes);
        }
    }
    export class UpdateOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [4]];
        constructor(data?: any[] | ({
            organizationId?: string;
        } & (({
            organizationName?: string;
        }) | ({
            organizationIndustry?: string;
        }) | ({
            organizationContact?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
                if ("organizationName" in data && data.organizationName != undefined) {
                    this.organizationName = data.organizationName;
                }
                if ("organizationIndustry" in data && data.organizationIndustry != undefined) {
                    this.organizationIndustry = data.organizationIndustry;
                }
                if ("organizationContact" in data && data.organizationContact != undefined) {
                    this.organizationContact = data.organizationContact;
                }
            }
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get organizationName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set organizationName(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_organizationName() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get organizationIndustry() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set organizationIndustry(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_organizationIndustry() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get organizationContact() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set organizationContact(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_organizationContact() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _organizationName() {
            const cases: {
                [index: number]: "none" | "organizationName";
            } = {
                0: "none",
                2: "organizationName"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _organizationIndustry() {
            const cases: {
                [index: number]: "none" | "organizationIndustry";
            } = {
                0: "none",
                3: "organizationIndustry"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _organizationContact() {
            const cases: {
                [index: number]: "none" | "organizationContact";
            } = {
                0: "none",
                4: "organizationContact"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            organizationId?: string;
            organizationName?: string;
            organizationIndustry?: string;
            organizationContact?: string;
        }): UpdateOrganizationRequest {
            const message = new UpdateOrganizationRequest({});
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            if (data.organizationName != null) {
                message.organizationName = data.organizationName;
            }
            if (data.organizationIndustry != null) {
                message.organizationIndustry = data.organizationIndustry;
            }
            if (data.organizationContact != null) {
                message.organizationContact = data.organizationContact;
            }
            return message;
        }
        toObject() {
            const data: {
                organizationId?: string;
                organizationName?: string;
                organizationIndustry?: string;
                organizationContact?: string;
            } = {};
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            if (this.organizationName != null) {
                data.organizationName = this.organizationName;
            }
            if (this.organizationIndustry != null) {
                data.organizationIndustry = this.organizationIndustry;
            }
            if (this.organizationContact != null) {
                data.organizationContact = this.organizationContact;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.organizationId != "0")
                writer.writeUint64String(1, this.organizationId);
            if (this.has_organizationName)
                writer.writeString(2, this.organizationName);
            if (this.has_organizationIndustry)
                writer.writeString(3, this.organizationIndustry);
            if (this.has_organizationContact)
                writer.writeString(4, this.organizationContact);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.organizationId = reader.readUint64String();
                        break;
                    case 2:
                        message.organizationName = reader.readString();
                        break;
                    case 3:
                        message.organizationIndustry = reader.readString();
                        break;
                    case 4:
                        message.organizationContact = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateOrganizationRequest {
            return UpdateOrganizationRequest.deserialize(bytes);
        }
    }
    export class GetOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetOrganizationRequest {
            const message = new GetOrganizationRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetOrganizationRequest {
            return GetOrganizationRequest.deserialize(bytes);
        }
    }
    export class GetOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_2.Organization;
            role?: OrganizationRole;
            error?: OrganizationError;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_2.Organization, 3) as dependency_2.Organization;
        }
        set data(value: dependency_2.Organization) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get role() {
            return pb_1.Message.getWrapperField(this, OrganizationRole, 4) as OrganizationRole;
        }
        set role(value: OrganizationRole) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_role() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, OrganizationError, 5) as OrganizationError;
        }
        set error(value: OrganizationError) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_2.Organization.prototype.toObject>;
            role?: ReturnType<typeof OrganizationRole.prototype.toObject>;
            error?: ReturnType<typeof OrganizationError.prototype.toObject>;
        }): GetOrganizationResponse {
            const message = new GetOrganizationResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = dependency_2.Organization.fromObject(data.data);
            }
            if (data.role != null) {
                message.role = OrganizationRole.fromObject(data.role);
            }
            if (data.error != null) {
                message.error = OrganizationError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_2.Organization.prototype.toObject>;
                role?: ReturnType<typeof OrganizationRole.prototype.toObject>;
                error?: ReturnType<typeof OrganizationError.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.role != null) {
                data.role = this.role.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_role)
                writer.writeMessage(4, this.role, () => this.role.serialize(writer));
            if (this.has_error)
                writer.writeMessage(5, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = dependency_2.Organization.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.role, () => message.role = OrganizationRole.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.error, () => message.error = OrganizationError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetOrganizationResponse {
            return GetOrganizationResponse.deserialize(bytes);
        }
    }
    export class CreateOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_2.Organization;
            role?: OrganizationRole;
            error?: OrganizationError;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_2.Organization, 3) as dependency_2.Organization;
        }
        set data(value: dependency_2.Organization) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get role() {
            return pb_1.Message.getWrapperField(this, OrganizationRole, 4) as OrganizationRole;
        }
        set role(value: OrganizationRole) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_role() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, OrganizationError, 5) as OrganizationError;
        }
        set error(value: OrganizationError) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_2.Organization.prototype.toObject>;
            role?: ReturnType<typeof OrganizationRole.prototype.toObject>;
            error?: ReturnType<typeof OrganizationError.prototype.toObject>;
        }): CreateOrganizationResponse {
            const message = new CreateOrganizationResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = dependency_2.Organization.fromObject(data.data);
            }
            if (data.role != null) {
                message.role = OrganizationRole.fromObject(data.role);
            }
            if (data.error != null) {
                message.error = OrganizationError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_2.Organization.prototype.toObject>;
                role?: ReturnType<typeof OrganizationRole.prototype.toObject>;
                error?: ReturnType<typeof OrganizationError.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.role != null) {
                data.role = this.role.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_role)
                writer.writeMessage(4, this.role, () => this.role.serialize(writer));
            if (this.has_error)
                writer.writeMessage(5, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = dependency_2.Organization.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.role, () => message.role = OrganizationRole.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.error, () => message.error = OrganizationError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateOrganizationResponse {
            return CreateOrganizationResponse.deserialize(bytes);
        }
    }
    export class UpdateOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            error?: OrganizationError;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, OrganizationError, 5) as OrganizationError;
        }
        set error(value: OrganizationError) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            error?: ReturnType<typeof OrganizationError.prototype.toObject>;
        }): UpdateOrganizationResponse {
            const message = new UpdateOrganizationResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error != null) {
                message.error = OrganizationError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                error?: ReturnType<typeof OrganizationError.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_error)
                writer.writeMessage(5, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.error, () => message.error = OrganizationError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateOrganizationResponse {
            return UpdateOrganizationResponse.deserialize(bytes);
        }
    }
    export class UpdateBillingInformationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paymentMethod?: string;
            billingInterval?: UpdateBillingInformationRequest.BillingInterval;
            taxInformation?: string;
            address?: string;
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paymentMethod" in data && data.paymentMethod != undefined) {
                    this.paymentMethod = data.paymentMethod;
                }
                if ("billingInterval" in data && data.billingInterval != undefined) {
                    this.billingInterval = data.billingInterval;
                }
                if ("taxInformation" in data && data.taxInformation != undefined) {
                    this.taxInformation = data.taxInformation;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get paymentMethod() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set paymentMethod(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get billingInterval() {
            return pb_1.Message.getFieldWithDefault(this, 2, UpdateBillingInformationRequest.BillingInterval.Annually) as UpdateBillingInformationRequest.BillingInterval;
        }
        set billingInterval(value: UpdateBillingInformationRequest.BillingInterval) {
            pb_1.Message.setField(this, 2, value);
        }
        get taxInformation() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set taxInformation(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            paymentMethod?: string;
            billingInterval?: UpdateBillingInformationRequest.BillingInterval;
            taxInformation?: string;
            address?: string;
            email?: string;
        }): UpdateBillingInformationRequest {
            const message = new UpdateBillingInformationRequest({});
            if (data.paymentMethod != null) {
                message.paymentMethod = data.paymentMethod;
            }
            if (data.billingInterval != null) {
                message.billingInterval = data.billingInterval;
            }
            if (data.taxInformation != null) {
                message.taxInformation = data.taxInformation;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                paymentMethod?: string;
                billingInterval?: UpdateBillingInformationRequest.BillingInterval;
                taxInformation?: string;
                address?: string;
                email?: string;
            } = {};
            if (this.paymentMethod != null) {
                data.paymentMethod = this.paymentMethod;
            }
            if (this.billingInterval != null) {
                data.billingInterval = this.billingInterval;
            }
            if (this.taxInformation != null) {
                data.taxInformation = this.taxInformation;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.paymentMethod.length)
                writer.writeString(1, this.paymentMethod);
            if (this.billingInterval != UpdateBillingInformationRequest.BillingInterval.Annually)
                writer.writeEnum(2, this.billingInterval);
            if (this.taxInformation.length)
                writer.writeString(3, this.taxInformation);
            if (this.address.length)
                writer.writeString(4, this.address);
            if (this.email.length)
                writer.writeString(5, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateBillingInformationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateBillingInformationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.paymentMethod = reader.readString();
                        break;
                    case 2:
                        message.billingInterval = reader.readEnum();
                        break;
                    case 3:
                        message.taxInformation = reader.readString();
                        break;
                    case 4:
                        message.address = reader.readString();
                        break;
                    case 5:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateBillingInformationRequest {
            return UpdateBillingInformationRequest.deserialize(bytes);
        }
    }
    export namespace UpdateBillingInformationRequest {
        export enum BillingInterval {
            Annually = 0,
            Monthly = 1
        }
    }
    export class Project extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            members?: dependency_2.User[];
            status?: string;
            createdDate?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("members" in data && data.members != undefined) {
                    this.members = data.members;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get members() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.User, 4) as dependency_2.User[];
        }
        set members(value: dependency_2.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            members?: ReturnType<typeof dependency_2.User.prototype.toObject>[];
            status?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): Project {
            const message = new Project({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.members != null) {
                message.members = data.members.map(item => dependency_2.User.fromObject(item));
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                members?: ReturnType<typeof dependency_2.User.prototype.toObject>[];
                status?: string;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.members != null) {
                data.members = this.members.map((item: dependency_2.User) => item.toObject());
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.members.length)
                writer.writeRepeatedMessage(4, this.members, (item: dependency_2.User) => item.serialize(writer));
            if (this.status.length)
                writer.writeString(5, this.status);
            if (this.has_createdDate)
                writer.writeMessage(6, this.createdDate, () => this.createdDate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Project {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Project();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.User.deserialize(reader), dependency_2.User));
                        break;
                    case 5:
                        message.status = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Project {
            return Project.deserialize(bytes);
        }
    }
    export class CreateProjectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            projectName?: string;
        } & (({
            projectDescription?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectName" in data && data.projectName != undefined) {
                    this.projectName = data.projectName;
                }
                if ("projectDescription" in data && data.projectDescription != undefined) {
                    this.projectDescription = data.projectDescription;
                }
            }
        }
        get projectName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set projectName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get projectDescription() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set projectDescription(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_projectDescription() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _projectDescription() {
            const cases: {
                [index: number]: "none" | "projectDescription";
            } = {
                0: "none",
                2: "projectDescription"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            projectName?: string;
            projectDescription?: string;
        }): CreateProjectRequest {
            const message = new CreateProjectRequest({});
            if (data.projectName != null) {
                message.projectName = data.projectName;
            }
            if (data.projectDescription != null) {
                message.projectDescription = data.projectDescription;
            }
            return message;
        }
        toObject() {
            const data: {
                projectName?: string;
                projectDescription?: string;
            } = {};
            if (this.projectName != null) {
                data.projectName = this.projectName;
            }
            if (this.projectDescription != null) {
                data.projectDescription = this.projectDescription;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectName.length)
                writer.writeString(1, this.projectName);
            if (this.has_projectDescription)
                writer.writeString(2, this.projectDescription);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateProjectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateProjectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.projectName = reader.readString();
                        break;
                    case 2:
                        message.projectDescription = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateProjectRequest {
            return CreateProjectRequest.deserialize(bytes);
        }
    }
    export class CreateProjectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: Project;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, Project, 3) as Project;
        }
        set data(value: Project) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Project.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): CreateProjectResponse {
            const message = new CreateProjectResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = Project.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Project.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateProjectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateProjectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = Project.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateProjectResponse {
            return CreateProjectResponse.deserialize(bytes);
        }
    }
    export class UpdateProjectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3]];
        constructor(data?: any[] | ({
            projectId?: string;
        } & (({
            projectName?: string;
        }) | ({
            projectDescription?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("projectName" in data && data.projectName != undefined) {
                    this.projectName = data.projectName;
                }
                if ("projectDescription" in data && data.projectDescription != undefined) {
                    this.projectDescription = data.projectDescription;
                }
            }
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get projectName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set projectName(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_projectName() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get projectDescription() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set projectDescription(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_projectDescription() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _projectName() {
            const cases: {
                [index: number]: "none" | "projectName";
            } = {
                0: "none",
                2: "projectName"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _projectDescription() {
            const cases: {
                [index: number]: "none" | "projectDescription";
            } = {
                0: "none",
                3: "projectDescription"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            projectId?: string;
            projectName?: string;
            projectDescription?: string;
        }): UpdateProjectRequest {
            const message = new UpdateProjectRequest({});
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.projectName != null) {
                message.projectName = data.projectName;
            }
            if (data.projectDescription != null) {
                message.projectDescription = data.projectDescription;
            }
            return message;
        }
        toObject() {
            const data: {
                projectId?: string;
                projectName?: string;
                projectDescription?: string;
            } = {};
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.projectName != null) {
                data.projectName = this.projectName;
            }
            if (this.projectDescription != null) {
                data.projectDescription = this.projectDescription;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectId != "0")
                writer.writeUint64String(1, this.projectId);
            if (this.has_projectName)
                writer.writeString(2, this.projectName);
            if (this.has_projectDescription)
                writer.writeString(3, this.projectDescription);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateProjectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateProjectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.projectId = reader.readUint64String();
                        break;
                    case 2:
                        message.projectName = reader.readString();
                        break;
                    case 3:
                        message.projectDescription = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateProjectRequest {
            return UpdateProjectRequest.deserialize(bytes);
        }
    }
    export class UpdateProjectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: Project;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, Project, 3) as Project;
        }
        set data(value: Project) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Project.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): UpdateProjectResponse {
            const message = new UpdateProjectResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = Project.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Project.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateProjectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateProjectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = Project.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateProjectResponse {
            return UpdateProjectResponse.deserialize(bytes);
        }
    }
    export class GetProjectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projectId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
            }
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            projectId?: string;
        }): GetProjectRequest {
            const message = new GetProjectRequest({});
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            return message;
        }
        toObject() {
            const data: {
                projectId?: string;
            } = {};
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectId != "0")
                writer.writeUint64String(1, this.projectId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetProjectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetProjectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.projectId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetProjectRequest {
            return GetProjectRequest.deserialize(bytes);
        }
    }
    export class GetProjectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: Project;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, Project, 3) as Project;
        }
        set data(value: Project) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Project.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetProjectResponse {
            const message = new GetProjectResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = Project.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Project.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetProjectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetProjectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = Project.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetProjectResponse {
            return GetProjectResponse.deserialize(bytes);
        }
    }
    export class GetAllProjectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 1) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 2) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
        }): GetAllProjectRequest {
            const message = new GetAllProjectRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllProjectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllProjectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllProjectRequest {
            return GetAllProjectRequest.deserialize(bytes);
        }
    }
    export class GetAllProjectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: Project[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, Project, 3) as Project[];
        }
        set data(value: Project[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Project.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllProjectResponse {
            const message = new GetAllProjectResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => Project.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Project.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: Project) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: Project) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllProjectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllProjectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Project.deserialize(reader), Project));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllProjectResponse {
            return GetAllProjectResponse.deserialize(bytes);
        }
    }
    export class AddUsersToProjectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            role?: string;
            projectIds?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("projectIds" in data && data.projectIds != undefined) {
                    this.projectIds = data.projectIds;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get projectIds() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set projectIds(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            email?: string;
            role?: string;
            projectIds?: string[];
        }): AddUsersToProjectRequest {
            const message = new AddUsersToProjectRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.projectIds != null) {
                message.projectIds = data.projectIds;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                role?: string;
                projectIds?: string[];
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.projectIds != null) {
                data.projectIds = this.projectIds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.role.length)
                writer.writeString(2, this.role);
            if (this.projectIds.length)
                writer.writePackedUint64String(3, this.projectIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddUsersToProjectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddUsersToProjectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.role = reader.readString();
                        break;
                    case 3:
                        message.projectIds = reader.readPackedUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddUsersToProjectRequest {
            return AddUsersToProjectRequest.deserialize(bytes);
        }
    }
    export class ArchiveProjectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): ArchiveProjectRequest {
            const message = new ArchiveProjectRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArchiveProjectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArchiveProjectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArchiveProjectRequest {
            return ArchiveProjectRequest.deserialize(bytes);
        }
    }
    export class ArchiveProjectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            id?: string;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            id?: string;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): ArchiveProjectResponse {
            const message = new ArchiveProjectResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                id?: string;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.id != "0")
                writer.writeUint64String(3, this.id);
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArchiveProjectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArchiveProjectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.id = reader.readUint64String();
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArchiveProjectResponse {
            return ArchiveProjectResponse.deserialize(bytes);
        }
    }
    export class AddUsersToProjectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: Project[];
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, Project, 3) as Project[];
        }
        set data(value: Project[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Project.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): AddUsersToProjectResponse {
            const message = new AddUsersToProjectResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => Project.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Project.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: Project) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: Project) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddUsersToProjectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddUsersToProjectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Project.deserialize(reader), Project));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddUsersToProjectResponse {
            return AddUsersToProjectResponse.deserialize(bytes);
        }
    }
    export class ProjectCredential extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            projectId?: string;
            organizationId?: string;
            name?: string;
            key?: string;
            status?: string;
            createdBy?: string;
            updatedBy?: string;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
            createdUser?: dependency_2.User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdBy" in data && data.createdBy != undefined) {
                    this.createdBy = data.createdBy;
                }
                if ("updatedBy" in data && data.updatedBy != undefined) {
                    this.updatedBy = data.updatedBy;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("createdUser" in data && data.createdUser != undefined) {
                    this.createdUser = data.createdUser;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get createdBy() {
            return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
        }
        set createdBy(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get updatedBy() {
            return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
        }
        set updatedBy(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 9) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 10) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get createdUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 11) as dependency_2.User;
        }
        set createdUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_createdUser() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            id?: string;
            projectId?: string;
            organizationId?: string;
            name?: string;
            key?: string;
            status?: string;
            createdBy?: string;
            updatedBy?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
        }): ProjectCredential {
            const message = new ProjectCredential({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdBy != null) {
                message.createdBy = data.createdBy;
            }
            if (data.updatedBy != null) {
                message.updatedBy = data.updatedBy;
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.createdUser != null) {
                message.createdUser = dependency_2.User.fromObject(data.createdUser);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                projectId?: string;
                organizationId?: string;
                name?: string;
                key?: string;
                status?: string;
                createdBy?: string;
                updatedBy?: string;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdBy != null) {
                data.createdBy = this.createdBy;
            }
            if (this.updatedBy != null) {
                data.updatedBy = this.updatedBy;
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.createdUser != null) {
                data.createdUser = this.createdUser.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.projectId != "0")
                writer.writeUint64String(2, this.projectId);
            if (this.organizationId != "0")
                writer.writeUint64String(3, this.organizationId);
            if (this.name.length)
                writer.writeString(4, this.name);
            if (this.key.length)
                writer.writeString(5, this.key);
            if (this.status.length)
                writer.writeString(6, this.status);
            if (this.createdBy != "0")
                writer.writeUint64String(7, this.createdBy);
            if (this.updatedBy != "0")
                writer.writeUint64String(8, this.updatedBy);
            if (this.has_createdDate)
                writer.writeMessage(9, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(10, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.has_createdUser)
                writer.writeMessage(11, this.createdUser, () => this.createdUser.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProjectCredential {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProjectCredential();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.projectId = reader.readUint64String();
                        break;
                    case 3:
                        message.organizationId = reader.readUint64String();
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.key = reader.readString();
                        break;
                    case 6:
                        message.status = reader.readString();
                        break;
                    case 7:
                        message.createdBy = reader.readUint64String();
                        break;
                    case 8:
                        message.updatedBy = reader.readUint64String();
                        break;
                    case 9:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.createdUser, () => message.createdUser = dependency_2.User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProjectCredential {
            return ProjectCredential.deserialize(bytes);
        }
    }
    export class CreateProjectCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projectId?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            projectId?: string;
            name?: string;
        }): CreateProjectCredentialRequest {
            const message = new CreateProjectCredentialRequest({});
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                projectId?: string;
                name?: string;
            } = {};
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectId != "0")
                writer.writeUint64String(1, this.projectId);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateProjectCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateProjectCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.projectId = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateProjectCredentialRequest {
            return CreateProjectCredentialRequest.deserialize(bytes);
        }
    }
    export class GetAllProjectCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
            projectId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 1) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 2) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            projectId?: string;
        }): GetAllProjectCredentialRequest {
            const message = new GetAllProjectCredentialRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
                projectId?: string;
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (this.projectId != "0")
                writer.writeUint64String(3, this.projectId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllProjectCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllProjectCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    case 3:
                        message.projectId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllProjectCredentialRequest {
            return GetAllProjectCredentialRequest.deserialize(bytes);
        }
    }
    export class CreateProjectCredentialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: ProjectCredential;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, ProjectCredential, 3) as ProjectCredential;
        }
        set data(value: ProjectCredential) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof ProjectCredential.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): CreateProjectCredentialResponse {
            const message = new CreateProjectCredentialResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = ProjectCredential.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof ProjectCredential.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateProjectCredentialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateProjectCredentialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = ProjectCredential.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateProjectCredentialResponse {
            return CreateProjectCredentialResponse.deserialize(bytes);
        }
    }
    export class GetAllProjectCredentialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: ProjectCredential[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, ProjectCredential, 3) as ProjectCredential[];
        }
        set data(value: ProjectCredential[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof ProjectCredential.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllProjectCredentialResponse {
            const message = new GetAllProjectCredentialResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => ProjectCredential.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof ProjectCredential.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: ProjectCredential) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: ProjectCredential) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllProjectCredentialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllProjectCredentialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ProjectCredential.deserialize(reader), ProjectCredential));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllProjectCredentialResponse {
            return GetAllProjectCredentialResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthenticationServiceService {
        static definition = {
            Authenticate: {
                path: "/web_api.AuthenticationService/Authenticate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthenticateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthenticateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthenticateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthenticateResponse.deserialize(new Uint8Array(bytes))
            },
            RegisterUser: {
                path: "/web_api.AuthenticationService/RegisterUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthenticateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthenticateResponse.deserialize(new Uint8Array(bytes))
            },
            Authorize: {
                path: "/web_api.AuthenticationService/Authorize",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthorizeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthorizeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthenticateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthenticateResponse.deserialize(new Uint8Array(bytes))
            },
            ScopeAuthorize: {
                path: "/web_api.AuthenticationService/ScopeAuthorize",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ScopeAuthorizeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ScopeAuthorizeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ScopedAuthenticationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ScopedAuthenticationResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyToken: {
                path: "/web_api.AuthenticationService/VerifyToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyTokenResponse.deserialize(new Uint8Array(bytes))
            },
            ForgotPassword: {
                path: "/web_api.AuthenticationService/ForgotPassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ForgotPasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ForgotPasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ForgotPasswordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ForgotPasswordResponse.deserialize(new Uint8Array(bytes))
            },
            CreatePassword: {
                path: "/web_api.AuthenticationService/CreatePassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreatePasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreatePasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreatePasswordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreatePasswordResponse.deserialize(new Uint8Array(bytes))
            },
            GetUser: {
                path: "/web_api.AuthenticationService/GetUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUserResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateUser: {
                path: "/web_api.AuthenticationService/UpdateUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateUserResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllUser: {
                path: "/web_api.AuthenticationService/GetAllUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllUserResponse.deserialize(new Uint8Array(bytes))
            },
            Linkedin: {
                path: "/web_api.AuthenticationService/Linkedin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SocialAuthenticationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SocialAuthenticationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthenticateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthenticateResponse.deserialize(new Uint8Array(bytes))
            },
            Google: {
                path: "/web_api.AuthenticationService/Google",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SocialAuthenticationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SocialAuthenticationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthenticateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthenticateResponse.deserialize(new Uint8Array(bytes))
            },
            Github: {
                path: "/web_api.AuthenticationService/Github",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SocialAuthenticationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SocialAuthenticationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthenticateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthenticateResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Authenticate(call: grpc_1.ServerUnaryCall<AuthenticateRequest, AuthenticateResponse>, callback: grpc_1.sendUnaryData<AuthenticateResponse>): void;
        abstract RegisterUser(call: grpc_1.ServerUnaryCall<RegisterUserRequest, AuthenticateResponse>, callback: grpc_1.sendUnaryData<AuthenticateResponse>): void;
        abstract Authorize(call: grpc_1.ServerUnaryCall<AuthorizeRequest, AuthenticateResponse>, callback: grpc_1.sendUnaryData<AuthenticateResponse>): void;
        abstract ScopeAuthorize(call: grpc_1.ServerUnaryCall<ScopeAuthorizeRequest, ScopedAuthenticationResponse>, callback: grpc_1.sendUnaryData<ScopedAuthenticationResponse>): void;
        abstract VerifyToken(call: grpc_1.ServerUnaryCall<VerifyTokenRequest, VerifyTokenResponse>, callback: grpc_1.sendUnaryData<VerifyTokenResponse>): void;
        abstract ForgotPassword(call: grpc_1.ServerUnaryCall<ForgotPasswordRequest, ForgotPasswordResponse>, callback: grpc_1.sendUnaryData<ForgotPasswordResponse>): void;
        abstract CreatePassword(call: grpc_1.ServerUnaryCall<CreatePasswordRequest, CreatePasswordResponse>, callback: grpc_1.sendUnaryData<CreatePasswordResponse>): void;
        abstract GetUser(call: grpc_1.ServerUnaryCall<GetUserRequest, GetUserResponse>, callback: grpc_1.sendUnaryData<GetUserResponse>): void;
        abstract UpdateUser(call: grpc_1.ServerUnaryCall<UpdateUserRequest, UpdateUserResponse>, callback: grpc_1.sendUnaryData<UpdateUserResponse>): void;
        abstract GetAllUser(call: grpc_1.ServerUnaryCall<GetAllUserRequest, GetAllUserResponse>, callback: grpc_1.sendUnaryData<GetAllUserResponse>): void;
        abstract Linkedin(call: grpc_1.ServerUnaryCall<SocialAuthenticationRequest, AuthenticateResponse>, callback: grpc_1.sendUnaryData<AuthenticateResponse>): void;
        abstract Google(call: grpc_1.ServerUnaryCall<SocialAuthenticationRequest, AuthenticateResponse>, callback: grpc_1.sendUnaryData<AuthenticateResponse>): void;
        abstract Github(call: grpc_1.ServerUnaryCall<SocialAuthenticationRequest, AuthenticateResponse>, callback: grpc_1.sendUnaryData<AuthenticateResponse>): void;
    }
    export class AuthenticationServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthenticationServiceService.definition, "AuthenticationService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Authenticate: GrpcUnaryServiceInterface<AuthenticateRequest, AuthenticateResponse> = (message: AuthenticateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, callback?: grpc_1.requestCallback<AuthenticateResponse>): grpc_1.ClientUnaryCall => {
            return super.Authenticate(message, metadata, options, callback);
        };
        RegisterUser: GrpcUnaryServiceInterface<RegisterUserRequest, AuthenticateResponse> = (message: RegisterUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, callback?: grpc_1.requestCallback<AuthenticateResponse>): grpc_1.ClientUnaryCall => {
            return super.RegisterUser(message, metadata, options, callback);
        };
        Authorize: GrpcUnaryServiceInterface<AuthorizeRequest, AuthenticateResponse> = (message: AuthorizeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, callback?: grpc_1.requestCallback<AuthenticateResponse>): grpc_1.ClientUnaryCall => {
            return super.Authorize(message, metadata, options, callback);
        };
        ScopeAuthorize: GrpcUnaryServiceInterface<ScopeAuthorizeRequest, ScopedAuthenticationResponse> = (message: ScopeAuthorizeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ScopedAuthenticationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ScopedAuthenticationResponse>, callback?: grpc_1.requestCallback<ScopedAuthenticationResponse>): grpc_1.ClientUnaryCall => {
            return super.ScopeAuthorize(message, metadata, options, callback);
        };
        VerifyToken: GrpcUnaryServiceInterface<VerifyTokenRequest, VerifyTokenResponse> = (message: VerifyTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyTokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyTokenResponse>, callback?: grpc_1.requestCallback<VerifyTokenResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyToken(message, metadata, options, callback);
        };
        ForgotPassword: GrpcUnaryServiceInterface<ForgotPasswordRequest, ForgotPasswordResponse> = (message: ForgotPasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ForgotPasswordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ForgotPasswordResponse>, callback?: grpc_1.requestCallback<ForgotPasswordResponse>): grpc_1.ClientUnaryCall => {
            return super.ForgotPassword(message, metadata, options, callback);
        };
        CreatePassword: GrpcUnaryServiceInterface<CreatePasswordRequest, CreatePasswordResponse> = (message: CreatePasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreatePasswordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreatePasswordResponse>, callback?: grpc_1.requestCallback<CreatePasswordResponse>): grpc_1.ClientUnaryCall => {
            return super.CreatePassword(message, metadata, options, callback);
        };
        GetUser: GrpcUnaryServiceInterface<GetUserRequest, GetUserResponse> = (message: GetUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUserResponse>, callback?: grpc_1.requestCallback<GetUserResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUser(message, metadata, options, callback);
        };
        UpdateUser: GrpcUnaryServiceInterface<UpdateUserRequest, UpdateUserResponse> = (message: UpdateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserResponse>, callback?: grpc_1.requestCallback<UpdateUserResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateUser(message, metadata, options, callback);
        };
        GetAllUser: GrpcUnaryServiceInterface<GetAllUserRequest, GetAllUserResponse> = (message: GetAllUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllUserResponse>, callback?: grpc_1.requestCallback<GetAllUserResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllUser(message, metadata, options, callback);
        };
        Linkedin: GrpcUnaryServiceInterface<SocialAuthenticationRequest, AuthenticateResponse> = (message: SocialAuthenticationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, callback?: grpc_1.requestCallback<AuthenticateResponse>): grpc_1.ClientUnaryCall => {
            return super.Linkedin(message, metadata, options, callback);
        };
        Google: GrpcUnaryServiceInterface<SocialAuthenticationRequest, AuthenticateResponse> = (message: SocialAuthenticationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, callback?: grpc_1.requestCallback<AuthenticateResponse>): grpc_1.ClientUnaryCall => {
            return super.Google(message, metadata, options, callback);
        };
        Github: GrpcUnaryServiceInterface<SocialAuthenticationRequest, AuthenticateResponse> = (message: SocialAuthenticationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, callback?: grpc_1.requestCallback<AuthenticateResponse>): grpc_1.ClientUnaryCall => {
            return super.Github(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedOrganizationServiceService {
        static definition = {
            CreateOrganization: {
                path: "/web_api.OrganizationService/CreateOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateOrganizationResponse.deserialize(new Uint8Array(bytes))
            },
            GetOrganization: {
                path: "/web_api.OrganizationService/GetOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetOrganizationResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateOrganization: {
                path: "/web_api.OrganizationService/UpdateOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateOrganizationResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateBillingInformation: {
                path: "/web_api.OrganizationService/UpdateBillingInformation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateBillingInformationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateBillingInformationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.BaseResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.BaseResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateOrganization(call: grpc_1.ServerUnaryCall<CreateOrganizationRequest, CreateOrganizationResponse>, callback: grpc_1.sendUnaryData<CreateOrganizationResponse>): void;
        abstract GetOrganization(call: grpc_1.ServerUnaryCall<GetOrganizationRequest, GetOrganizationResponse>, callback: grpc_1.sendUnaryData<GetOrganizationResponse>): void;
        abstract UpdateOrganization(call: grpc_1.ServerUnaryCall<UpdateOrganizationRequest, UpdateOrganizationResponse>, callback: grpc_1.sendUnaryData<UpdateOrganizationResponse>): void;
        abstract UpdateBillingInformation(call: grpc_1.ServerUnaryCall<UpdateBillingInformationRequest, dependency_2.BaseResponse>, callback: grpc_1.sendUnaryData<dependency_2.BaseResponse>): void;
    }
    export class OrganizationServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedOrganizationServiceService.definition, "OrganizationService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateOrganization: GrpcUnaryServiceInterface<CreateOrganizationRequest, CreateOrganizationResponse> = (message: CreateOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateOrganizationResponse>, callback?: grpc_1.requestCallback<CreateOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateOrganization(message, metadata, options, callback);
        };
        GetOrganization: GrpcUnaryServiceInterface<GetOrganizationRequest, GetOrganizationResponse> = (message: GetOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetOrganizationResponse>, callback?: grpc_1.requestCallback<GetOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.GetOrganization(message, metadata, options, callback);
        };
        UpdateOrganization: GrpcUnaryServiceInterface<UpdateOrganizationRequest, UpdateOrganizationResponse> = (message: UpdateOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateOrganizationResponse>, callback?: grpc_1.requestCallback<UpdateOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateOrganization(message, metadata, options, callback);
        };
        UpdateBillingInformation: GrpcUnaryServiceInterface<UpdateBillingInformationRequest, dependency_2.BaseResponse> = (message: UpdateBillingInformationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.BaseResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.BaseResponse>, callback?: grpc_1.requestCallback<dependency_2.BaseResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateBillingInformation(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedProjectServiceService {
        static definition = {
            CreateProject: {
                path: "/web_api.ProjectService/CreateProject",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateProjectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateProjectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateProjectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateProjectResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateProject: {
                path: "/web_api.ProjectService/UpdateProject",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateProjectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateProjectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateProjectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateProjectResponse.deserialize(new Uint8Array(bytes))
            },
            GetProject: {
                path: "/web_api.ProjectService/GetProject",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetProjectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetProjectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetProjectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetProjectResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllProject: {
                path: "/web_api.ProjectService/GetAllProject",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllProjectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllProjectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllProjectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllProjectResponse.deserialize(new Uint8Array(bytes))
            },
            AddUsersToProject: {
                path: "/web_api.ProjectService/AddUsersToProject",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddUsersToProjectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddUsersToProjectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddUsersToProjectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddUsersToProjectResponse.deserialize(new Uint8Array(bytes))
            },
            ArchiveProject: {
                path: "/web_api.ProjectService/ArchiveProject",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ArchiveProjectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ArchiveProjectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ArchiveProjectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ArchiveProjectResponse.deserialize(new Uint8Array(bytes))
            },
            CreateProjectCredential: {
                path: "/web_api.ProjectService/CreateProjectCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateProjectCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateProjectCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateProjectCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateProjectCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllProjectCredential: {
                path: "/web_api.ProjectService/GetAllProjectCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllProjectCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllProjectCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllProjectCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllProjectCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateProject(call: grpc_1.ServerUnaryCall<CreateProjectRequest, CreateProjectResponse>, callback: grpc_1.sendUnaryData<CreateProjectResponse>): void;
        abstract UpdateProject(call: grpc_1.ServerUnaryCall<UpdateProjectRequest, UpdateProjectResponse>, callback: grpc_1.sendUnaryData<UpdateProjectResponse>): void;
        abstract GetProject(call: grpc_1.ServerUnaryCall<GetProjectRequest, GetProjectResponse>, callback: grpc_1.sendUnaryData<GetProjectResponse>): void;
        abstract GetAllProject(call: grpc_1.ServerUnaryCall<GetAllProjectRequest, GetAllProjectResponse>, callback: grpc_1.sendUnaryData<GetAllProjectResponse>): void;
        abstract AddUsersToProject(call: grpc_1.ServerUnaryCall<AddUsersToProjectRequest, AddUsersToProjectResponse>, callback: grpc_1.sendUnaryData<AddUsersToProjectResponse>): void;
        abstract ArchiveProject(call: grpc_1.ServerUnaryCall<ArchiveProjectRequest, ArchiveProjectResponse>, callback: grpc_1.sendUnaryData<ArchiveProjectResponse>): void;
        abstract CreateProjectCredential(call: grpc_1.ServerUnaryCall<CreateProjectCredentialRequest, CreateProjectCredentialResponse>, callback: grpc_1.sendUnaryData<CreateProjectCredentialResponse>): void;
        abstract GetAllProjectCredential(call: grpc_1.ServerUnaryCall<GetAllProjectCredentialRequest, GetAllProjectCredentialResponse>, callback: grpc_1.sendUnaryData<GetAllProjectCredentialResponse>): void;
    }
    export class ProjectServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedProjectServiceService.definition, "ProjectService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateProject: GrpcUnaryServiceInterface<CreateProjectRequest, CreateProjectResponse> = (message: CreateProjectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateProjectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateProjectResponse>, callback?: grpc_1.requestCallback<CreateProjectResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateProject(message, metadata, options, callback);
        };
        UpdateProject: GrpcUnaryServiceInterface<UpdateProjectRequest, UpdateProjectResponse> = (message: UpdateProjectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateProjectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateProjectResponse>, callback?: grpc_1.requestCallback<UpdateProjectResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateProject(message, metadata, options, callback);
        };
        GetProject: GrpcUnaryServiceInterface<GetProjectRequest, GetProjectResponse> = (message: GetProjectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetProjectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetProjectResponse>, callback?: grpc_1.requestCallback<GetProjectResponse>): grpc_1.ClientUnaryCall => {
            return super.GetProject(message, metadata, options, callback);
        };
        GetAllProject: GrpcUnaryServiceInterface<GetAllProjectRequest, GetAllProjectResponse> = (message: GetAllProjectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllProjectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllProjectResponse>, callback?: grpc_1.requestCallback<GetAllProjectResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllProject(message, metadata, options, callback);
        };
        AddUsersToProject: GrpcUnaryServiceInterface<AddUsersToProjectRequest, AddUsersToProjectResponse> = (message: AddUsersToProjectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddUsersToProjectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddUsersToProjectResponse>, callback?: grpc_1.requestCallback<AddUsersToProjectResponse>): grpc_1.ClientUnaryCall => {
            return super.AddUsersToProject(message, metadata, options, callback);
        };
        ArchiveProject: GrpcUnaryServiceInterface<ArchiveProjectRequest, ArchiveProjectResponse> = (message: ArchiveProjectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ArchiveProjectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ArchiveProjectResponse>, callback?: grpc_1.requestCallback<ArchiveProjectResponse>): grpc_1.ClientUnaryCall => {
            return super.ArchiveProject(message, metadata, options, callback);
        };
        CreateProjectCredential: GrpcUnaryServiceInterface<CreateProjectCredentialRequest, CreateProjectCredentialResponse> = (message: CreateProjectCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateProjectCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateProjectCredentialResponse>, callback?: grpc_1.requestCallback<CreateProjectCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateProjectCredential(message, metadata, options, callback);
        };
        GetAllProjectCredential: GrpcUnaryServiceInterface<GetAllProjectCredentialRequest, GetAllProjectCredentialResponse> = (message: GetAllProjectCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllProjectCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllProjectCredentialResponse>, callback?: grpc_1.requestCallback<GetAllProjectCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllProjectCredential(message, metadata, options, callback);
        };
    }
}
