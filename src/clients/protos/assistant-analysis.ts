/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: assistant-analysis.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./common";
import * as pb_1 from "google-protobuf";
export namespace assistant_api {
    export class AssistantAnalysis extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            endpointId?: string;
            endpointVersion?: string;
            endpointParameters?: Map<string, string>;
            assistantId?: string;
            status?: string;
            createdBy?: string;
            createdUser?: dependency_2.User;
            updatedBy?: string;
            updatedUser?: dependency_2.User;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
            executionPriority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("endpointVersion" in data && data.endpointVersion != undefined) {
                    this.endpointVersion = data.endpointVersion;
                }
                if ("endpointParameters" in data && data.endpointParameters != undefined) {
                    this.endpointParameters = data.endpointParameters;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdBy" in data && data.createdBy != undefined) {
                    this.createdBy = data.createdBy;
                }
                if ("createdUser" in data && data.createdUser != undefined) {
                    this.createdUser = data.createdUser;
                }
                if ("updatedBy" in data && data.updatedBy != undefined) {
                    this.updatedBy = data.updatedBy;
                }
                if ("updatedUser" in data && data.updatedUser != undefined) {
                    this.updatedUser = data.updatedUser;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("executionPriority" in data && data.executionPriority != undefined) {
                    this.executionPriority = data.executionPriority;
                }
            }
            if (!this.endpointParameters)
                this.endpointParameters = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get endpointVersion() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set endpointVersion(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get endpointParameters() {
            return pb_1.Message.getField(this, 7) as any as Map<string, string>;
        }
        set endpointParameters(value: Map<string, string>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get createdBy() {
            return pb_1.Message.getFieldWithDefault(this, 13, "0") as string;
        }
        set createdBy(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get createdUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 14) as dependency_2.User;
        }
        set createdUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_createdUser() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get updatedBy() {
            return pb_1.Message.getFieldWithDefault(this, 15, "0") as string;
        }
        set updatedBy(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get updatedUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 16) as dependency_2.User;
        }
        set updatedUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_updatedUser() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 17) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 18) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get executionPriority() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set executionPriority(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            endpointId?: string;
            endpointVersion?: string;
            endpointParameters?: {
                [key: string]: string;
            };
            assistantId?: string;
            status?: string;
            createdBy?: string;
            createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            updatedBy?: string;
            updatedUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            executionPriority?: number;
        }): AssistantAnalysis {
            const message = new AssistantAnalysis({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.endpointVersion != null) {
                message.endpointVersion = data.endpointVersion;
            }
            if (typeof data.endpointParameters == "object") {
                message.endpointParameters = new Map(Object.entries(data.endpointParameters));
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdBy != null) {
                message.createdBy = data.createdBy;
            }
            if (data.createdUser != null) {
                message.createdUser = dependency_2.User.fromObject(data.createdUser);
            }
            if (data.updatedBy != null) {
                message.updatedBy = data.updatedBy;
            }
            if (data.updatedUser != null) {
                message.updatedUser = dependency_2.User.fromObject(data.updatedUser);
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.executionPriority != null) {
                message.executionPriority = data.executionPriority;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                endpointId?: string;
                endpointVersion?: string;
                endpointParameters?: {
                    [key: string]: string;
                };
                assistantId?: string;
                status?: string;
                createdBy?: string;
                createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
                updatedBy?: string;
                updatedUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                executionPriority?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.endpointVersion != null) {
                data.endpointVersion = this.endpointVersion;
            }
            if (this.endpointParameters != null) {
                data.endpointParameters = (Object.fromEntries)(this.endpointParameters);
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdBy != null) {
                data.createdBy = this.createdBy;
            }
            if (this.createdUser != null) {
                data.createdUser = this.createdUser.toObject();
            }
            if (this.updatedBy != null) {
                data.updatedBy = this.updatedBy;
            }
            if (this.updatedUser != null) {
                data.updatedUser = this.updatedUser.toObject();
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.executionPriority != null) {
                data.executionPriority = this.executionPriority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.endpointId != "0")
                writer.writeUint64String(4, this.endpointId);
            if (this.endpointVersion.length)
                writer.writeString(5, this.endpointVersion);
            for (const [key, value] of this.endpointParameters) {
                writer.writeMessage(7, this.endpointParameters, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.assistantId != "0")
                writer.writeUint64String(10, this.assistantId);
            if (this.status.length)
                writer.writeString(12, this.status);
            if (this.createdBy != "0")
                writer.writeUint64String(13, this.createdBy);
            if (this.has_createdUser)
                writer.writeMessage(14, this.createdUser, () => this.createdUser.serialize(writer));
            if (this.updatedBy != "0")
                writer.writeUint64String(15, this.updatedBy);
            if (this.has_updatedUser)
                writer.writeMessage(16, this.updatedUser, () => this.updatedUser.serialize(writer));
            if (this.has_createdDate)
                writer.writeMessage(17, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(18, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.executionPriority != 0)
                writer.writeUint32(20, this.executionPriority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantAnalysis {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantAnalysis();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 5:
                        message.endpointVersion = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.endpointParameters as any, reader, reader.readString, reader.readString));
                        break;
                    case 10:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 12:
                        message.status = reader.readString();
                        break;
                    case 13:
                        message.createdBy = reader.readUint64String();
                        break;
                    case 14:
                        reader.readMessage(message.createdUser, () => message.createdUser = dependency_2.User.deserialize(reader));
                        break;
                    case 15:
                        message.updatedBy = reader.readUint64String();
                        break;
                    case 16:
                        reader.readMessage(message.updatedUser, () => message.updatedUser = dependency_2.User.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 20:
                        message.executionPriority = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantAnalysis {
            return AssistantAnalysis.deserialize(bytes);
        }
    }
    export class CreateAssistantAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            endpointId?: string;
            endpointVersion?: string;
            endpointParameters?: Map<string, string>;
            assistantId?: string;
            executionPriority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("endpointVersion" in data && data.endpointVersion != undefined) {
                    this.endpointVersion = data.endpointVersion;
                }
                if ("endpointParameters" in data && data.endpointParameters != undefined) {
                    this.endpointParameters = data.endpointParameters;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("executionPriority" in data && data.executionPriority != undefined) {
                    this.executionPriority = data.executionPriority;
                }
            }
            if (!this.endpointParameters)
                this.endpointParameters = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get endpointVersion() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set endpointVersion(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get endpointParameters() {
            return pb_1.Message.getField(this, 7) as any as Map<string, string>;
        }
        set endpointParameters(value: Map<string, string>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get executionPriority() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set executionPriority(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            endpointId?: string;
            endpointVersion?: string;
            endpointParameters?: {
                [key: string]: string;
            };
            assistantId?: string;
            executionPriority?: number;
        }): CreateAssistantAnalysisRequest {
            const message = new CreateAssistantAnalysisRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.endpointVersion != null) {
                message.endpointVersion = data.endpointVersion;
            }
            if (typeof data.endpointParameters == "object") {
                message.endpointParameters = new Map(Object.entries(data.endpointParameters));
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.executionPriority != null) {
                message.executionPriority = data.executionPriority;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                endpointId?: string;
                endpointVersion?: string;
                endpointParameters?: {
                    [key: string]: string;
                };
                assistantId?: string;
                executionPriority?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.endpointVersion != null) {
                data.endpointVersion = this.endpointVersion;
            }
            if (this.endpointParameters != null) {
                data.endpointParameters = (Object.fromEntries)(this.endpointParameters);
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.executionPriority != null) {
                data.executionPriority = this.executionPriority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.endpointId != "0")
                writer.writeUint64String(4, this.endpointId);
            if (this.endpointVersion.length)
                writer.writeString(5, this.endpointVersion);
            for (const [key, value] of this.endpointParameters) {
                writer.writeMessage(7, this.endpointParameters, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.assistantId != "0")
                writer.writeUint64String(10, this.assistantId);
            if (this.executionPriority != 0)
                writer.writeUint32(20, this.executionPriority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAssistantAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAssistantAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 5:
                        message.endpointVersion = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.endpointParameters as any, reader, reader.readString, reader.readString));
                        break;
                    case 10:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 20:
                        message.executionPriority = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAssistantAnalysisRequest {
            return CreateAssistantAnalysisRequest.deserialize(bytes);
        }
    }
    export class UpdateAssistantAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            endpointId?: string;
            endpointVersion?: string;
            endpointParameters?: Map<string, string>;
            assistantId?: string;
            executionPriority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("endpointVersion" in data && data.endpointVersion != undefined) {
                    this.endpointVersion = data.endpointVersion;
                }
                if ("endpointParameters" in data && data.endpointParameters != undefined) {
                    this.endpointParameters = data.endpointParameters;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("executionPriority" in data && data.executionPriority != undefined) {
                    this.executionPriority = data.executionPriority;
                }
            }
            if (!this.endpointParameters)
                this.endpointParameters = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get endpointVersion() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set endpointVersion(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get endpointParameters() {
            return pb_1.Message.getField(this, 7) as any as Map<string, string>;
        }
        set endpointParameters(value: Map<string, string>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get executionPriority() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set executionPriority(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            endpointId?: string;
            endpointVersion?: string;
            endpointParameters?: {
                [key: string]: string;
            };
            assistantId?: string;
            executionPriority?: number;
        }): UpdateAssistantAnalysisRequest {
            const message = new UpdateAssistantAnalysisRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.endpointVersion != null) {
                message.endpointVersion = data.endpointVersion;
            }
            if (typeof data.endpointParameters == "object") {
                message.endpointParameters = new Map(Object.entries(data.endpointParameters));
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.executionPriority != null) {
                message.executionPriority = data.executionPriority;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                endpointId?: string;
                endpointVersion?: string;
                endpointParameters?: {
                    [key: string]: string;
                };
                assistantId?: string;
                executionPriority?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.endpointVersion != null) {
                data.endpointVersion = this.endpointVersion;
            }
            if (this.endpointParameters != null) {
                data.endpointParameters = (Object.fromEntries)(this.endpointParameters);
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.executionPriority != null) {
                data.executionPriority = this.executionPriority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.endpointId != "0")
                writer.writeUint64String(4, this.endpointId);
            if (this.endpointVersion.length)
                writer.writeString(5, this.endpointVersion);
            for (const [key, value] of this.endpointParameters) {
                writer.writeMessage(7, this.endpointParameters, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.assistantId != "0")
                writer.writeUint64String(10, this.assistantId);
            if (this.executionPriority != 0)
                writer.writeUint32(20, this.executionPriority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAssistantAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAssistantAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 5:
                        message.endpointVersion = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.endpointParameters as any, reader, reader.readString, reader.readString));
                        break;
                    case 10:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 20:
                        message.executionPriority = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAssistantAnalysisRequest {
            return UpdateAssistantAnalysisRequest.deserialize(bytes);
        }
    }
    export class GetAssistantAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            assistantId?: string;
        }): GetAssistantAnalysisRequest {
            const message = new GetAssistantAnalysisRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantAnalysisRequest {
            return GetAssistantAnalysisRequest.deserialize(bytes);
        }
    }
    export class DeleteAssistantAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            assistantId?: string;
        }): DeleteAssistantAnalysisRequest {
            const message = new DeleteAssistantAnalysisRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAssistantAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAssistantAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAssistantAnalysisRequest {
            return DeleteAssistantAnalysisRequest.deserialize(bytes);
        }
    }
    export class GetAssistantAnalysisResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantAnalysis;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, AssistantAnalysis, 3) as AssistantAnalysis;
        }
        set data(value: AssistantAnalysis) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantAnalysis.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetAssistantAnalysisResponse {
            const message = new GetAssistantAnalysisResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = AssistantAnalysis.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantAnalysis.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantAnalysisResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantAnalysisResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = AssistantAnalysis.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantAnalysisResponse {
            return GetAssistantAnalysisResponse.deserialize(bytes);
        }
    }
    export class GetAllAssistantAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistantId?: string;
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 2) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 3) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            assistantId?: string;
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
        }): GetAllAssistantAnalysisRequest {
            const message = new GetAllAssistantAnalysisRequest({});
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                assistantId?: string;
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            } = {};
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assistantId != "0")
                writer.writeUint64String(1, this.assistantId);
            if (this.has_paginate)
                writer.writeMessage(2, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(3, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantAnalysisRequest {
            return GetAllAssistantAnalysisRequest.deserialize(bytes);
        }
    }
    export class GetAllAssistantAnalysisResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantAnalysis[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, AssistantAnalysis, 3) as AssistantAnalysis[];
        }
        set data(value: AssistantAnalysis[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantAnalysis.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllAssistantAnalysisResponse {
            const message = new GetAllAssistantAnalysisResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => AssistantAnalysis.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantAnalysis.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: AssistantAnalysis) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: AssistantAnalysis) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantAnalysisResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantAnalysisResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AssistantAnalysis.deserialize(reader), AssistantAnalysis));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantAnalysisResponse {
            return GetAllAssistantAnalysisResponse.deserialize(bytes);
        }
    }
}
