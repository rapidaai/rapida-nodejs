/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: assistant-knowledge.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./common";
import * as pb_1 from "google-protobuf";
export namespace assistant_api {
    export class AssistantKnowledge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            knowledgeId?: string;
            rerankerEnable?: boolean;
            topK?: number;
            scoreThreshold?: number;
            knowledge?: dependency_2.Knowledge;
            retrievalMethod?: string;
            rerankerModelProviderId?: string;
            rerankerModelProviderName?: string;
            assistantKnowledgeRerankerOptions?: dependency_2.Metadata[];
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("rerankerEnable" in data && data.rerankerEnable != undefined) {
                    this.rerankerEnable = data.rerankerEnable;
                }
                if ("topK" in data && data.topK != undefined) {
                    this.topK = data.topK;
                }
                if ("scoreThreshold" in data && data.scoreThreshold != undefined) {
                    this.scoreThreshold = data.scoreThreshold;
                }
                if ("knowledge" in data && data.knowledge != undefined) {
                    this.knowledge = data.knowledge;
                }
                if ("retrievalMethod" in data && data.retrievalMethod != undefined) {
                    this.retrievalMethod = data.retrievalMethod;
                }
                if ("rerankerModelProviderId" in data && data.rerankerModelProviderId != undefined) {
                    this.rerankerModelProviderId = data.rerankerModelProviderId;
                }
                if ("rerankerModelProviderName" in data && data.rerankerModelProviderName != undefined) {
                    this.rerankerModelProviderName = data.rerankerModelProviderName;
                }
                if ("assistantKnowledgeRerankerOptions" in data && data.assistantKnowledgeRerankerOptions != undefined) {
                    this.assistantKnowledgeRerankerOptions = data.assistantKnowledgeRerankerOptions;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get rerankerEnable() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set rerankerEnable(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get topK() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set topK(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get scoreThreshold() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set scoreThreshold(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get knowledge() {
            return pb_1.Message.getWrapperField(this, dependency_2.Knowledge, 8) as dependency_2.Knowledge;
        }
        set knowledge(value: dependency_2.Knowledge) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_knowledge() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get retrievalMethod() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set retrievalMethod(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get rerankerModelProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set rerankerModelProviderId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get rerankerModelProviderName() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set rerankerModelProviderName(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get assistantKnowledgeRerankerOptions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 12) as dependency_2.Metadata[];
        }
        set assistantKnowledgeRerankerOptions(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 13) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 14) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            id?: string;
            knowledgeId?: string;
            rerankerEnable?: boolean;
            topK?: number;
            scoreThreshold?: number;
            knowledge?: ReturnType<typeof dependency_2.Knowledge.prototype.toObject>;
            retrievalMethod?: string;
            rerankerModelProviderId?: string;
            rerankerModelProviderName?: string;
            assistantKnowledgeRerankerOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            status?: string;
        }): AssistantKnowledge {
            const message = new AssistantKnowledge({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.rerankerEnable != null) {
                message.rerankerEnable = data.rerankerEnable;
            }
            if (data.topK != null) {
                message.topK = data.topK;
            }
            if (data.scoreThreshold != null) {
                message.scoreThreshold = data.scoreThreshold;
            }
            if (data.knowledge != null) {
                message.knowledge = dependency_2.Knowledge.fromObject(data.knowledge);
            }
            if (data.retrievalMethod != null) {
                message.retrievalMethod = data.retrievalMethod;
            }
            if (data.rerankerModelProviderId != null) {
                message.rerankerModelProviderId = data.rerankerModelProviderId;
            }
            if (data.rerankerModelProviderName != null) {
                message.rerankerModelProviderName = data.rerankerModelProviderName;
            }
            if (data.assistantKnowledgeRerankerOptions != null) {
                message.assistantKnowledgeRerankerOptions = data.assistantKnowledgeRerankerOptions.map(item => dependency_2.Metadata.fromObject(item));
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                knowledgeId?: string;
                rerankerEnable?: boolean;
                topK?: number;
                scoreThreshold?: number;
                knowledge?: ReturnType<typeof dependency_2.Knowledge.prototype.toObject>;
                retrievalMethod?: string;
                rerankerModelProviderId?: string;
                rerankerModelProviderName?: string;
                assistantKnowledgeRerankerOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                status?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.rerankerEnable != null) {
                data.rerankerEnable = this.rerankerEnable;
            }
            if (this.topK != null) {
                data.topK = this.topK;
            }
            if (this.scoreThreshold != null) {
                data.scoreThreshold = this.scoreThreshold;
            }
            if (this.knowledge != null) {
                data.knowledge = this.knowledge.toObject();
            }
            if (this.retrievalMethod != null) {
                data.retrievalMethod = this.retrievalMethod;
            }
            if (this.rerankerModelProviderId != null) {
                data.rerankerModelProviderId = this.rerankerModelProviderId;
            }
            if (this.rerankerModelProviderName != null) {
                data.rerankerModelProviderName = this.rerankerModelProviderName;
            }
            if (this.assistantKnowledgeRerankerOptions != null) {
                data.assistantKnowledgeRerankerOptions = this.assistantKnowledgeRerankerOptions.map((item: dependency_2.Metadata) => item.toObject());
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.knowledgeId != "0")
                writer.writeUint64String(2, this.knowledgeId);
            if (this.rerankerEnable != false)
                writer.writeBool(3, this.rerankerEnable);
            if (this.topK != 0)
                writer.writeUint32(6, this.topK);
            if (this.scoreThreshold != 0)
                writer.writeFloat(7, this.scoreThreshold);
            if (this.has_knowledge)
                writer.writeMessage(8, this.knowledge, () => this.knowledge.serialize(writer));
            if (this.retrievalMethod.length)
                writer.writeString(9, this.retrievalMethod);
            if (this.rerankerModelProviderId != "0")
                writer.writeUint64String(10, this.rerankerModelProviderId);
            if (this.rerankerModelProviderName.length)
                writer.writeString(11, this.rerankerModelProviderName);
            if (this.assistantKnowledgeRerankerOptions.length)
                writer.writeRepeatedMessage(12, this.assistantKnowledgeRerankerOptions, (item: dependency_2.Metadata) => item.serialize(writer));
            if (this.has_createdDate)
                writer.writeMessage(13, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(14, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.status.length)
                writer.writeString(15, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantKnowledge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantKnowledge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 3:
                        message.rerankerEnable = reader.readBool();
                        break;
                    case 6:
                        message.topK = reader.readUint32();
                        break;
                    case 7:
                        message.scoreThreshold = reader.readFloat();
                        break;
                    case 8:
                        reader.readMessage(message.knowledge, () => message.knowledge = dependency_2.Knowledge.deserialize(reader));
                        break;
                    case 9:
                        message.retrievalMethod = reader.readString();
                        break;
                    case 10:
                        message.rerankerModelProviderId = reader.readUint64String();
                        break;
                    case 11:
                        message.rerankerModelProviderName = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message.assistantKnowledgeRerankerOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 12, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    case 13:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 15:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantKnowledge {
            return AssistantKnowledge.deserialize(bytes);
        }
    }
    export class CreateAssistantKnowledgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            knowledgeId?: string;
            assistantId?: string;
            rerankerModelProviderId?: string;
            rerankerModelProviderName?: string;
            assistantKnowledgeRerankerOptions?: dependency_2.Metadata[];
            topK?: number;
            scoreThreshold?: number;
            retrievalMethod?: string;
            rerankerEnable?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("rerankerModelProviderId" in data && data.rerankerModelProviderId != undefined) {
                    this.rerankerModelProviderId = data.rerankerModelProviderId;
                }
                if ("rerankerModelProviderName" in data && data.rerankerModelProviderName != undefined) {
                    this.rerankerModelProviderName = data.rerankerModelProviderName;
                }
                if ("assistantKnowledgeRerankerOptions" in data && data.assistantKnowledgeRerankerOptions != undefined) {
                    this.assistantKnowledgeRerankerOptions = data.assistantKnowledgeRerankerOptions;
                }
                if ("topK" in data && data.topK != undefined) {
                    this.topK = data.topK;
                }
                if ("scoreThreshold" in data && data.scoreThreshold != undefined) {
                    this.scoreThreshold = data.scoreThreshold;
                }
                if ("retrievalMethod" in data && data.retrievalMethod != undefined) {
                    this.retrievalMethod = data.retrievalMethod;
                }
                if ("rerankerEnable" in data && data.rerankerEnable != undefined) {
                    this.rerankerEnable = data.rerankerEnable;
                }
            }
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get rerankerModelProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set rerankerModelProviderId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rerankerModelProviderName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set rerankerModelProviderName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get assistantKnowledgeRerankerOptions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 5) as dependency_2.Metadata[];
        }
        set assistantKnowledgeRerankerOptions(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get topK() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set topK(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get scoreThreshold() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set scoreThreshold(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get retrievalMethod() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set retrievalMethod(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get rerankerEnable() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set rerankerEnable(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            knowledgeId?: string;
            assistantId?: string;
            rerankerModelProviderId?: string;
            rerankerModelProviderName?: string;
            assistantKnowledgeRerankerOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            topK?: number;
            scoreThreshold?: number;
            retrievalMethod?: string;
            rerankerEnable?: boolean;
        }): CreateAssistantKnowledgeRequest {
            const message = new CreateAssistantKnowledgeRequest({});
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.rerankerModelProviderId != null) {
                message.rerankerModelProviderId = data.rerankerModelProviderId;
            }
            if (data.rerankerModelProviderName != null) {
                message.rerankerModelProviderName = data.rerankerModelProviderName;
            }
            if (data.assistantKnowledgeRerankerOptions != null) {
                message.assistantKnowledgeRerankerOptions = data.assistantKnowledgeRerankerOptions.map(item => dependency_2.Metadata.fromObject(item));
            }
            if (data.topK != null) {
                message.topK = data.topK;
            }
            if (data.scoreThreshold != null) {
                message.scoreThreshold = data.scoreThreshold;
            }
            if (data.retrievalMethod != null) {
                message.retrievalMethod = data.retrievalMethod;
            }
            if (data.rerankerEnable != null) {
                message.rerankerEnable = data.rerankerEnable;
            }
            return message;
        }
        toObject() {
            const data: {
                knowledgeId?: string;
                assistantId?: string;
                rerankerModelProviderId?: string;
                rerankerModelProviderName?: string;
                assistantKnowledgeRerankerOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
                topK?: number;
                scoreThreshold?: number;
                retrievalMethod?: string;
                rerankerEnable?: boolean;
            } = {};
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.rerankerModelProviderId != null) {
                data.rerankerModelProviderId = this.rerankerModelProviderId;
            }
            if (this.rerankerModelProviderName != null) {
                data.rerankerModelProviderName = this.rerankerModelProviderName;
            }
            if (this.assistantKnowledgeRerankerOptions != null) {
                data.assistantKnowledgeRerankerOptions = this.assistantKnowledgeRerankerOptions.map((item: dependency_2.Metadata) => item.toObject());
            }
            if (this.topK != null) {
                data.topK = this.topK;
            }
            if (this.scoreThreshold != null) {
                data.scoreThreshold = this.scoreThreshold;
            }
            if (this.retrievalMethod != null) {
                data.retrievalMethod = this.retrievalMethod;
            }
            if (this.rerankerEnable != null) {
                data.rerankerEnable = this.rerankerEnable;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.knowledgeId != "0")
                writer.writeUint64String(1, this.knowledgeId);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (this.rerankerModelProviderId != "0")
                writer.writeUint64String(3, this.rerankerModelProviderId);
            if (this.rerankerModelProviderName.length)
                writer.writeString(4, this.rerankerModelProviderName);
            if (this.assistantKnowledgeRerankerOptions.length)
                writer.writeRepeatedMessage(5, this.assistantKnowledgeRerankerOptions, (item: dependency_2.Metadata) => item.serialize(writer));
            if (this.topK != 0)
                writer.writeUint32(6, this.topK);
            if (this.scoreThreshold != 0)
                writer.writeFloat(7, this.scoreThreshold);
            if (this.retrievalMethod.length)
                writer.writeString(8, this.retrievalMethod);
            if (this.rerankerEnable != false)
                writer.writeBool(9, this.rerankerEnable);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAssistantKnowledgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAssistantKnowledgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 3:
                        message.rerankerModelProviderId = reader.readUint64String();
                        break;
                    case 4:
                        message.rerankerModelProviderName = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.assistantKnowledgeRerankerOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    case 6:
                        message.topK = reader.readUint32();
                        break;
                    case 7:
                        message.scoreThreshold = reader.readFloat();
                        break;
                    case 8:
                        message.retrievalMethod = reader.readString();
                        break;
                    case 9:
                        message.rerankerEnable = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAssistantKnowledgeRequest {
            return CreateAssistantKnowledgeRequest.deserialize(bytes);
        }
    }
    export class UpdateAssistantKnowledgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            knowledgeId?: string;
            assistantId?: string;
            rerankerModelProviderId?: string;
            rerankerModelProviderName?: string;
            assistantKnowledgeRerankerOptions?: dependency_2.Metadata[];
            scoreThreshold?: number;
            topK?: number;
            retrievalMethod?: string;
            rerankerEnable?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("rerankerModelProviderId" in data && data.rerankerModelProviderId != undefined) {
                    this.rerankerModelProviderId = data.rerankerModelProviderId;
                }
                if ("rerankerModelProviderName" in data && data.rerankerModelProviderName != undefined) {
                    this.rerankerModelProviderName = data.rerankerModelProviderName;
                }
                if ("assistantKnowledgeRerankerOptions" in data && data.assistantKnowledgeRerankerOptions != undefined) {
                    this.assistantKnowledgeRerankerOptions = data.assistantKnowledgeRerankerOptions;
                }
                if ("scoreThreshold" in data && data.scoreThreshold != undefined) {
                    this.scoreThreshold = data.scoreThreshold;
                }
                if ("topK" in data && data.topK != undefined) {
                    this.topK = data.topK;
                }
                if ("retrievalMethod" in data && data.retrievalMethod != undefined) {
                    this.retrievalMethod = data.retrievalMethod;
                }
                if ("rerankerEnable" in data && data.rerankerEnable != undefined) {
                    this.rerankerEnable = data.rerankerEnable;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rerankerModelProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set rerankerModelProviderId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get rerankerModelProviderName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set rerankerModelProviderName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get assistantKnowledgeRerankerOptions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 6) as dependency_2.Metadata[];
        }
        set assistantKnowledgeRerankerOptions(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get scoreThreshold() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set scoreThreshold(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get topK() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set topK(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get retrievalMethod() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set retrievalMethod(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get rerankerEnable() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set rerankerEnable(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            id?: string;
            knowledgeId?: string;
            assistantId?: string;
            rerankerModelProviderId?: string;
            rerankerModelProviderName?: string;
            assistantKnowledgeRerankerOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            scoreThreshold?: number;
            topK?: number;
            retrievalMethod?: string;
            rerankerEnable?: boolean;
        }): UpdateAssistantKnowledgeRequest {
            const message = new UpdateAssistantKnowledgeRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.rerankerModelProviderId != null) {
                message.rerankerModelProviderId = data.rerankerModelProviderId;
            }
            if (data.rerankerModelProviderName != null) {
                message.rerankerModelProviderName = data.rerankerModelProviderName;
            }
            if (data.assistantKnowledgeRerankerOptions != null) {
                message.assistantKnowledgeRerankerOptions = data.assistantKnowledgeRerankerOptions.map(item => dependency_2.Metadata.fromObject(item));
            }
            if (data.scoreThreshold != null) {
                message.scoreThreshold = data.scoreThreshold;
            }
            if (data.topK != null) {
                message.topK = data.topK;
            }
            if (data.retrievalMethod != null) {
                message.retrievalMethod = data.retrievalMethod;
            }
            if (data.rerankerEnable != null) {
                message.rerankerEnable = data.rerankerEnable;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                knowledgeId?: string;
                assistantId?: string;
                rerankerModelProviderId?: string;
                rerankerModelProviderName?: string;
                assistantKnowledgeRerankerOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
                scoreThreshold?: number;
                topK?: number;
                retrievalMethod?: string;
                rerankerEnable?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.rerankerModelProviderId != null) {
                data.rerankerModelProviderId = this.rerankerModelProviderId;
            }
            if (this.rerankerModelProviderName != null) {
                data.rerankerModelProviderName = this.rerankerModelProviderName;
            }
            if (this.assistantKnowledgeRerankerOptions != null) {
                data.assistantKnowledgeRerankerOptions = this.assistantKnowledgeRerankerOptions.map((item: dependency_2.Metadata) => item.toObject());
            }
            if (this.scoreThreshold != null) {
                data.scoreThreshold = this.scoreThreshold;
            }
            if (this.topK != null) {
                data.topK = this.topK;
            }
            if (this.retrievalMethod != null) {
                data.retrievalMethod = this.retrievalMethod;
            }
            if (this.rerankerEnable != null) {
                data.rerankerEnable = this.rerankerEnable;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.knowledgeId != "0")
                writer.writeUint64String(2, this.knowledgeId);
            if (this.assistantId != "0")
                writer.writeUint64String(3, this.assistantId);
            if (this.rerankerModelProviderId != "0")
                writer.writeUint64String(4, this.rerankerModelProviderId);
            if (this.rerankerModelProviderName.length)
                writer.writeString(5, this.rerankerModelProviderName);
            if (this.assistantKnowledgeRerankerOptions.length)
                writer.writeRepeatedMessage(6, this.assistantKnowledgeRerankerOptions, (item: dependency_2.Metadata) => item.serialize(writer));
            if (this.scoreThreshold != 0)
                writer.writeFloat(7, this.scoreThreshold);
            if (this.topK != 0)
                writer.writeUint32(8, this.topK);
            if (this.retrievalMethod.length)
                writer.writeString(9, this.retrievalMethod);
            if (this.rerankerEnable != false)
                writer.writeBool(10, this.rerankerEnable);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAssistantKnowledgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAssistantKnowledgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 3:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 4:
                        message.rerankerModelProviderId = reader.readUint64String();
                        break;
                    case 5:
                        message.rerankerModelProviderName = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.assistantKnowledgeRerankerOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    case 7:
                        message.scoreThreshold = reader.readFloat();
                        break;
                    case 8:
                        message.topK = reader.readUint32();
                        break;
                    case 9:
                        message.retrievalMethod = reader.readString();
                        break;
                    case 10:
                        message.rerankerEnable = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAssistantKnowledgeRequest {
            return UpdateAssistantKnowledgeRequest.deserialize(bytes);
        }
    }
    export class GetAssistantKnowledgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            assistantId?: string;
        }): GetAssistantKnowledgeRequest {
            const message = new GetAssistantKnowledgeRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantKnowledgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantKnowledgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantKnowledgeRequest {
            return GetAssistantKnowledgeRequest.deserialize(bytes);
        }
    }
    export class DeleteAssistantKnowledgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            assistantId?: string;
        }): DeleteAssistantKnowledgeRequest {
            const message = new DeleteAssistantKnowledgeRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAssistantKnowledgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAssistantKnowledgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAssistantKnowledgeRequest {
            return DeleteAssistantKnowledgeRequest.deserialize(bytes);
        }
    }
    export class GetAssistantKnowledgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantKnowledge;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, AssistantKnowledge, 3) as AssistantKnowledge;
        }
        set data(value: AssistantKnowledge) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantKnowledge.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetAssistantKnowledgeResponse {
            const message = new GetAssistantKnowledgeResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = AssistantKnowledge.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantKnowledge.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantKnowledgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantKnowledgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = AssistantKnowledge.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantKnowledgeResponse {
            return GetAssistantKnowledgeResponse.deserialize(bytes);
        }
    }
    export class GetAllAssistantKnowledgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistantId?: string;
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 2) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 3) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            assistantId?: string;
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
        }): GetAllAssistantKnowledgeRequest {
            const message = new GetAllAssistantKnowledgeRequest({});
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                assistantId?: string;
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            } = {};
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assistantId != "0")
                writer.writeUint64String(1, this.assistantId);
            if (this.has_paginate)
                writer.writeMessage(2, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(3, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantKnowledgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantKnowledgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantKnowledgeRequest {
            return GetAllAssistantKnowledgeRequest.deserialize(bytes);
        }
    }
    export class GetAllAssistantKnowledgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantKnowledge[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, AssistantKnowledge, 3) as AssistantKnowledge[];
        }
        set data(value: AssistantKnowledge[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantKnowledge.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllAssistantKnowledgeResponse {
            const message = new GetAllAssistantKnowledgeResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => AssistantKnowledge.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantKnowledge.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: AssistantKnowledge) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: AssistantKnowledge) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantKnowledgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantKnowledgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AssistantKnowledge.deserialize(reader), AssistantKnowledge));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantKnowledgeResponse {
            return GetAllAssistantKnowledgeResponse.deserialize(bytes);
        }
    }
}
