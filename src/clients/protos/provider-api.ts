/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: provider-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace provider_api {
    export class GetAllModelProviderRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_1.Paginate;
            criterias?: dependency_1.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_1.Paginate, 1) as dependency_1.Paginate;
        }
        set paginate(value: dependency_1.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Criteria, 2) as dependency_1.Criteria[];
        }
        set criterias(value: dependency_1.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_1.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_1.Criteria.prototype.toObject>[];
        }): GetAllModelProviderRequest {
            const message = new GetAllModelProviderRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_1.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_1.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_1.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_1.Criteria.prototype.toObject>[];
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_1.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_1.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllModelProviderRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllModelProviderRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_1.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.Criteria.deserialize(reader), dependency_1.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllModelProviderRequest {
            return GetAllModelProviderRequest.deserialize(bytes);
        }
    }
    export class GetAllModelProviderResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_1.Provider[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Provider, 3) as dependency_1.Provider[];
        }
        set data(value: dependency_1.Provider[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_1.Provider.prototype.toObject>[];
        }): GetAllModelProviderResponse {
            const message = new GetAllModelProviderResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => dependency_1.Provider.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_1.Provider.prototype.toObject>[];
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: dependency_1.Provider) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: dependency_1.Provider) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllModelProviderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllModelProviderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.Provider.deserialize(reader), dependency_1.Provider));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllModelProviderResponse {
            return GetAllModelProviderResponse.deserialize(bytes);
        }
    }
    export class ToolProvider extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            image?: string;
            feature?: string[];
            connectConfiguration?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("feature" in data && data.feature != undefined) {
                    this.feature = data.feature;
                }
                if ("connectConfiguration" in data && data.connectConfiguration != undefined) {
                    this.connectConfiguration = data.connectConfiguration;
                }
            }
            if (!this.connectConfiguration)
                this.connectConfiguration = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set image(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get feature() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set feature(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get connectConfiguration() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set connectConfiguration(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            image?: string;
            feature?: string[];
            connectConfiguration?: {
                [key: string]: string;
            };
        }): ToolProvider {
            const message = new ToolProvider({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            if (data.feature != null) {
                message.feature = data.feature;
            }
            if (typeof data.connectConfiguration == "object") {
                message.connectConfiguration = new Map(Object.entries(data.connectConfiguration));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                image?: string;
                feature?: string[];
                connectConfiguration?: {
                    [key: string]: string;
                };
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            if (this.feature != null) {
                data.feature = this.feature;
            }
            if (this.connectConfiguration != null) {
                data.connectConfiguration = (Object.fromEntries)(this.connectConfiguration);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.image.length)
                writer.writeString(4, this.image);
            if (this.feature.length)
                writer.writeRepeatedString(5, this.feature);
            for (const [key, value] of this.connectConfiguration) {
                writer.writeMessage(6, this.connectConfiguration, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolProvider {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolProvider();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.image = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.connectConfiguration as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToolProvider {
            return ToolProvider.deserialize(bytes);
        }
    }
    export class GetAllToolProviderRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_1.Paginate;
            criterias?: dependency_1.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_1.Paginate, 1) as dependency_1.Paginate;
        }
        set paginate(value: dependency_1.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Criteria, 2) as dependency_1.Criteria[];
        }
        set criterias(value: dependency_1.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_1.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_1.Criteria.prototype.toObject>[];
        }): GetAllToolProviderRequest {
            const message = new GetAllToolProviderRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_1.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_1.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_1.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_1.Criteria.prototype.toObject>[];
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_1.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_1.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllToolProviderRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllToolProviderRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_1.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.Criteria.deserialize(reader), dependency_1.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllToolProviderRequest {
            return GetAllToolProviderRequest.deserialize(bytes);
        }
    }
    export class GetAllToolProviderResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: ToolProvider[];
            error?: dependency_1.Error;
            paginated?: dependency_1.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, ToolProvider, 3) as ToolProvider[];
        }
        set data(value: ToolProvider[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_1.Error, 4) as dependency_1.Error;
        }
        set error(value: dependency_1.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_1.Paginated, 5) as dependency_1.Paginated;
        }
        set paginated(value: dependency_1.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof ToolProvider.prototype.toObject>[];
            error?: ReturnType<typeof dependency_1.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_1.Paginated.prototype.toObject>;
        }): GetAllToolProviderResponse {
            const message = new GetAllToolProviderResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => ToolProvider.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_1.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_1.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof ToolProvider.prototype.toObject>[];
                error?: ReturnType<typeof dependency_1.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_1.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: ToolProvider) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: ToolProvider) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllToolProviderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllToolProviderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ToolProvider.deserialize(reader), ToolProvider));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_1.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_1.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllToolProviderResponse {
            return GetAllToolProviderResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedProviderServiceService {
        static definition = {
            GetAllToolProvider: {
                path: "/provider_api.ProviderService/GetAllToolProvider",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllToolProviderRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllToolProviderRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllToolProviderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllToolProviderResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllModelProvider: {
                path: "/provider_api.ProviderService/GetAllModelProvider",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllModelProviderRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllModelProviderRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllModelProviderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllModelProviderResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetAllToolProvider(call: grpc_1.ServerUnaryCall<GetAllToolProviderRequest, GetAllToolProviderResponse>, callback: grpc_1.sendUnaryData<GetAllToolProviderResponse>): void;
        abstract GetAllModelProvider(call: grpc_1.ServerUnaryCall<GetAllModelProviderRequest, GetAllModelProviderResponse>, callback: grpc_1.sendUnaryData<GetAllModelProviderResponse>): void;
    }
    export class ProviderServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedProviderServiceService.definition, "ProviderService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetAllToolProvider: GrpcUnaryServiceInterface<GetAllToolProviderRequest, GetAllToolProviderResponse> = (message: GetAllToolProviderRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllToolProviderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllToolProviderResponse>, callback?: grpc_1.requestCallback<GetAllToolProviderResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllToolProvider(message, metadata, options, callback);
        };
        GetAllModelProvider: GrpcUnaryServiceInterface<GetAllModelProviderRequest, GetAllModelProviderResponse> = (message: GetAllModelProviderRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllModelProviderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllModelProviderResponse>, callback?: grpc_1.requestCallback<GetAllModelProviderResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllModelProvider(message, metadata, options, callback);
        };
    }
}
