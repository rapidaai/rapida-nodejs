/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: vault-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./google/protobuf/struct";
import * as dependency_3 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace vault_api {
    export class VaultCredential extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            value?: dependency_2.google.protobuf.Struct;
            status?: string;
            vaultLevel?: string;
            vaultLevelId?: string;
            vaultType?: string;
            vaultTypeId?: string;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
            lastUsedDate?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("vaultLevel" in data && data.vaultLevel != undefined) {
                    this.vaultLevel = data.vaultLevel;
                }
                if ("vaultLevelId" in data && data.vaultLevelId != undefined) {
                    this.vaultLevelId = data.vaultLevelId;
                }
                if ("vaultType" in data && data.vaultType != undefined) {
                    this.vaultType = data.vaultType;
                }
                if ("vaultTypeId" in data && data.vaultTypeId != undefined) {
                    this.vaultTypeId = data.vaultTypeId;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("lastUsedDate" in data && data.lastUsedDate != undefined) {
                    this.lastUsedDate = data.lastUsedDate;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get value() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 3) as dependency_2.google.protobuf.Struct;
        }
        set value(value: dependency_2.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get vaultLevel() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set vaultLevel(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get vaultLevelId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
        }
        set vaultLevelId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get vaultType() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set vaultType(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get vaultTypeId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
        }
        set vaultTypeId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 9) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get lastUsedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 10) as dependency_1.google.protobuf.Timestamp;
        }
        set lastUsedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_lastUsedDate() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            value?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
            status?: string;
            vaultLevel?: string;
            vaultLevelId?: string;
            vaultType?: string;
            vaultTypeId?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            lastUsedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): VaultCredential {
            const message = new VaultCredential({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.value != null) {
                message.value = dependency_2.google.protobuf.Struct.fromObject(data.value);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.vaultLevel != null) {
                message.vaultLevel = data.vaultLevel;
            }
            if (data.vaultLevelId != null) {
                message.vaultLevelId = data.vaultLevelId;
            }
            if (data.vaultType != null) {
                message.vaultType = data.vaultType;
            }
            if (data.vaultTypeId != null) {
                message.vaultTypeId = data.vaultTypeId;
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.lastUsedDate != null) {
                message.lastUsedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.lastUsedDate);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                value?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
                status?: string;
                vaultLevel?: string;
                vaultLevelId?: string;
                vaultType?: string;
                vaultTypeId?: string;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                lastUsedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.vaultLevel != null) {
                data.vaultLevel = this.vaultLevel;
            }
            if (this.vaultLevelId != null) {
                data.vaultLevelId = this.vaultLevelId;
            }
            if (this.vaultType != null) {
                data.vaultType = this.vaultType;
            }
            if (this.vaultTypeId != null) {
                data.vaultTypeId = this.vaultTypeId;
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.lastUsedDate != null) {
                data.lastUsedDate = this.lastUsedDate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_value)
                writer.writeMessage(3, this.value, () => this.value.serialize(writer));
            if (this.status.length)
                writer.writeString(4, this.status);
            if (this.vaultLevel.length)
                writer.writeString(5, this.vaultLevel);
            if (this.vaultLevelId != "0")
                writer.writeUint64String(6, this.vaultLevelId);
            if (this.vaultType.length)
                writer.writeString(7, this.vaultType);
            if (this.vaultTypeId != "0")
                writer.writeUint64String(8, this.vaultTypeId);
            if (this.has_createdDate)
                writer.writeMessage(9, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(11, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.has_lastUsedDate)
                writer.writeMessage(10, this.lastUsedDate, () => this.lastUsedDate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VaultCredential {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VaultCredential();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.value, () => message.value = dependency_2.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 4:
                        message.status = reader.readString();
                        break;
                    case 5:
                        message.vaultLevel = reader.readString();
                        break;
                    case 6:
                        message.vaultLevelId = reader.readUint64String();
                        break;
                    case 7:
                        message.vaultType = reader.readString();
                        break;
                    case 8:
                        message.vaultTypeId = reader.readUint64String();
                        break;
                    case 9:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.lastUsedDate, () => message.lastUsedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VaultCredential {
            return VaultCredential.deserialize(bytes);
        }
    }
    export class CreateProviderCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            providerId?: string;
            credential?: dependency_2.google.protobuf.Struct;
            name?: string;
            providerName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("providerId" in data && data.providerId != undefined) {
                    this.providerId = data.providerId;
                }
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("providerName" in data && data.providerName != undefined) {
                    this.providerName = data.providerName;
                }
            }
        }
        get providerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set providerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get credential() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 2) as dependency_2.google.protobuf.Struct;
        }
        set credential(value: dependency_2.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_credential() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get providerName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set providerName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            providerId?: string;
            credential?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
            name?: string;
            providerName?: string;
        }): CreateProviderCredentialRequest {
            const message = new CreateProviderCredentialRequest({});
            if (data.providerId != null) {
                message.providerId = data.providerId;
            }
            if (data.credential != null) {
                message.credential = dependency_2.google.protobuf.Struct.fromObject(data.credential);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.providerName != null) {
                message.providerName = data.providerName;
            }
            return message;
        }
        toObject() {
            const data: {
                providerId?: string;
                credential?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
                name?: string;
                providerName?: string;
            } = {};
            if (this.providerId != null) {
                data.providerId = this.providerId;
            }
            if (this.credential != null) {
                data.credential = this.credential.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.providerName != null) {
                data.providerName = this.providerName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.providerId != "0")
                writer.writeUint64String(1, this.providerId);
            if (this.has_credential)
                writer.writeMessage(2, this.credential, () => this.credential.serialize(writer));
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.providerName.length)
                writer.writeString(4, this.providerName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateProviderCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateProviderCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.providerId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.credential, () => message.credential = dependency_2.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.providerName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateProviderCredentialRequest {
            return CreateProviderCredentialRequest.deserialize(bytes);
        }
    }
    export class CreateToolCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            toolId?: string;
            credential?: dependency_2.google.protobuf.Struct;
            name?: string;
            toolName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("toolId" in data && data.toolId != undefined) {
                    this.toolId = data.toolId;
                }
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("toolName" in data && data.toolName != undefined) {
                    this.toolName = data.toolName;
                }
            }
        }
        get toolId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set toolId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get credential() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 2) as dependency_2.google.protobuf.Struct;
        }
        set credential(value: dependency_2.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_credential() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get toolName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set toolName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            toolId?: string;
            credential?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
            name?: string;
            toolName?: string;
        }): CreateToolCredentialRequest {
            const message = new CreateToolCredentialRequest({});
            if (data.toolId != null) {
                message.toolId = data.toolId;
            }
            if (data.credential != null) {
                message.credential = dependency_2.google.protobuf.Struct.fromObject(data.credential);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.toolName != null) {
                message.toolName = data.toolName;
            }
            return message;
        }
        toObject() {
            const data: {
                toolId?: string;
                credential?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
                name?: string;
                toolName?: string;
            } = {};
            if (this.toolId != null) {
                data.toolId = this.toolId;
            }
            if (this.credential != null) {
                data.credential = this.credential.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.toolName != null) {
                data.toolName = this.toolName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.toolId != "0")
                writer.writeUint64String(1, this.toolId);
            if (this.has_credential)
                writer.writeMessage(2, this.credential, () => this.credential.serialize(writer));
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.toolName.length)
                writer.writeString(4, this.toolName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateToolCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateToolCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.toolId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.credential, () => message.credential = dependency_2.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.toolName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateToolCredentialRequest {
            return CreateToolCredentialRequest.deserialize(bytes);
        }
    }
    export class DeleteCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vaultId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vaultId" in data && data.vaultId != undefined) {
                    this.vaultId = data.vaultId;
                }
            }
        }
        get vaultId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set vaultId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            vaultId?: string;
        }): DeleteCredentialRequest {
            const message = new DeleteCredentialRequest({});
            if (data.vaultId != null) {
                message.vaultId = data.vaultId;
            }
            return message;
        }
        toObject() {
            const data: {
                vaultId?: string;
            } = {};
            if (this.vaultId != null) {
                data.vaultId = this.vaultId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vaultId != "0")
                writer.writeUint64String(1, this.vaultId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vaultId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteCredentialRequest {
            return DeleteCredentialRequest.deserialize(bytes);
        }
    }
    export class GetAllOrganizationCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_3.Paginate;
            criterias?: dependency_3.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_3.Paginate, 1) as dependency_3.Paginate;
        }
        set paginate(value: dependency_3.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Criteria, 2) as dependency_3.Criteria[];
        }
        set criterias(value: dependency_3.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_3.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_3.Criteria.prototype.toObject>[];
        }): GetAllOrganizationCredentialRequest {
            const message = new GetAllOrganizationCredentialRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_3.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_3.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_3.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_3.Criteria.prototype.toObject>[];
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_3.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_3.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllOrganizationCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllOrganizationCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_3.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.Criteria.deserialize(reader), dependency_3.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllOrganizationCredentialRequest {
            return GetAllOrganizationCredentialRequest.deserialize(bytes);
        }
    }
    export class GetAllOrganizationCredentialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: VaultCredential[];
            error?: dependency_3.Error;
            paginated?: dependency_3.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, VaultCredential, 3) as VaultCredential[];
        }
        set data(value: VaultCredential[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_3.Paginated, 5) as dependency_3.Paginated;
        }
        set paginated(value: dependency_3.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof VaultCredential.prototype.toObject>[];
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_3.Paginated.prototype.toObject>;
        }): GetAllOrganizationCredentialResponse {
            const message = new GetAllOrganizationCredentialResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => VaultCredential.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_3.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof VaultCredential.prototype.toObject>[];
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_3.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: VaultCredential) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: VaultCredential) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllOrganizationCredentialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllOrganizationCredentialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, VaultCredential.deserialize(reader), VaultCredential));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_3.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllOrganizationCredentialResponse {
            return GetAllOrganizationCredentialResponse.deserialize(bytes);
        }
    }
    export class GetProviderCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            providerId?: string;
            organizationId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("providerId" in data && data.providerId != undefined) {
                    this.providerId = data.providerId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
            }
        }
        get providerId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set providerId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            providerId?: string;
            organizationId?: string;
        }): GetProviderCredentialRequest {
            const message = new GetProviderCredentialRequest({});
            if (data.providerId != null) {
                message.providerId = data.providerId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            return message;
        }
        toObject() {
            const data: {
                providerId?: string;
                organizationId?: string;
            } = {};
            if (this.providerId != null) {
                data.providerId = this.providerId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.providerId != "0")
                writer.writeUint64String(3, this.providerId);
            if (this.organizationId != "0")
                writer.writeUint64String(4, this.organizationId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetProviderCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetProviderCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.providerId = reader.readUint64String();
                        break;
                    case 4:
                        message.organizationId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetProviderCredentialRequest {
            return GetProviderCredentialRequest.deserialize(bytes);
        }
    }
    export class GetCredentialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: VaultCredential;
            error?: dependency_3.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, VaultCredential, 3) as VaultCredential;
        }
        set data(value: VaultCredential) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof VaultCredential.prototype.toObject>;
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
        }): GetCredentialResponse {
            const message = new GetCredentialResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = VaultCredential.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof VaultCredential.prototype.toObject>;
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCredentialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCredentialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = VaultCredential.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCredentialResponse {
            return GetCredentialResponse.deserialize(bytes);
        }
    }
    export class GetCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vaultId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vaultId" in data && data.vaultId != undefined) {
                    this.vaultId = data.vaultId;
                }
            }
        }
        get vaultId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set vaultId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            vaultId?: string;
        }): GetCredentialRequest {
            const message = new GetCredentialRequest({});
            if (data.vaultId != null) {
                message.vaultId = data.vaultId;
            }
            return message;
        }
        toObject() {
            const data: {
                vaultId?: string;
            } = {};
            if (this.vaultId != null) {
                data.vaultId = this.vaultId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vaultId != "0")
                writer.writeUint64String(1, this.vaultId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vaultId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCredentialRequest {
            return GetCredentialRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedVaultServiceService {
        static definition = {
            CreateProviderCredential: {
                path: "/vault_api.VaultService/CreateProviderCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateProviderCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateProviderCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            CreateToolCredential: {
                path: "/vault_api.VaultService/CreateToolCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateToolCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateToolCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllOrganizationCredential: {
                path: "/vault_api.VaultService/GetAllOrganizationCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllOrganizationCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllOrganizationCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllOrganizationCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllOrganizationCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteCredential: {
                path: "/vault_api.VaultService/DeleteCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            GetProviderCredential: {
                path: "/vault_api.VaultService/GetProviderCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetProviderCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetProviderCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            GetCredential: {
                path: "/vault_api.VaultService/GetCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            GetOauth2Credential: {
                path: "/vault_api.VaultService/GetOauth2Credential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateProviderCredential(call: grpc_1.ServerUnaryCall<CreateProviderCredentialRequest, GetCredentialResponse>, callback: grpc_1.sendUnaryData<GetCredentialResponse>): void;
        abstract CreateToolCredential(call: grpc_1.ServerUnaryCall<CreateToolCredentialRequest, GetCredentialResponse>, callback: grpc_1.sendUnaryData<GetCredentialResponse>): void;
        abstract GetAllOrganizationCredential(call: grpc_1.ServerUnaryCall<GetAllOrganizationCredentialRequest, GetAllOrganizationCredentialResponse>, callback: grpc_1.sendUnaryData<GetAllOrganizationCredentialResponse>): void;
        abstract DeleteCredential(call: grpc_1.ServerUnaryCall<DeleteCredentialRequest, GetCredentialResponse>, callback: grpc_1.sendUnaryData<GetCredentialResponse>): void;
        abstract GetProviderCredential(call: grpc_1.ServerUnaryCall<GetProviderCredentialRequest, GetCredentialResponse>, callback: grpc_1.sendUnaryData<GetCredentialResponse>): void;
        abstract GetCredential(call: grpc_1.ServerUnaryCall<GetCredentialRequest, GetCredentialResponse>, callback: grpc_1.sendUnaryData<GetCredentialResponse>): void;
        abstract GetOauth2Credential(call: grpc_1.ServerUnaryCall<GetCredentialRequest, GetCredentialResponse>, callback: grpc_1.sendUnaryData<GetCredentialResponse>): void;
    }
    export class VaultServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedVaultServiceService.definition, "VaultService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateProviderCredential: GrpcUnaryServiceInterface<CreateProviderCredentialRequest, GetCredentialResponse> = (message: CreateProviderCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, callback?: grpc_1.requestCallback<GetCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateProviderCredential(message, metadata, options, callback);
        };
        CreateToolCredential: GrpcUnaryServiceInterface<CreateToolCredentialRequest, GetCredentialResponse> = (message: CreateToolCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, callback?: grpc_1.requestCallback<GetCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateToolCredential(message, metadata, options, callback);
        };
        GetAllOrganizationCredential: GrpcUnaryServiceInterface<GetAllOrganizationCredentialRequest, GetAllOrganizationCredentialResponse> = (message: GetAllOrganizationCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllOrganizationCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllOrganizationCredentialResponse>, callback?: grpc_1.requestCallback<GetAllOrganizationCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllOrganizationCredential(message, metadata, options, callback);
        };
        DeleteCredential: GrpcUnaryServiceInterface<DeleteCredentialRequest, GetCredentialResponse> = (message: DeleteCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, callback?: grpc_1.requestCallback<GetCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteCredential(message, metadata, options, callback);
        };
        GetProviderCredential: GrpcUnaryServiceInterface<GetProviderCredentialRequest, GetCredentialResponse> = (message: GetProviderCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, callback?: grpc_1.requestCallback<GetCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.GetProviderCredential(message, metadata, options, callback);
        };
        GetCredential: GrpcUnaryServiceInterface<GetCredentialRequest, GetCredentialResponse> = (message: GetCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, callback?: grpc_1.requestCallback<GetCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCredential(message, metadata, options, callback);
        };
        GetOauth2Credential: GrpcUnaryServiceInterface<GetCredentialRequest, GetCredentialResponse> = (message: GetCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCredentialResponse>, callback?: grpc_1.requestCallback<GetCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.GetOauth2Credential(message, metadata, options, callback);
        };
    }
}
