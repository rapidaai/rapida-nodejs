// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.19.1
// source: assistant-api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  AssistantApiDeployment,
  AssistantDebuggerDeployment,
  AssistantPhoneDeployment,
  AssistantWebpluginDeployment,
  AssistantWhatsappDeployment,
} from "./assistant-deployment";
import {
  AgentPromptTemplate,
  AssistantConversation,
  AssistantConversationMessage,
  Criteria,
  Error,
  GetAllAssistantConversationRequest,
  GetAllAssistantConversationResponse,
  GetAllConversationMessageRequest,
  GetAllConversationMessageResponse,
  Knowledge,
  Ordering,
  Organization,
  Paginate,
  Paginated,
  ProviderModel,
  ProviderModelParameter,
  Source,
  sourceFromJSON,
  sourceToJSON,
  Tag,
  User,
} from "./common";
import { Struct } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "assistant_api";

export interface AssistantEmbeddedSkill {
  id: number;
  assistantId: number;
  assistantSkillId: number;
  name: string;
  projectId: number;
  organizationId: number;
  options?: { [key: string]: any } | undefined;
  assistantSkill?: AssistantSkill | undefined;
}

export interface Assistant {
  id: number;
  status: string;
  visibility: string;
  source: string;
  sourceIdentifier: number;
  assistantEmbeddedSkills: AssistantEmbeddedSkill[];
  projectId: number;
  organizationId: number;
  assistantProviderModelId: number;
  assistantProviderModel?: AssistantProviderModel | undefined;
  name: string;
  description: string;
  assistantTag?: Tag | undefined;
  language: string;
  organization?: Organization | undefined;
  assistantKnowledgeConfigurations: AssistantKnowledgeConfiguration[];
  createdBy: number;
  createdUser?: User | undefined;
  updatedBy: number;
  updatedUser?: User | undefined;
  createdDate?: Date | undefined;
  updatedDate?: Date | undefined;
  appAppearance?: { [key: string]: any } | undefined;
  webAppearance?: { [key: string]: any } | undefined;
  debuggerDeployment?: AssistantDebuggerDeployment | undefined;
  phoneDeployment?: AssistantPhoneDeployment | undefined;
  whatsappDeployment?: AssistantWhatsappDeployment | undefined;
  webPluginDeployment?: AssistantWebpluginDeployment | undefined;
  apiDeployment?: AssistantApiDeployment | undefined;
}

export interface AssistantProviderModel {
  id: number;
  template?: AgentPromptTemplate | undefined;
  description: string;
  providerId: number;
  modelModeType: string;
  providerModelId: number;
  providerModel?: ProviderModel | undefined;
  assistantProviderModelParameters: ProviderModelParameter[];
  status: string;
  createdBy: number;
  createdUser?: User | undefined;
  updatedBy: number;
  updatedUser?: User | undefined;
  createdDate?: Date | undefined;
  updatedDate?: Date | undefined;
}

export interface AssistantKnowledgeConfiguration {
  id: number;
  knowledgeId: number;
  rerankerEnable: boolean;
  rerankerProviderModelId: number;
  rerankerProviderModel?: ProviderModel | undefined;
  topK: number;
  scoreThreshold: number;
  knowledge?: Knowledge | undefined;
  retrievalMethod: string;
}

export interface AssistantProviderModelAttribute {
  description: string;
  template?:
    | AgentPromptTemplate
    | undefined;
  /** string instruction = 3; */
  providerId: number;
  providerModelId: number;
  providerModel?: ProviderModel | undefined;
  assistantProviderModelParameters: ProviderModelParameter[];
  modelModeType: string;
}

export interface AssistantAttribute {
  source: string;
  sourceIdentifier: number;
  name: string;
  description: string;
  visibility: string;
  language: string;
}

export interface AssistantKnowledgeConfigurationAttribute {
  knowledgeId: number;
  rerankerEnable: boolean;
  rerankerProviderModelId: number;
  topK: number;
  scoreThreshold: number;
  retrievalMethod: string;
  active: boolean;
}

export interface AssistantToolConfigurationAttribute {
  skillId: number;
  code: string;
  options?: { [key: string]: any } | undefined;
  active: boolean;
}

export interface CreateAssistantRequest {
  assistantProviderModelAttribute?: AssistantProviderModelAttribute | undefined;
  assistantAttribute?: AssistantAttribute | undefined;
  tags: string[];
  assistantKnowledgeConfigurationAttributes: AssistantKnowledgeConfigurationAttribute[];
  assistantToolConfigurationAttribute: AssistantToolConfigurationAttribute[];
}

export interface CreateAssistantProviderModelRequest {
  assistantId: number;
  assistantProviderModelAttribute?: AssistantProviderModelAttribute | undefined;
}

export interface CreateAssistantProviderModelResponse {
  code: number;
  success: boolean;
  data?: AssistantProviderModel | undefined;
  error?: Error | undefined;
}

export interface CreateAssistantResponse {
  code: number;
  success: boolean;
  data?: Assistant | undefined;
  error?: Error | undefined;
}

export interface CreateAssistantKnowledgeConfigurationRequest {
  assistantId: number;
  assistantKnowledgeConfigurationAttributes: AssistantKnowledgeConfigurationAttribute[];
}

export interface CreateAssistantToolConfigurationRequest {
  assistantId: number;
  assistantToolConfigurationAttribute: AssistantToolConfigurationAttribute[];
}

export interface CreateAssistantTagRequest {
  assistantId: number;
  tags: string[];
}

/** get request */
export interface GetAssistantRequest {
  id: number;
  assistantProviderModelId?: number | undefined;
}

export interface GetAssistantResponse {
  code: number;
  success: boolean;
  data?: Assistant | undefined;
  error?: Error | undefined;
}

export interface GetAllAssistantRequest {
  paginate?: Paginate | undefined;
  criterias: Criteria[];
}

export interface GetAllAssistantResponse {
  code: number;
  success: boolean;
  data: Assistant[];
  error?: Error | undefined;
  paginated?: Paginated | undefined;
}

export interface GetAllAssistantProviderModelRequest {
  paginate?: Paginate | undefined;
  criterias: Criteria[];
  assistantId: number;
}

export interface GetAllAssistantProviderModelResponse {
  code: number;
  success: boolean;
  data: AssistantProviderModel[];
  error?: Error | undefined;
  paginated?: Paginated | undefined;
}

export interface GetAllAssistantMessageRequest {
  paginate?: Paginate | undefined;
  criterias: Criteria[];
  assistantId: number;
  order?: Ordering | undefined;
}

export interface GetAllAssistantMessageResponse {
  code: number;
  success: boolean;
  data: AssistantConversationMessage[];
  error?: Error | undefined;
  paginated?: Paginated | undefined;
}

export interface UpdateAssistantVersionRequest {
  assistantId: number;
  assistantProviderModelId: number;
}

export interface UpdateAssistantVersionResponse {
  code: number;
  success: boolean;
  data?: Assistant | undefined;
  error?: Error | undefined;
}

export interface UpdateAssistantDetailRequest {
  assistantId: number;
  name: string;
  description: string;
}

export interface GetAllAssistantUserConversationRequest {
  assistantId: number;
  paginate?: Paginate | undefined;
  criterias: Criteria[];
  source: Source;
}

export interface GetAllAssistantUserConversationResponse {
  code: number;
  success: boolean;
  data: AssistantConversation[];
  error?: Error | undefined;
  paginated?: Paginated | undefined;
}

export interface AssistantSkill {
  id: number;
  code: string;
  name: string;
  description: string;
  setupOptions?: { [key: string]: any } | undefined;
  intializeOptions?: { [key: string]: any } | undefined;
  icon: string;
  visibility: string;
}

export interface GetAssistantSkillRequest {
  id: number;
}

export interface GetAssistantSkillResponse {
  code: number;
  success: boolean;
  data?: AssistantSkill | undefined;
  error?: Error | undefined;
}

export interface GetAllAssistantSkillRequest {
  paginate?: Paginate | undefined;
  criterias: Criteria[];
}

export interface GetAllAssistantSkillResponse {
  code: number;
  success: boolean;
  data: AssistantSkill[];
  error?: Error | undefined;
  paginated?: Paginated | undefined;
}

export interface GetAllAssistantEmbeddedSkillRequest {
  assistantId: number;
  paginate?: Paginate | undefined;
  criterias: Criteria[];
}

export interface GetAllAssistantEmbeddedSkillResponse {
  code: number;
  success: boolean;
  data: AssistantEmbeddedSkill[];
  error?: Error | undefined;
  paginated?: Paginated | undefined;
}

function createBaseAssistantEmbeddedSkill(): AssistantEmbeddedSkill {
  return {
    id: 0,
    assistantId: 0,
    assistantSkillId: 0,
    name: "",
    projectId: 0,
    organizationId: 0,
    options: undefined,
    assistantSkill: undefined,
  };
}

export const AssistantEmbeddedSkill: MessageFns<AssistantEmbeddedSkill> = {
  encode(message: AssistantEmbeddedSkill, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.assistantId !== 0) {
      writer.uint32(16).uint64(message.assistantId);
    }
    if (message.assistantSkillId !== 0) {
      writer.uint32(24).uint64(message.assistantSkillId);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.projectId !== 0) {
      writer.uint32(40).uint64(message.projectId);
    }
    if (message.organizationId !== 0) {
      writer.uint32(48).uint64(message.organizationId);
    }
    if (message.options !== undefined) {
      Struct.encode(Struct.wrap(message.options), writer.uint32(58).fork()).join();
    }
    if (message.assistantSkill !== undefined) {
      AssistantSkill.encode(message.assistantSkill, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantEmbeddedSkill {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantEmbeddedSkill();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.assistantSkillId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.projectId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.organizationId = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.options = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.assistantSkill = AssistantSkill.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantEmbeddedSkill {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      assistantSkillId: isSet(object.assistantSkillId) ? globalThis.Number(object.assistantSkillId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : 0,
      organizationId: isSet(object.organizationId) ? globalThis.Number(object.organizationId) : 0,
      options: isObject(object.options) ? object.options : undefined,
      assistantSkill: isSet(object.assistantSkill) ? AssistantSkill.fromJSON(object.assistantSkill) : undefined,
    };
  },

  toJSON(message: AssistantEmbeddedSkill): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.assistantSkillId !== 0) {
      obj.assistantSkillId = Math.round(message.assistantSkillId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projectId !== 0) {
      obj.projectId = Math.round(message.projectId);
    }
    if (message.organizationId !== 0) {
      obj.organizationId = Math.round(message.organizationId);
    }
    if (message.options !== undefined) {
      obj.options = message.options;
    }
    if (message.assistantSkill !== undefined) {
      obj.assistantSkill = AssistantSkill.toJSON(message.assistantSkill);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantEmbeddedSkill>, I>>(base?: I): AssistantEmbeddedSkill {
    return AssistantEmbeddedSkill.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantEmbeddedSkill>, I>>(object: I): AssistantEmbeddedSkill {
    const message = createBaseAssistantEmbeddedSkill();
    message.id = object.id ?? 0;
    message.assistantId = object.assistantId ?? 0;
    message.assistantSkillId = object.assistantSkillId ?? 0;
    message.name = object.name ?? "";
    message.projectId = object.projectId ?? 0;
    message.organizationId = object.organizationId ?? 0;
    message.options = object.options ?? undefined;
    message.assistantSkill = (object.assistantSkill !== undefined && object.assistantSkill !== null)
      ? AssistantSkill.fromPartial(object.assistantSkill)
      : undefined;
    return message;
  },
};

function createBaseAssistant(): Assistant {
  return {
    id: 0,
    status: "",
    visibility: "",
    source: "",
    sourceIdentifier: 0,
    assistantEmbeddedSkills: [],
    projectId: 0,
    organizationId: 0,
    assistantProviderModelId: 0,
    assistantProviderModel: undefined,
    name: "",
    description: "",
    assistantTag: undefined,
    language: "",
    organization: undefined,
    assistantKnowledgeConfigurations: [],
    createdBy: 0,
    createdUser: undefined,
    updatedBy: 0,
    updatedUser: undefined,
    createdDate: undefined,
    updatedDate: undefined,
    appAppearance: undefined,
    webAppearance: undefined,
    debuggerDeployment: undefined,
    phoneDeployment: undefined,
    whatsappDeployment: undefined,
    webPluginDeployment: undefined,
    apiDeployment: undefined,
  };
}

export const Assistant: MessageFns<Assistant> = {
  encode(message: Assistant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.visibility !== "") {
      writer.uint32(26).string(message.visibility);
    }
    if (message.source !== "") {
      writer.uint32(34).string(message.source);
    }
    if (message.sourceIdentifier !== 0) {
      writer.uint32(40).uint64(message.sourceIdentifier);
    }
    for (const v of message.assistantEmbeddedSkills) {
      AssistantEmbeddedSkill.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.projectId !== 0) {
      writer.uint32(56).uint64(message.projectId);
    }
    if (message.organizationId !== 0) {
      writer.uint32(64).uint64(message.organizationId);
    }
    if (message.assistantProviderModelId !== 0) {
      writer.uint32(72).uint64(message.assistantProviderModelId);
    }
    if (message.assistantProviderModel !== undefined) {
      AssistantProviderModel.encode(message.assistantProviderModel, writer.uint32(82).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(90).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(98).string(message.description);
    }
    if (message.assistantTag !== undefined) {
      Tag.encode(message.assistantTag, writer.uint32(114).fork()).join();
    }
    if (message.language !== "") {
      writer.uint32(130).string(message.language);
    }
    if (message.organization !== undefined) {
      Organization.encode(message.organization, writer.uint32(138).fork()).join();
    }
    for (const v of message.assistantKnowledgeConfigurations) {
      AssistantKnowledgeConfiguration.encode(v!, writer.uint32(146).fork()).join();
    }
    if (message.createdBy !== 0) {
      writer.uint32(176).uint64(message.createdBy);
    }
    if (message.createdUser !== undefined) {
      User.encode(message.createdUser, writer.uint32(186).fork()).join();
    }
    if (message.updatedBy !== 0) {
      writer.uint32(192).uint64(message.updatedBy);
    }
    if (message.updatedUser !== undefined) {
      User.encode(message.updatedUser, writer.uint32(202).fork()).join();
    }
    if (message.createdDate !== undefined) {
      Timestamp.encode(toTimestamp(message.createdDate), writer.uint32(210).fork()).join();
    }
    if (message.updatedDate !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedDate), writer.uint32(218).fork()).join();
    }
    if (message.appAppearance !== undefined) {
      Struct.encode(Struct.wrap(message.appAppearance), writer.uint32(226).fork()).join();
    }
    if (message.webAppearance !== undefined) {
      Struct.encode(Struct.wrap(message.webAppearance), writer.uint32(234).fork()).join();
    }
    if (message.debuggerDeployment !== undefined) {
      AssistantDebuggerDeployment.encode(message.debuggerDeployment, writer.uint32(242).fork()).join();
    }
    if (message.phoneDeployment !== undefined) {
      AssistantPhoneDeployment.encode(message.phoneDeployment, writer.uint32(250).fork()).join();
    }
    if (message.whatsappDeployment !== undefined) {
      AssistantWhatsappDeployment.encode(message.whatsappDeployment, writer.uint32(258).fork()).join();
    }
    if (message.webPluginDeployment !== undefined) {
      AssistantWebpluginDeployment.encode(message.webPluginDeployment, writer.uint32(266).fork()).join();
    }
    if (message.apiDeployment !== undefined) {
      AssistantApiDeployment.encode(message.apiDeployment, writer.uint32(274).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Assistant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.visibility = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.sourceIdentifier = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.assistantEmbeddedSkills.push(AssistantEmbeddedSkill.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.projectId = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.organizationId = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.assistantProviderModelId = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.assistantProviderModel = AssistantProviderModel.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.assistantTag = Tag.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.organization = Organization.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.assistantKnowledgeConfigurations.push(
            AssistantKnowledgeConfiguration.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.createdBy = longToNumber(reader.uint64());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.createdUser = User.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.updatedBy = longToNumber(reader.uint64());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.updatedUser = User.decode(reader, reader.uint32());
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.createdDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.updatedDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.appAppearance = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.webAppearance = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.debuggerDeployment = AssistantDebuggerDeployment.decode(reader, reader.uint32());
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.phoneDeployment = AssistantPhoneDeployment.decode(reader, reader.uint32());
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.whatsappDeployment = AssistantWhatsappDeployment.decode(reader, reader.uint32());
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.webPluginDeployment = AssistantWebpluginDeployment.decode(reader, reader.uint32());
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.apiDeployment = AssistantApiDeployment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Assistant {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      visibility: isSet(object.visibility) ? globalThis.String(object.visibility) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      sourceIdentifier: isSet(object.sourceIdentifier) ? globalThis.Number(object.sourceIdentifier) : 0,
      assistantEmbeddedSkills: globalThis.Array.isArray(object?.assistantEmbeddedSkills)
        ? object.assistantEmbeddedSkills.map((e: any) => AssistantEmbeddedSkill.fromJSON(e))
        : [],
      projectId: isSet(object.projectId) ? globalThis.Number(object.projectId) : 0,
      organizationId: isSet(object.organizationId) ? globalThis.Number(object.organizationId) : 0,
      assistantProviderModelId: isSet(object.assistantProviderModelId)
        ? globalThis.Number(object.assistantProviderModelId)
        : 0,
      assistantProviderModel: isSet(object.assistantProviderModel)
        ? AssistantProviderModel.fromJSON(object.assistantProviderModel)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      assistantTag: isSet(object.assistantTag) ? Tag.fromJSON(object.assistantTag) : undefined,
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      organization: isSet(object.organization) ? Organization.fromJSON(object.organization) : undefined,
      assistantKnowledgeConfigurations: globalThis.Array.isArray(object?.assistantKnowledgeConfigurations)
        ? object.assistantKnowledgeConfigurations.map((e: any) => AssistantKnowledgeConfiguration.fromJSON(e))
        : [],
      createdBy: isSet(object.createdBy) ? globalThis.Number(object.createdBy) : 0,
      createdUser: isSet(object.createdUser) ? User.fromJSON(object.createdUser) : undefined,
      updatedBy: isSet(object.updatedBy) ? globalThis.Number(object.updatedBy) : 0,
      updatedUser: isSet(object.updatedUser) ? User.fromJSON(object.updatedUser) : undefined,
      createdDate: isSet(object.createdDate) ? fromJsonTimestamp(object.createdDate) : undefined,
      updatedDate: isSet(object.updatedDate) ? fromJsonTimestamp(object.updatedDate) : undefined,
      appAppearance: isObject(object.appAppearance) ? object.appAppearance : undefined,
      webAppearance: isObject(object.webAppearance) ? object.webAppearance : undefined,
      debuggerDeployment: isSet(object.debuggerDeployment)
        ? AssistantDebuggerDeployment.fromJSON(object.debuggerDeployment)
        : undefined,
      phoneDeployment: isSet(object.phoneDeployment)
        ? AssistantPhoneDeployment.fromJSON(object.phoneDeployment)
        : undefined,
      whatsappDeployment: isSet(object.whatsappDeployment)
        ? AssistantWhatsappDeployment.fromJSON(object.whatsappDeployment)
        : undefined,
      webPluginDeployment: isSet(object.webPluginDeployment)
        ? AssistantWebpluginDeployment.fromJSON(object.webPluginDeployment)
        : undefined,
      apiDeployment: isSet(object.apiDeployment) ? AssistantApiDeployment.fromJSON(object.apiDeployment) : undefined,
    };
  },

  toJSON(message: Assistant): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.visibility !== "") {
      obj.visibility = message.visibility;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.sourceIdentifier !== 0) {
      obj.sourceIdentifier = Math.round(message.sourceIdentifier);
    }
    if (message.assistantEmbeddedSkills?.length) {
      obj.assistantEmbeddedSkills = message.assistantEmbeddedSkills.map((e) => AssistantEmbeddedSkill.toJSON(e));
    }
    if (message.projectId !== 0) {
      obj.projectId = Math.round(message.projectId);
    }
    if (message.organizationId !== 0) {
      obj.organizationId = Math.round(message.organizationId);
    }
    if (message.assistantProviderModelId !== 0) {
      obj.assistantProviderModelId = Math.round(message.assistantProviderModelId);
    }
    if (message.assistantProviderModel !== undefined) {
      obj.assistantProviderModel = AssistantProviderModel.toJSON(message.assistantProviderModel);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.assistantTag !== undefined) {
      obj.assistantTag = Tag.toJSON(message.assistantTag);
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.organization !== undefined) {
      obj.organization = Organization.toJSON(message.organization);
    }
    if (message.assistantKnowledgeConfigurations?.length) {
      obj.assistantKnowledgeConfigurations = message.assistantKnowledgeConfigurations.map((e) =>
        AssistantKnowledgeConfiguration.toJSON(e)
      );
    }
    if (message.createdBy !== 0) {
      obj.createdBy = Math.round(message.createdBy);
    }
    if (message.createdUser !== undefined) {
      obj.createdUser = User.toJSON(message.createdUser);
    }
    if (message.updatedBy !== 0) {
      obj.updatedBy = Math.round(message.updatedBy);
    }
    if (message.updatedUser !== undefined) {
      obj.updatedUser = User.toJSON(message.updatedUser);
    }
    if (message.createdDate !== undefined) {
      obj.createdDate = message.createdDate.toISOString();
    }
    if (message.updatedDate !== undefined) {
      obj.updatedDate = message.updatedDate.toISOString();
    }
    if (message.appAppearance !== undefined) {
      obj.appAppearance = message.appAppearance;
    }
    if (message.webAppearance !== undefined) {
      obj.webAppearance = message.webAppearance;
    }
    if (message.debuggerDeployment !== undefined) {
      obj.debuggerDeployment = AssistantDebuggerDeployment.toJSON(message.debuggerDeployment);
    }
    if (message.phoneDeployment !== undefined) {
      obj.phoneDeployment = AssistantPhoneDeployment.toJSON(message.phoneDeployment);
    }
    if (message.whatsappDeployment !== undefined) {
      obj.whatsappDeployment = AssistantWhatsappDeployment.toJSON(message.whatsappDeployment);
    }
    if (message.webPluginDeployment !== undefined) {
      obj.webPluginDeployment = AssistantWebpluginDeployment.toJSON(message.webPluginDeployment);
    }
    if (message.apiDeployment !== undefined) {
      obj.apiDeployment = AssistantApiDeployment.toJSON(message.apiDeployment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Assistant>, I>>(base?: I): Assistant {
    return Assistant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Assistant>, I>>(object: I): Assistant {
    const message = createBaseAssistant();
    message.id = object.id ?? 0;
    message.status = object.status ?? "";
    message.visibility = object.visibility ?? "";
    message.source = object.source ?? "";
    message.sourceIdentifier = object.sourceIdentifier ?? 0;
    message.assistantEmbeddedSkills =
      object.assistantEmbeddedSkills?.map((e) => AssistantEmbeddedSkill.fromPartial(e)) || [];
    message.projectId = object.projectId ?? 0;
    message.organizationId = object.organizationId ?? 0;
    message.assistantProviderModelId = object.assistantProviderModelId ?? 0;
    message.assistantProviderModel =
      (object.assistantProviderModel !== undefined && object.assistantProviderModel !== null)
        ? AssistantProviderModel.fromPartial(object.assistantProviderModel)
        : undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.assistantTag = (object.assistantTag !== undefined && object.assistantTag !== null)
      ? Tag.fromPartial(object.assistantTag)
      : undefined;
    message.language = object.language ?? "";
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? Organization.fromPartial(object.organization)
      : undefined;
    message.assistantKnowledgeConfigurations =
      object.assistantKnowledgeConfigurations?.map((e) => AssistantKnowledgeConfiguration.fromPartial(e)) || [];
    message.createdBy = object.createdBy ?? 0;
    message.createdUser = (object.createdUser !== undefined && object.createdUser !== null)
      ? User.fromPartial(object.createdUser)
      : undefined;
    message.updatedBy = object.updatedBy ?? 0;
    message.updatedUser = (object.updatedUser !== undefined && object.updatedUser !== null)
      ? User.fromPartial(object.updatedUser)
      : undefined;
    message.createdDate = object.createdDate ?? undefined;
    message.updatedDate = object.updatedDate ?? undefined;
    message.appAppearance = object.appAppearance ?? undefined;
    message.webAppearance = object.webAppearance ?? undefined;
    message.debuggerDeployment = (object.debuggerDeployment !== undefined && object.debuggerDeployment !== null)
      ? AssistantDebuggerDeployment.fromPartial(object.debuggerDeployment)
      : undefined;
    message.phoneDeployment = (object.phoneDeployment !== undefined && object.phoneDeployment !== null)
      ? AssistantPhoneDeployment.fromPartial(object.phoneDeployment)
      : undefined;
    message.whatsappDeployment = (object.whatsappDeployment !== undefined && object.whatsappDeployment !== null)
      ? AssistantWhatsappDeployment.fromPartial(object.whatsappDeployment)
      : undefined;
    message.webPluginDeployment = (object.webPluginDeployment !== undefined && object.webPluginDeployment !== null)
      ? AssistantWebpluginDeployment.fromPartial(object.webPluginDeployment)
      : undefined;
    message.apiDeployment = (object.apiDeployment !== undefined && object.apiDeployment !== null)
      ? AssistantApiDeployment.fromPartial(object.apiDeployment)
      : undefined;
    return message;
  },
};

function createBaseAssistantProviderModel(): AssistantProviderModel {
  return {
    id: 0,
    template: undefined,
    description: "",
    providerId: 0,
    modelModeType: "",
    providerModelId: 0,
    providerModel: undefined,
    assistantProviderModelParameters: [],
    status: "",
    createdBy: 0,
    createdUser: undefined,
    updatedBy: 0,
    updatedUser: undefined,
    createdDate: undefined,
    updatedDate: undefined,
  };
}

export const AssistantProviderModel: MessageFns<AssistantProviderModel> = {
  encode(message: AssistantProviderModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.template !== undefined) {
      AgentPromptTemplate.encode(message.template, writer.uint32(18).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.providerId !== 0) {
      writer.uint32(32).uint64(message.providerId);
    }
    if (message.modelModeType !== "") {
      writer.uint32(42).string(message.modelModeType);
    }
    if (message.providerModelId !== 0) {
      writer.uint32(64).uint64(message.providerModelId);
    }
    if (message.providerModel !== undefined) {
      ProviderModel.encode(message.providerModel, writer.uint32(74).fork()).join();
    }
    for (const v of message.assistantProviderModelParameters) {
      ProviderModelParameter.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(98).string(message.status);
    }
    if (message.createdBy !== 0) {
      writer.uint32(104).uint64(message.createdBy);
    }
    if (message.createdUser !== undefined) {
      User.encode(message.createdUser, writer.uint32(114).fork()).join();
    }
    if (message.updatedBy !== 0) {
      writer.uint32(120).uint64(message.updatedBy);
    }
    if (message.updatedUser !== undefined) {
      User.encode(message.updatedUser, writer.uint32(130).fork()).join();
    }
    if (message.createdDate !== undefined) {
      Timestamp.encode(toTimestamp(message.createdDate), writer.uint32(138).fork()).join();
    }
    if (message.updatedDate !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedDate), writer.uint32(146).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantProviderModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantProviderModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.template = AgentPromptTemplate.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.providerId = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.modelModeType = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.providerModelId = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.providerModel = ProviderModel.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.assistantProviderModelParameters.push(ProviderModelParameter.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.createdBy = longToNumber(reader.uint64());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.createdUser = User.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.updatedBy = longToNumber(reader.uint64());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.updatedUser = User.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.createdDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.updatedDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantProviderModel {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      template: isSet(object.template) ? AgentPromptTemplate.fromJSON(object.template) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      providerId: isSet(object.providerId) ? globalThis.Number(object.providerId) : 0,
      modelModeType: isSet(object.modelModeType) ? globalThis.String(object.modelModeType) : "",
      providerModelId: isSet(object.providerModelId) ? globalThis.Number(object.providerModelId) : 0,
      providerModel: isSet(object.providerModel) ? ProviderModel.fromJSON(object.providerModel) : undefined,
      assistantProviderModelParameters: globalThis.Array.isArray(object?.assistantProviderModelParameters)
        ? object.assistantProviderModelParameters.map((e: any) => ProviderModelParameter.fromJSON(e))
        : [],
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      createdBy: isSet(object.createdBy) ? globalThis.Number(object.createdBy) : 0,
      createdUser: isSet(object.createdUser) ? User.fromJSON(object.createdUser) : undefined,
      updatedBy: isSet(object.updatedBy) ? globalThis.Number(object.updatedBy) : 0,
      updatedUser: isSet(object.updatedUser) ? User.fromJSON(object.updatedUser) : undefined,
      createdDate: isSet(object.createdDate) ? fromJsonTimestamp(object.createdDate) : undefined,
      updatedDate: isSet(object.updatedDate) ? fromJsonTimestamp(object.updatedDate) : undefined,
    };
  },

  toJSON(message: AssistantProviderModel): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.template !== undefined) {
      obj.template = AgentPromptTemplate.toJSON(message.template);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.providerId !== 0) {
      obj.providerId = Math.round(message.providerId);
    }
    if (message.modelModeType !== "") {
      obj.modelModeType = message.modelModeType;
    }
    if (message.providerModelId !== 0) {
      obj.providerModelId = Math.round(message.providerModelId);
    }
    if (message.providerModel !== undefined) {
      obj.providerModel = ProviderModel.toJSON(message.providerModel);
    }
    if (message.assistantProviderModelParameters?.length) {
      obj.assistantProviderModelParameters = message.assistantProviderModelParameters.map((e) =>
        ProviderModelParameter.toJSON(e)
      );
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.createdBy !== 0) {
      obj.createdBy = Math.round(message.createdBy);
    }
    if (message.createdUser !== undefined) {
      obj.createdUser = User.toJSON(message.createdUser);
    }
    if (message.updatedBy !== 0) {
      obj.updatedBy = Math.round(message.updatedBy);
    }
    if (message.updatedUser !== undefined) {
      obj.updatedUser = User.toJSON(message.updatedUser);
    }
    if (message.createdDate !== undefined) {
      obj.createdDate = message.createdDate.toISOString();
    }
    if (message.updatedDate !== undefined) {
      obj.updatedDate = message.updatedDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantProviderModel>, I>>(base?: I): AssistantProviderModel {
    return AssistantProviderModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantProviderModel>, I>>(object: I): AssistantProviderModel {
    const message = createBaseAssistantProviderModel();
    message.id = object.id ?? 0;
    message.template = (object.template !== undefined && object.template !== null)
      ? AgentPromptTemplate.fromPartial(object.template)
      : undefined;
    message.description = object.description ?? "";
    message.providerId = object.providerId ?? 0;
    message.modelModeType = object.modelModeType ?? "";
    message.providerModelId = object.providerModelId ?? 0;
    message.providerModel = (object.providerModel !== undefined && object.providerModel !== null)
      ? ProviderModel.fromPartial(object.providerModel)
      : undefined;
    message.assistantProviderModelParameters =
      object.assistantProviderModelParameters?.map((e) => ProviderModelParameter.fromPartial(e)) || [];
    message.status = object.status ?? "";
    message.createdBy = object.createdBy ?? 0;
    message.createdUser = (object.createdUser !== undefined && object.createdUser !== null)
      ? User.fromPartial(object.createdUser)
      : undefined;
    message.updatedBy = object.updatedBy ?? 0;
    message.updatedUser = (object.updatedUser !== undefined && object.updatedUser !== null)
      ? User.fromPartial(object.updatedUser)
      : undefined;
    message.createdDate = object.createdDate ?? undefined;
    message.updatedDate = object.updatedDate ?? undefined;
    return message;
  },
};

function createBaseAssistantKnowledgeConfiguration(): AssistantKnowledgeConfiguration {
  return {
    id: 0,
    knowledgeId: 0,
    rerankerEnable: false,
    rerankerProviderModelId: 0,
    rerankerProviderModel: undefined,
    topK: 0,
    scoreThreshold: 0,
    knowledge: undefined,
    retrievalMethod: "",
  };
}

export const AssistantKnowledgeConfiguration: MessageFns<AssistantKnowledgeConfiguration> = {
  encode(message: AssistantKnowledgeConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.knowledgeId !== 0) {
      writer.uint32(16).uint64(message.knowledgeId);
    }
    if (message.rerankerEnable !== false) {
      writer.uint32(24).bool(message.rerankerEnable);
    }
    if (message.rerankerProviderModelId !== 0) {
      writer.uint32(32).uint64(message.rerankerProviderModelId);
    }
    if (message.rerankerProviderModel !== undefined) {
      ProviderModel.encode(message.rerankerProviderModel, writer.uint32(42).fork()).join();
    }
    if (message.topK !== 0) {
      writer.uint32(48).uint32(message.topK);
    }
    if (message.scoreThreshold !== 0) {
      writer.uint32(61).float(message.scoreThreshold);
    }
    if (message.knowledge !== undefined) {
      Knowledge.encode(message.knowledge, writer.uint32(66).fork()).join();
    }
    if (message.retrievalMethod !== "") {
      writer.uint32(74).string(message.retrievalMethod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantKnowledgeConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantKnowledgeConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.knowledgeId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.rerankerEnable = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.rerankerProviderModelId = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rerankerProviderModel = ProviderModel.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.topK = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.scoreThreshold = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.knowledge = Knowledge.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.retrievalMethod = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantKnowledgeConfiguration {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      knowledgeId: isSet(object.knowledgeId) ? globalThis.Number(object.knowledgeId) : 0,
      rerankerEnable: isSet(object.rerankerEnable) ? globalThis.Boolean(object.rerankerEnable) : false,
      rerankerProviderModelId: isSet(object.rerankerProviderModelId)
        ? globalThis.Number(object.rerankerProviderModelId)
        : 0,
      rerankerProviderModel: isSet(object.rerankerProviderModel)
        ? ProviderModel.fromJSON(object.rerankerProviderModel)
        : undefined,
      topK: isSet(object.topK) ? globalThis.Number(object.topK) : 0,
      scoreThreshold: isSet(object.scoreThreshold) ? globalThis.Number(object.scoreThreshold) : 0,
      knowledge: isSet(object.knowledge) ? Knowledge.fromJSON(object.knowledge) : undefined,
      retrievalMethod: isSet(object.retrievalMethod) ? globalThis.String(object.retrievalMethod) : "",
    };
  },

  toJSON(message: AssistantKnowledgeConfiguration): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.knowledgeId !== 0) {
      obj.knowledgeId = Math.round(message.knowledgeId);
    }
    if (message.rerankerEnable !== false) {
      obj.rerankerEnable = message.rerankerEnable;
    }
    if (message.rerankerProviderModelId !== 0) {
      obj.rerankerProviderModelId = Math.round(message.rerankerProviderModelId);
    }
    if (message.rerankerProviderModel !== undefined) {
      obj.rerankerProviderModel = ProviderModel.toJSON(message.rerankerProviderModel);
    }
    if (message.topK !== 0) {
      obj.topK = Math.round(message.topK);
    }
    if (message.scoreThreshold !== 0) {
      obj.scoreThreshold = message.scoreThreshold;
    }
    if (message.knowledge !== undefined) {
      obj.knowledge = Knowledge.toJSON(message.knowledge);
    }
    if (message.retrievalMethod !== "") {
      obj.retrievalMethod = message.retrievalMethod;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantKnowledgeConfiguration>, I>>(base?: I): AssistantKnowledgeConfiguration {
    return AssistantKnowledgeConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantKnowledgeConfiguration>, I>>(
    object: I,
  ): AssistantKnowledgeConfiguration {
    const message = createBaseAssistantKnowledgeConfiguration();
    message.id = object.id ?? 0;
    message.knowledgeId = object.knowledgeId ?? 0;
    message.rerankerEnable = object.rerankerEnable ?? false;
    message.rerankerProviderModelId = object.rerankerProviderModelId ?? 0;
    message.rerankerProviderModel =
      (object.rerankerProviderModel !== undefined && object.rerankerProviderModel !== null)
        ? ProviderModel.fromPartial(object.rerankerProviderModel)
        : undefined;
    message.topK = object.topK ?? 0;
    message.scoreThreshold = object.scoreThreshold ?? 0;
    message.knowledge = (object.knowledge !== undefined && object.knowledge !== null)
      ? Knowledge.fromPartial(object.knowledge)
      : undefined;
    message.retrievalMethod = object.retrievalMethod ?? "";
    return message;
  },
};

function createBaseAssistantProviderModelAttribute(): AssistantProviderModelAttribute {
  return {
    description: "",
    template: undefined,
    providerId: 0,
    providerModelId: 0,
    providerModel: undefined,
    assistantProviderModelParameters: [],
    modelModeType: "",
  };
}

export const AssistantProviderModelAttribute: MessageFns<AssistantProviderModelAttribute> = {
  encode(message: AssistantProviderModelAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.template !== undefined) {
      AgentPromptTemplate.encode(message.template, writer.uint32(26).fork()).join();
    }
    if (message.providerId !== 0) {
      writer.uint32(32).uint64(message.providerId);
    }
    if (message.providerModelId !== 0) {
      writer.uint32(40).uint64(message.providerModelId);
    }
    if (message.providerModel !== undefined) {
      ProviderModel.encode(message.providerModel, writer.uint32(50).fork()).join();
    }
    for (const v of message.assistantProviderModelParameters) {
      ProviderModelParameter.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.modelModeType !== "") {
      writer.uint32(66).string(message.modelModeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantProviderModelAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantProviderModelAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.template = AgentPromptTemplate.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.providerId = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.providerModelId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.providerModel = ProviderModel.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.assistantProviderModelParameters.push(ProviderModelParameter.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.modelModeType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantProviderModelAttribute {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      template: isSet(object.template) ? AgentPromptTemplate.fromJSON(object.template) : undefined,
      providerId: isSet(object.providerId) ? globalThis.Number(object.providerId) : 0,
      providerModelId: isSet(object.providerModelId) ? globalThis.Number(object.providerModelId) : 0,
      providerModel: isSet(object.providerModel) ? ProviderModel.fromJSON(object.providerModel) : undefined,
      assistantProviderModelParameters: globalThis.Array.isArray(object?.assistantProviderModelParameters)
        ? object.assistantProviderModelParameters.map((e: any) => ProviderModelParameter.fromJSON(e))
        : [],
      modelModeType: isSet(object.modelModeType) ? globalThis.String(object.modelModeType) : "",
    };
  },

  toJSON(message: AssistantProviderModelAttribute): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.template !== undefined) {
      obj.template = AgentPromptTemplate.toJSON(message.template);
    }
    if (message.providerId !== 0) {
      obj.providerId = Math.round(message.providerId);
    }
    if (message.providerModelId !== 0) {
      obj.providerModelId = Math.round(message.providerModelId);
    }
    if (message.providerModel !== undefined) {
      obj.providerModel = ProviderModel.toJSON(message.providerModel);
    }
    if (message.assistantProviderModelParameters?.length) {
      obj.assistantProviderModelParameters = message.assistantProviderModelParameters.map((e) =>
        ProviderModelParameter.toJSON(e)
      );
    }
    if (message.modelModeType !== "") {
      obj.modelModeType = message.modelModeType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantProviderModelAttribute>, I>>(base?: I): AssistantProviderModelAttribute {
    return AssistantProviderModelAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantProviderModelAttribute>, I>>(
    object: I,
  ): AssistantProviderModelAttribute {
    const message = createBaseAssistantProviderModelAttribute();
    message.description = object.description ?? "";
    message.template = (object.template !== undefined && object.template !== null)
      ? AgentPromptTemplate.fromPartial(object.template)
      : undefined;
    message.providerId = object.providerId ?? 0;
    message.providerModelId = object.providerModelId ?? 0;
    message.providerModel = (object.providerModel !== undefined && object.providerModel !== null)
      ? ProviderModel.fromPartial(object.providerModel)
      : undefined;
    message.assistantProviderModelParameters =
      object.assistantProviderModelParameters?.map((e) => ProviderModelParameter.fromPartial(e)) || [];
    message.modelModeType = object.modelModeType ?? "";
    return message;
  },
};

function createBaseAssistantAttribute(): AssistantAttribute {
  return { source: "", sourceIdentifier: 0, name: "", description: "", visibility: "", language: "" };
}

export const AssistantAttribute: MessageFns<AssistantAttribute> = {
  encode(message: AssistantAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== "") {
      writer.uint32(10).string(message.source);
    }
    if (message.sourceIdentifier !== 0) {
      writer.uint32(16).uint64(message.sourceIdentifier);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.visibility !== "") {
      writer.uint32(42).string(message.visibility);
    }
    if (message.language !== "") {
      writer.uint32(50).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sourceIdentifier = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.visibility = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.language = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantAttribute {
    return {
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      sourceIdentifier: isSet(object.sourceIdentifier) ? globalThis.Number(object.sourceIdentifier) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      visibility: isSet(object.visibility) ? globalThis.String(object.visibility) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
    };
  },

  toJSON(message: AssistantAttribute): unknown {
    const obj: any = {};
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.sourceIdentifier !== 0) {
      obj.sourceIdentifier = Math.round(message.sourceIdentifier);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.visibility !== "") {
      obj.visibility = message.visibility;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantAttribute>, I>>(base?: I): AssistantAttribute {
    return AssistantAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantAttribute>, I>>(object: I): AssistantAttribute {
    const message = createBaseAssistantAttribute();
    message.source = object.source ?? "";
    message.sourceIdentifier = object.sourceIdentifier ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.visibility = object.visibility ?? "";
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseAssistantKnowledgeConfigurationAttribute(): AssistantKnowledgeConfigurationAttribute {
  return {
    knowledgeId: 0,
    rerankerEnable: false,
    rerankerProviderModelId: 0,
    topK: 0,
    scoreThreshold: 0,
    retrievalMethod: "",
    active: false,
  };
}

export const AssistantKnowledgeConfigurationAttribute: MessageFns<AssistantKnowledgeConfigurationAttribute> = {
  encode(message: AssistantKnowledgeConfigurationAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.knowledgeId !== 0) {
      writer.uint32(16).uint64(message.knowledgeId);
    }
    if (message.rerankerEnable !== false) {
      writer.uint32(24).bool(message.rerankerEnable);
    }
    if (message.rerankerProviderModelId !== 0) {
      writer.uint32(32).uint64(message.rerankerProviderModelId);
    }
    if (message.topK !== 0) {
      writer.uint32(48).uint32(message.topK);
    }
    if (message.scoreThreshold !== 0) {
      writer.uint32(61).float(message.scoreThreshold);
    }
    if (message.retrievalMethod !== "") {
      writer.uint32(66).string(message.retrievalMethod);
    }
    if (message.active !== false) {
      writer.uint32(72).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantKnowledgeConfigurationAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantKnowledgeConfigurationAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.knowledgeId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.rerankerEnable = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.rerankerProviderModelId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.topK = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.scoreThreshold = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.retrievalMethod = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantKnowledgeConfigurationAttribute {
    return {
      knowledgeId: isSet(object.knowledgeId) ? globalThis.Number(object.knowledgeId) : 0,
      rerankerEnable: isSet(object.rerankerEnable) ? globalThis.Boolean(object.rerankerEnable) : false,
      rerankerProviderModelId: isSet(object.rerankerProviderModelId)
        ? globalThis.Number(object.rerankerProviderModelId)
        : 0,
      topK: isSet(object.topK) ? globalThis.Number(object.topK) : 0,
      scoreThreshold: isSet(object.scoreThreshold) ? globalThis.Number(object.scoreThreshold) : 0,
      retrievalMethod: isSet(object.retrievalMethod) ? globalThis.String(object.retrievalMethod) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: AssistantKnowledgeConfigurationAttribute): unknown {
    const obj: any = {};
    if (message.knowledgeId !== 0) {
      obj.knowledgeId = Math.round(message.knowledgeId);
    }
    if (message.rerankerEnable !== false) {
      obj.rerankerEnable = message.rerankerEnable;
    }
    if (message.rerankerProviderModelId !== 0) {
      obj.rerankerProviderModelId = Math.round(message.rerankerProviderModelId);
    }
    if (message.topK !== 0) {
      obj.topK = Math.round(message.topK);
    }
    if (message.scoreThreshold !== 0) {
      obj.scoreThreshold = message.scoreThreshold;
    }
    if (message.retrievalMethod !== "") {
      obj.retrievalMethod = message.retrievalMethod;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantKnowledgeConfigurationAttribute>, I>>(
    base?: I,
  ): AssistantKnowledgeConfigurationAttribute {
    return AssistantKnowledgeConfigurationAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantKnowledgeConfigurationAttribute>, I>>(
    object: I,
  ): AssistantKnowledgeConfigurationAttribute {
    const message = createBaseAssistantKnowledgeConfigurationAttribute();
    message.knowledgeId = object.knowledgeId ?? 0;
    message.rerankerEnable = object.rerankerEnable ?? false;
    message.rerankerProviderModelId = object.rerankerProviderModelId ?? 0;
    message.topK = object.topK ?? 0;
    message.scoreThreshold = object.scoreThreshold ?? 0;
    message.retrievalMethod = object.retrievalMethod ?? "";
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseAssistantToolConfigurationAttribute(): AssistantToolConfigurationAttribute {
  return { skillId: 0, code: "", options: undefined, active: false };
}

export const AssistantToolConfigurationAttribute: MessageFns<AssistantToolConfigurationAttribute> = {
  encode(message: AssistantToolConfigurationAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.skillId !== 0) {
      writer.uint32(8).uint64(message.skillId);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.options !== undefined) {
      Struct.encode(Struct.wrap(message.options), writer.uint32(26).fork()).join();
    }
    if (message.active !== false) {
      writer.uint32(72).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantToolConfigurationAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantToolConfigurationAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.skillId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.options = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantToolConfigurationAttribute {
    return {
      skillId: isSet(object.skillId) ? globalThis.Number(object.skillId) : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      options: isObject(object.options) ? object.options : undefined,
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: AssistantToolConfigurationAttribute): unknown {
    const obj: any = {};
    if (message.skillId !== 0) {
      obj.skillId = Math.round(message.skillId);
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.options !== undefined) {
      obj.options = message.options;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantToolConfigurationAttribute>, I>>(
    base?: I,
  ): AssistantToolConfigurationAttribute {
    return AssistantToolConfigurationAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantToolConfigurationAttribute>, I>>(
    object: I,
  ): AssistantToolConfigurationAttribute {
    const message = createBaseAssistantToolConfigurationAttribute();
    message.skillId = object.skillId ?? 0;
    message.code = object.code ?? "";
    message.options = object.options ?? undefined;
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseCreateAssistantRequest(): CreateAssistantRequest {
  return {
    assistantProviderModelAttribute: undefined,
    assistantAttribute: undefined,
    tags: [],
    assistantKnowledgeConfigurationAttributes: [],
    assistantToolConfigurationAttribute: [],
  };
}

export const CreateAssistantRequest: MessageFns<CreateAssistantRequest> = {
  encode(message: CreateAssistantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantProviderModelAttribute !== undefined) {
      AssistantProviderModelAttribute.encode(message.assistantProviderModelAttribute, writer.uint32(10).fork()).join();
    }
    if (message.assistantAttribute !== undefined) {
      AssistantAttribute.encode(message.assistantAttribute, writer.uint32(18).fork()).join();
    }
    for (const v of message.tags) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.assistantKnowledgeConfigurationAttributes) {
      AssistantKnowledgeConfigurationAttribute.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.assistantToolConfigurationAttribute) {
      AssistantToolConfigurationAttribute.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.assistantProviderModelAttribute = AssistantProviderModelAttribute.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.assistantAttribute = AssistantAttribute.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.assistantKnowledgeConfigurationAttributes.push(
            AssistantKnowledgeConfigurationAttribute.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.assistantToolConfigurationAttribute.push(
            AssistantToolConfigurationAttribute.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantRequest {
    return {
      assistantProviderModelAttribute: isSet(object.assistantProviderModelAttribute)
        ? AssistantProviderModelAttribute.fromJSON(object.assistantProviderModelAttribute)
        : undefined,
      assistantAttribute: isSet(object.assistantAttribute)
        ? AssistantAttribute.fromJSON(object.assistantAttribute)
        : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      assistantKnowledgeConfigurationAttributes:
        globalThis.Array.isArray(object?.assistantKnowledgeConfigurationAttributes)
          ? object.assistantKnowledgeConfigurationAttributes.map((e: any) =>
            AssistantKnowledgeConfigurationAttribute.fromJSON(e)
          )
          : [],
      assistantToolConfigurationAttribute: globalThis.Array.isArray(object?.assistantToolConfigurationAttribute)
        ? object.assistantToolConfigurationAttribute.map((e: any) => AssistantToolConfigurationAttribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateAssistantRequest): unknown {
    const obj: any = {};
    if (message.assistantProviderModelAttribute !== undefined) {
      obj.assistantProviderModelAttribute = AssistantProviderModelAttribute.toJSON(
        message.assistantProviderModelAttribute,
      );
    }
    if (message.assistantAttribute !== undefined) {
      obj.assistantAttribute = AssistantAttribute.toJSON(message.assistantAttribute);
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.assistantKnowledgeConfigurationAttributes?.length) {
      obj.assistantKnowledgeConfigurationAttributes = message.assistantKnowledgeConfigurationAttributes.map((e) =>
        AssistantKnowledgeConfigurationAttribute.toJSON(e)
      );
    }
    if (message.assistantToolConfigurationAttribute?.length) {
      obj.assistantToolConfigurationAttribute = message.assistantToolConfigurationAttribute.map((e) =>
        AssistantToolConfigurationAttribute.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantRequest>, I>>(base?: I): CreateAssistantRequest {
    return CreateAssistantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantRequest>, I>>(object: I): CreateAssistantRequest {
    const message = createBaseCreateAssistantRequest();
    message.assistantProviderModelAttribute =
      (object.assistantProviderModelAttribute !== undefined && object.assistantProviderModelAttribute !== null)
        ? AssistantProviderModelAttribute.fromPartial(object.assistantProviderModelAttribute)
        : undefined;
    message.assistantAttribute = (object.assistantAttribute !== undefined && object.assistantAttribute !== null)
      ? AssistantAttribute.fromPartial(object.assistantAttribute)
      : undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.assistantKnowledgeConfigurationAttributes =
      object.assistantKnowledgeConfigurationAttributes?.map((e) =>
        AssistantKnowledgeConfigurationAttribute.fromPartial(e)
      ) || [];
    message.assistantToolConfigurationAttribute =
      object.assistantToolConfigurationAttribute?.map((e) => AssistantToolConfigurationAttribute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateAssistantProviderModelRequest(): CreateAssistantProviderModelRequest {
  return { assistantId: 0, assistantProviderModelAttribute: undefined };
}

export const CreateAssistantProviderModelRequest: MessageFns<CreateAssistantProviderModelRequest> = {
  encode(message: CreateAssistantProviderModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    if (message.assistantProviderModelAttribute !== undefined) {
      AssistantProviderModelAttribute.encode(message.assistantProviderModelAttribute, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantProviderModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantProviderModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.assistantProviderModelAttribute = AssistantProviderModelAttribute.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantProviderModelRequest {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      assistantProviderModelAttribute: isSet(object.assistantProviderModelAttribute)
        ? AssistantProviderModelAttribute.fromJSON(object.assistantProviderModelAttribute)
        : undefined,
    };
  },

  toJSON(message: CreateAssistantProviderModelRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.assistantProviderModelAttribute !== undefined) {
      obj.assistantProviderModelAttribute = AssistantProviderModelAttribute.toJSON(
        message.assistantProviderModelAttribute,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantProviderModelRequest>, I>>(
    base?: I,
  ): CreateAssistantProviderModelRequest {
    return CreateAssistantProviderModelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantProviderModelRequest>, I>>(
    object: I,
  ): CreateAssistantProviderModelRequest {
    const message = createBaseCreateAssistantProviderModelRequest();
    message.assistantId = object.assistantId ?? 0;
    message.assistantProviderModelAttribute =
      (object.assistantProviderModelAttribute !== undefined && object.assistantProviderModelAttribute !== null)
        ? AssistantProviderModelAttribute.fromPartial(object.assistantProviderModelAttribute)
        : undefined;
    return message;
  },
};

function createBaseCreateAssistantProviderModelResponse(): CreateAssistantProviderModelResponse {
  return { code: 0, success: false, data: undefined, error: undefined };
}

export const CreateAssistantProviderModelResponse: MessageFns<CreateAssistantProviderModelResponse> = {
  encode(message: CreateAssistantProviderModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.data !== undefined) {
      AssistantProviderModel.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantProviderModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantProviderModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = AssistantProviderModel.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantProviderModelResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: isSet(object.data) ? AssistantProviderModel.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: CreateAssistantProviderModelResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data !== undefined) {
      obj.data = AssistantProviderModel.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantProviderModelResponse>, I>>(
    base?: I,
  ): CreateAssistantProviderModelResponse {
    return CreateAssistantProviderModelResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantProviderModelResponse>, I>>(
    object: I,
  ): CreateAssistantProviderModelResponse {
    const message = createBaseCreateAssistantProviderModelResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = (object.data !== undefined && object.data !== null)
      ? AssistantProviderModel.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseCreateAssistantResponse(): CreateAssistantResponse {
  return { code: 0, success: false, data: undefined, error: undefined };
}

export const CreateAssistantResponse: MessageFns<CreateAssistantResponse> = {
  encode(message: CreateAssistantResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.data !== undefined) {
      Assistant.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = Assistant.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: isSet(object.data) ? Assistant.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: CreateAssistantResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data !== undefined) {
      obj.data = Assistant.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantResponse>, I>>(base?: I): CreateAssistantResponse {
    return CreateAssistantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantResponse>, I>>(object: I): CreateAssistantResponse {
    const message = createBaseCreateAssistantResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = (object.data !== undefined && object.data !== null) ? Assistant.fromPartial(object.data) : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseCreateAssistantKnowledgeConfigurationRequest(): CreateAssistantKnowledgeConfigurationRequest {
  return { assistantId: 0, assistantKnowledgeConfigurationAttributes: [] };
}

export const CreateAssistantKnowledgeConfigurationRequest: MessageFns<CreateAssistantKnowledgeConfigurationRequest> = {
  encode(
    message: CreateAssistantKnowledgeConfigurationRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    for (const v of message.assistantKnowledgeConfigurationAttributes) {
      AssistantKnowledgeConfigurationAttribute.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantKnowledgeConfigurationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantKnowledgeConfigurationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.assistantKnowledgeConfigurationAttributes.push(
            AssistantKnowledgeConfigurationAttribute.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantKnowledgeConfigurationRequest {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      assistantKnowledgeConfigurationAttributes:
        globalThis.Array.isArray(object?.assistantKnowledgeConfigurationAttributes)
          ? object.assistantKnowledgeConfigurationAttributes.map((e: any) =>
            AssistantKnowledgeConfigurationAttribute.fromJSON(e)
          )
          : [],
    };
  },

  toJSON(message: CreateAssistantKnowledgeConfigurationRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.assistantKnowledgeConfigurationAttributes?.length) {
      obj.assistantKnowledgeConfigurationAttributes = message.assistantKnowledgeConfigurationAttributes.map((e) =>
        AssistantKnowledgeConfigurationAttribute.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantKnowledgeConfigurationRequest>, I>>(
    base?: I,
  ): CreateAssistantKnowledgeConfigurationRequest {
    return CreateAssistantKnowledgeConfigurationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantKnowledgeConfigurationRequest>, I>>(
    object: I,
  ): CreateAssistantKnowledgeConfigurationRequest {
    const message = createBaseCreateAssistantKnowledgeConfigurationRequest();
    message.assistantId = object.assistantId ?? 0;
    message.assistantKnowledgeConfigurationAttributes =
      object.assistantKnowledgeConfigurationAttributes?.map((e) =>
        AssistantKnowledgeConfigurationAttribute.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseCreateAssistantToolConfigurationRequest(): CreateAssistantToolConfigurationRequest {
  return { assistantId: 0, assistantToolConfigurationAttribute: [] };
}

export const CreateAssistantToolConfigurationRequest: MessageFns<CreateAssistantToolConfigurationRequest> = {
  encode(message: CreateAssistantToolConfigurationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    for (const v of message.assistantToolConfigurationAttribute) {
      AssistantToolConfigurationAttribute.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantToolConfigurationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantToolConfigurationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.assistantToolConfigurationAttribute.push(
            AssistantToolConfigurationAttribute.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantToolConfigurationRequest {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      assistantToolConfigurationAttribute: globalThis.Array.isArray(object?.assistantToolConfigurationAttribute)
        ? object.assistantToolConfigurationAttribute.map((e: any) => AssistantToolConfigurationAttribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateAssistantToolConfigurationRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.assistantToolConfigurationAttribute?.length) {
      obj.assistantToolConfigurationAttribute = message.assistantToolConfigurationAttribute.map((e) =>
        AssistantToolConfigurationAttribute.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantToolConfigurationRequest>, I>>(
    base?: I,
  ): CreateAssistantToolConfigurationRequest {
    return CreateAssistantToolConfigurationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantToolConfigurationRequest>, I>>(
    object: I,
  ): CreateAssistantToolConfigurationRequest {
    const message = createBaseCreateAssistantToolConfigurationRequest();
    message.assistantId = object.assistantId ?? 0;
    message.assistantToolConfigurationAttribute =
      object.assistantToolConfigurationAttribute?.map((e) => AssistantToolConfigurationAttribute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateAssistantTagRequest(): CreateAssistantTagRequest {
  return { assistantId: 0, tags: [] };
}

export const CreateAssistantTagRequest: MessageFns<CreateAssistantTagRequest> = {
  encode(message: CreateAssistantTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    for (const v of message.tags) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantTagRequest {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: CreateAssistantTagRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantTagRequest>, I>>(base?: I): CreateAssistantTagRequest {
    return CreateAssistantTagRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantTagRequest>, I>>(object: I): CreateAssistantTagRequest {
    const message = createBaseCreateAssistantTagRequest();
    message.assistantId = object.assistantId ?? 0;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetAssistantRequest(): GetAssistantRequest {
  return { id: 0, assistantProviderModelId: undefined };
}

export const GetAssistantRequest: MessageFns<GetAssistantRequest> = {
  encode(message: GetAssistantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.assistantProviderModelId !== undefined) {
      writer.uint32(32).uint64(message.assistantProviderModelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAssistantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssistantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.assistantProviderModelId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssistantRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      assistantProviderModelId: isSet(object.assistantProviderModelId)
        ? globalThis.Number(object.assistantProviderModelId)
        : undefined,
    };
  },

  toJSON(message: GetAssistantRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.assistantProviderModelId !== undefined) {
      obj.assistantProviderModelId = Math.round(message.assistantProviderModelId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAssistantRequest>, I>>(base?: I): GetAssistantRequest {
    return GetAssistantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAssistantRequest>, I>>(object: I): GetAssistantRequest {
    const message = createBaseGetAssistantRequest();
    message.id = object.id ?? 0;
    message.assistantProviderModelId = object.assistantProviderModelId ?? undefined;
    return message;
  },
};

function createBaseGetAssistantResponse(): GetAssistantResponse {
  return { code: 0, success: false, data: undefined, error: undefined };
}

export const GetAssistantResponse: MessageFns<GetAssistantResponse> = {
  encode(message: GetAssistantResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.data !== undefined) {
      Assistant.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAssistantResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssistantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = Assistant.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssistantResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: isSet(object.data) ? Assistant.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetAssistantResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data !== undefined) {
      obj.data = Assistant.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAssistantResponse>, I>>(base?: I): GetAssistantResponse {
    return GetAssistantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAssistantResponse>, I>>(object: I): GetAssistantResponse {
    const message = createBaseGetAssistantResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = (object.data !== undefined && object.data !== null) ? Assistant.fromPartial(object.data) : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseGetAllAssistantRequest(): GetAllAssistantRequest {
  return { paginate: undefined, criterias: [] };
}

export const GetAllAssistantRequest: MessageFns<GetAllAssistantRequest> = {
  encode(message: GetAllAssistantRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paginate !== undefined) {
      Paginate.encode(message.paginate, writer.uint32(10).fork()).join();
    }
    for (const v of message.criterias) {
      Criteria.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paginate = Paginate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.criterias.push(Criteria.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantRequest {
    return {
      paginate: isSet(object.paginate) ? Paginate.fromJSON(object.paginate) : undefined,
      criterias: globalThis.Array.isArray(object?.criterias)
        ? object.criterias.map((e: any) => Criteria.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllAssistantRequest): unknown {
    const obj: any = {};
    if (message.paginate !== undefined) {
      obj.paginate = Paginate.toJSON(message.paginate);
    }
    if (message.criterias?.length) {
      obj.criterias = message.criterias.map((e) => Criteria.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantRequest>, I>>(base?: I): GetAllAssistantRequest {
    return GetAllAssistantRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantRequest>, I>>(object: I): GetAllAssistantRequest {
    const message = createBaseGetAllAssistantRequest();
    message.paginate = (object.paginate !== undefined && object.paginate !== null)
      ? Paginate.fromPartial(object.paginate)
      : undefined;
    message.criterias = object.criterias?.map((e) => Criteria.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAllAssistantResponse(): GetAllAssistantResponse {
  return { code: 0, success: false, data: [], error: undefined, paginated: undefined };
}

export const GetAllAssistantResponse: MessageFns<GetAllAssistantResponse> = {
  encode(message: GetAllAssistantResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    for (const v of message.data) {
      Assistant.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    if (message.paginated !== undefined) {
      Paginated.encode(message.paginated, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(Assistant.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.paginated = Paginated.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Assistant.fromJSON(e)) : [],
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      paginated: isSet(object.paginated) ? Paginated.fromJSON(object.paginated) : undefined,
    };
  },

  toJSON(message: GetAllAssistantResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Assistant.toJSON(e));
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.paginated !== undefined) {
      obj.paginated = Paginated.toJSON(message.paginated);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantResponse>, I>>(base?: I): GetAllAssistantResponse {
    return GetAllAssistantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantResponse>, I>>(object: I): GetAllAssistantResponse {
    const message = createBaseGetAllAssistantResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = object.data?.map((e) => Assistant.fromPartial(e)) || [];
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.paginated = (object.paginated !== undefined && object.paginated !== null)
      ? Paginated.fromPartial(object.paginated)
      : undefined;
    return message;
  },
};

function createBaseGetAllAssistantProviderModelRequest(): GetAllAssistantProviderModelRequest {
  return { paginate: undefined, criterias: [], assistantId: 0 };
}

export const GetAllAssistantProviderModelRequest: MessageFns<GetAllAssistantProviderModelRequest> = {
  encode(message: GetAllAssistantProviderModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paginate !== undefined) {
      Paginate.encode(message.paginate, writer.uint32(10).fork()).join();
    }
    for (const v of message.criterias) {
      Criteria.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.assistantId !== 0) {
      writer.uint32(40).uint64(message.assistantId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantProviderModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantProviderModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paginate = Paginate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.criterias.push(Criteria.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantProviderModelRequest {
    return {
      paginate: isSet(object.paginate) ? Paginate.fromJSON(object.paginate) : undefined,
      criterias: globalThis.Array.isArray(object?.criterias)
        ? object.criterias.map((e: any) => Criteria.fromJSON(e))
        : [],
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
    };
  },

  toJSON(message: GetAllAssistantProviderModelRequest): unknown {
    const obj: any = {};
    if (message.paginate !== undefined) {
      obj.paginate = Paginate.toJSON(message.paginate);
    }
    if (message.criterias?.length) {
      obj.criterias = message.criterias.map((e) => Criteria.toJSON(e));
    }
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantProviderModelRequest>, I>>(
    base?: I,
  ): GetAllAssistantProviderModelRequest {
    return GetAllAssistantProviderModelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantProviderModelRequest>, I>>(
    object: I,
  ): GetAllAssistantProviderModelRequest {
    const message = createBaseGetAllAssistantProviderModelRequest();
    message.paginate = (object.paginate !== undefined && object.paginate !== null)
      ? Paginate.fromPartial(object.paginate)
      : undefined;
    message.criterias = object.criterias?.map((e) => Criteria.fromPartial(e)) || [];
    message.assistantId = object.assistantId ?? 0;
    return message;
  },
};

function createBaseGetAllAssistantProviderModelResponse(): GetAllAssistantProviderModelResponse {
  return { code: 0, success: false, data: [], error: undefined, paginated: undefined };
}

export const GetAllAssistantProviderModelResponse: MessageFns<GetAllAssistantProviderModelResponse> = {
  encode(message: GetAllAssistantProviderModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    for (const v of message.data) {
      AssistantProviderModel.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    if (message.paginated !== undefined) {
      Paginated.encode(message.paginated, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantProviderModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantProviderModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(AssistantProviderModel.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.paginated = Paginated.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantProviderModelResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: globalThis.Array.isArray(object?.data)
        ? object.data.map((e: any) => AssistantProviderModel.fromJSON(e))
        : [],
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      paginated: isSet(object.paginated) ? Paginated.fromJSON(object.paginated) : undefined,
    };
  },

  toJSON(message: GetAllAssistantProviderModelResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => AssistantProviderModel.toJSON(e));
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.paginated !== undefined) {
      obj.paginated = Paginated.toJSON(message.paginated);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantProviderModelResponse>, I>>(
    base?: I,
  ): GetAllAssistantProviderModelResponse {
    return GetAllAssistantProviderModelResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantProviderModelResponse>, I>>(
    object: I,
  ): GetAllAssistantProviderModelResponse {
    const message = createBaseGetAllAssistantProviderModelResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = object.data?.map((e) => AssistantProviderModel.fromPartial(e)) || [];
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.paginated = (object.paginated !== undefined && object.paginated !== null)
      ? Paginated.fromPartial(object.paginated)
      : undefined;
    return message;
  },
};

function createBaseGetAllAssistantMessageRequest(): GetAllAssistantMessageRequest {
  return { paginate: undefined, criterias: [], assistantId: 0, order: undefined };
}

export const GetAllAssistantMessageRequest: MessageFns<GetAllAssistantMessageRequest> = {
  encode(message: GetAllAssistantMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paginate !== undefined) {
      Paginate.encode(message.paginate, writer.uint32(10).fork()).join();
    }
    for (const v of message.criterias) {
      Criteria.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.assistantId !== 0) {
      writer.uint32(24).uint64(message.assistantId);
    }
    if (message.order !== undefined) {
      Ordering.encode(message.order, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paginate = Paginate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.criterias.push(Criteria.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.order = Ordering.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantMessageRequest {
    return {
      paginate: isSet(object.paginate) ? Paginate.fromJSON(object.paginate) : undefined,
      criterias: globalThis.Array.isArray(object?.criterias)
        ? object.criterias.map((e: any) => Criteria.fromJSON(e))
        : [],
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      order: isSet(object.order) ? Ordering.fromJSON(object.order) : undefined,
    };
  },

  toJSON(message: GetAllAssistantMessageRequest): unknown {
    const obj: any = {};
    if (message.paginate !== undefined) {
      obj.paginate = Paginate.toJSON(message.paginate);
    }
    if (message.criterias?.length) {
      obj.criterias = message.criterias.map((e) => Criteria.toJSON(e));
    }
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.order !== undefined) {
      obj.order = Ordering.toJSON(message.order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantMessageRequest>, I>>(base?: I): GetAllAssistantMessageRequest {
    return GetAllAssistantMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantMessageRequest>, I>>(
    object: I,
  ): GetAllAssistantMessageRequest {
    const message = createBaseGetAllAssistantMessageRequest();
    message.paginate = (object.paginate !== undefined && object.paginate !== null)
      ? Paginate.fromPartial(object.paginate)
      : undefined;
    message.criterias = object.criterias?.map((e) => Criteria.fromPartial(e)) || [];
    message.assistantId = object.assistantId ?? 0;
    message.order = (object.order !== undefined && object.order !== null)
      ? Ordering.fromPartial(object.order)
      : undefined;
    return message;
  },
};

function createBaseGetAllAssistantMessageResponse(): GetAllAssistantMessageResponse {
  return { code: 0, success: false, data: [], error: undefined, paginated: undefined };
}

export const GetAllAssistantMessageResponse: MessageFns<GetAllAssistantMessageResponse> = {
  encode(message: GetAllAssistantMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    for (const v of message.data) {
      AssistantConversationMessage.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    if (message.paginated !== undefined) {
      Paginated.encode(message.paginated, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(AssistantConversationMessage.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.paginated = Paginated.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantMessageResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: globalThis.Array.isArray(object?.data)
        ? object.data.map((e: any) => AssistantConversationMessage.fromJSON(e))
        : [],
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      paginated: isSet(object.paginated) ? Paginated.fromJSON(object.paginated) : undefined,
    };
  },

  toJSON(message: GetAllAssistantMessageResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => AssistantConversationMessage.toJSON(e));
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.paginated !== undefined) {
      obj.paginated = Paginated.toJSON(message.paginated);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantMessageResponse>, I>>(base?: I): GetAllAssistantMessageResponse {
    return GetAllAssistantMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantMessageResponse>, I>>(
    object: I,
  ): GetAllAssistantMessageResponse {
    const message = createBaseGetAllAssistantMessageResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = object.data?.map((e) => AssistantConversationMessage.fromPartial(e)) || [];
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.paginated = (object.paginated !== undefined && object.paginated !== null)
      ? Paginated.fromPartial(object.paginated)
      : undefined;
    return message;
  },
};

function createBaseUpdateAssistantVersionRequest(): UpdateAssistantVersionRequest {
  return { assistantId: 0, assistantProviderModelId: 0 };
}

export const UpdateAssistantVersionRequest: MessageFns<UpdateAssistantVersionRequest> = {
  encode(message: UpdateAssistantVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    if (message.assistantProviderModelId !== 0) {
      writer.uint32(16).uint64(message.assistantProviderModelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAssistantVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAssistantVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.assistantProviderModelId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAssistantVersionRequest {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      assistantProviderModelId: isSet(object.assistantProviderModelId)
        ? globalThis.Number(object.assistantProviderModelId)
        : 0,
    };
  },

  toJSON(message: UpdateAssistantVersionRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.assistantProviderModelId !== 0) {
      obj.assistantProviderModelId = Math.round(message.assistantProviderModelId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAssistantVersionRequest>, I>>(base?: I): UpdateAssistantVersionRequest {
    return UpdateAssistantVersionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAssistantVersionRequest>, I>>(
    object: I,
  ): UpdateAssistantVersionRequest {
    const message = createBaseUpdateAssistantVersionRequest();
    message.assistantId = object.assistantId ?? 0;
    message.assistantProviderModelId = object.assistantProviderModelId ?? 0;
    return message;
  },
};

function createBaseUpdateAssistantVersionResponse(): UpdateAssistantVersionResponse {
  return { code: 0, success: false, data: undefined, error: undefined };
}

export const UpdateAssistantVersionResponse: MessageFns<UpdateAssistantVersionResponse> = {
  encode(message: UpdateAssistantVersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.data !== undefined) {
      Assistant.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAssistantVersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAssistantVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = Assistant.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAssistantVersionResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: isSet(object.data) ? Assistant.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: UpdateAssistantVersionResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data !== undefined) {
      obj.data = Assistant.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAssistantVersionResponse>, I>>(base?: I): UpdateAssistantVersionResponse {
    return UpdateAssistantVersionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAssistantVersionResponse>, I>>(
    object: I,
  ): UpdateAssistantVersionResponse {
    const message = createBaseUpdateAssistantVersionResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = (object.data !== undefined && object.data !== null) ? Assistant.fromPartial(object.data) : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseUpdateAssistantDetailRequest(): UpdateAssistantDetailRequest {
  return { assistantId: 0, name: "", description: "" };
}

export const UpdateAssistantDetailRequest: MessageFns<UpdateAssistantDetailRequest> = {
  encode(message: UpdateAssistantDetailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAssistantDetailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAssistantDetailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAssistantDetailRequest {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: UpdateAssistantDetailRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAssistantDetailRequest>, I>>(base?: I): UpdateAssistantDetailRequest {
    return UpdateAssistantDetailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAssistantDetailRequest>, I>>(object: I): UpdateAssistantDetailRequest {
    const message = createBaseUpdateAssistantDetailRequest();
    message.assistantId = object.assistantId ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseGetAllAssistantUserConversationRequest(): GetAllAssistantUserConversationRequest {
  return { assistantId: 0, paginate: undefined, criterias: [], source: 0 };
}

export const GetAllAssistantUserConversationRequest: MessageFns<GetAllAssistantUserConversationRequest> = {
  encode(message: GetAllAssistantUserConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    if (message.paginate !== undefined) {
      Paginate.encode(message.paginate, writer.uint32(18).fork()).join();
    }
    for (const v of message.criterias) {
      Criteria.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.source !== 0) {
      writer.uint32(56).int32(message.source);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantUserConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantUserConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.paginate = Paginate.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.criterias.push(Criteria.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.source = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantUserConversationRequest {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      paginate: isSet(object.paginate) ? Paginate.fromJSON(object.paginate) : undefined,
      criterias: globalThis.Array.isArray(object?.criterias)
        ? object.criterias.map((e: any) => Criteria.fromJSON(e))
        : [],
      source: isSet(object.source) ? sourceFromJSON(object.source) : 0,
    };
  },

  toJSON(message: GetAllAssistantUserConversationRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.paginate !== undefined) {
      obj.paginate = Paginate.toJSON(message.paginate);
    }
    if (message.criterias?.length) {
      obj.criterias = message.criterias.map((e) => Criteria.toJSON(e));
    }
    if (message.source !== 0) {
      obj.source = sourceToJSON(message.source);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantUserConversationRequest>, I>>(
    base?: I,
  ): GetAllAssistantUserConversationRequest {
    return GetAllAssistantUserConversationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantUserConversationRequest>, I>>(
    object: I,
  ): GetAllAssistantUserConversationRequest {
    const message = createBaseGetAllAssistantUserConversationRequest();
    message.assistantId = object.assistantId ?? 0;
    message.paginate = (object.paginate !== undefined && object.paginate !== null)
      ? Paginate.fromPartial(object.paginate)
      : undefined;
    message.criterias = object.criterias?.map((e) => Criteria.fromPartial(e)) || [];
    message.source = object.source ?? 0;
    return message;
  },
};

function createBaseGetAllAssistantUserConversationResponse(): GetAllAssistantUserConversationResponse {
  return { code: 0, success: false, data: [], error: undefined, paginated: undefined };
}

export const GetAllAssistantUserConversationResponse: MessageFns<GetAllAssistantUserConversationResponse> = {
  encode(message: GetAllAssistantUserConversationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    for (const v of message.data) {
      AssistantConversation.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    if (message.paginated !== undefined) {
      Paginated.encode(message.paginated, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantUserConversationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantUserConversationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(AssistantConversation.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.paginated = Paginated.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantUserConversationResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: globalThis.Array.isArray(object?.data)
        ? object.data.map((e: any) => AssistantConversation.fromJSON(e))
        : [],
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      paginated: isSet(object.paginated) ? Paginated.fromJSON(object.paginated) : undefined,
    };
  },

  toJSON(message: GetAllAssistantUserConversationResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => AssistantConversation.toJSON(e));
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.paginated !== undefined) {
      obj.paginated = Paginated.toJSON(message.paginated);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantUserConversationResponse>, I>>(
    base?: I,
  ): GetAllAssistantUserConversationResponse {
    return GetAllAssistantUserConversationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantUserConversationResponse>, I>>(
    object: I,
  ): GetAllAssistantUserConversationResponse {
    const message = createBaseGetAllAssistantUserConversationResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = object.data?.map((e) => AssistantConversation.fromPartial(e)) || [];
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.paginated = (object.paginated !== undefined && object.paginated !== null)
      ? Paginated.fromPartial(object.paginated)
      : undefined;
    return message;
  },
};

function createBaseAssistantSkill(): AssistantSkill {
  return {
    id: 0,
    code: "",
    name: "",
    description: "",
    setupOptions: undefined,
    intializeOptions: undefined,
    icon: "",
    visibility: "",
  };
}

export const AssistantSkill: MessageFns<AssistantSkill> = {
  encode(message: AssistantSkill, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.setupOptions !== undefined) {
      Struct.encode(Struct.wrap(message.setupOptions), writer.uint32(42).fork()).join();
    }
    if (message.intializeOptions !== undefined) {
      Struct.encode(Struct.wrap(message.intializeOptions), writer.uint32(50).fork()).join();
    }
    if (message.icon !== "") {
      writer.uint32(58).string(message.icon);
    }
    if (message.visibility !== "") {
      writer.uint32(66).string(message.visibility);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantSkill {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantSkill();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.setupOptions = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.intializeOptions = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.visibility = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantSkill {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      setupOptions: isObject(object.setupOptions) ? object.setupOptions : undefined,
      intializeOptions: isObject(object.intializeOptions) ? object.intializeOptions : undefined,
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      visibility: isSet(object.visibility) ? globalThis.String(object.visibility) : "",
    };
  },

  toJSON(message: AssistantSkill): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.setupOptions !== undefined) {
      obj.setupOptions = message.setupOptions;
    }
    if (message.intializeOptions !== undefined) {
      obj.intializeOptions = message.intializeOptions;
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.visibility !== "") {
      obj.visibility = message.visibility;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantSkill>, I>>(base?: I): AssistantSkill {
    return AssistantSkill.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantSkill>, I>>(object: I): AssistantSkill {
    const message = createBaseAssistantSkill();
    message.id = object.id ?? 0;
    message.code = object.code ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.setupOptions = object.setupOptions ?? undefined;
    message.intializeOptions = object.intializeOptions ?? undefined;
    message.icon = object.icon ?? "";
    message.visibility = object.visibility ?? "";
    return message;
  },
};

function createBaseGetAssistantSkillRequest(): GetAssistantSkillRequest {
  return { id: 0 };
}

export const GetAssistantSkillRequest: MessageFns<GetAssistantSkillRequest> = {
  encode(message: GetAssistantSkillRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAssistantSkillRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssistantSkillRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssistantSkillRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetAssistantSkillRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAssistantSkillRequest>, I>>(base?: I): GetAssistantSkillRequest {
    return GetAssistantSkillRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAssistantSkillRequest>, I>>(object: I): GetAssistantSkillRequest {
    const message = createBaseGetAssistantSkillRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetAssistantSkillResponse(): GetAssistantSkillResponse {
  return { code: 0, success: false, data: undefined, error: undefined };
}

export const GetAssistantSkillResponse: MessageFns<GetAssistantSkillResponse> = {
  encode(message: GetAssistantSkillResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.data !== undefined) {
      AssistantSkill.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAssistantSkillResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssistantSkillResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = AssistantSkill.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssistantSkillResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: isSet(object.data) ? AssistantSkill.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: GetAssistantSkillResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data !== undefined) {
      obj.data = AssistantSkill.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAssistantSkillResponse>, I>>(base?: I): GetAssistantSkillResponse {
    return GetAssistantSkillResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAssistantSkillResponse>, I>>(object: I): GetAssistantSkillResponse {
    const message = createBaseGetAssistantSkillResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = (object.data !== undefined && object.data !== null)
      ? AssistantSkill.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseGetAllAssistantSkillRequest(): GetAllAssistantSkillRequest {
  return { paginate: undefined, criterias: [] };
}

export const GetAllAssistantSkillRequest: MessageFns<GetAllAssistantSkillRequest> = {
  encode(message: GetAllAssistantSkillRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paginate !== undefined) {
      Paginate.encode(message.paginate, writer.uint32(10).fork()).join();
    }
    for (const v of message.criterias) {
      Criteria.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantSkillRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantSkillRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paginate = Paginate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.criterias.push(Criteria.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantSkillRequest {
    return {
      paginate: isSet(object.paginate) ? Paginate.fromJSON(object.paginate) : undefined,
      criterias: globalThis.Array.isArray(object?.criterias)
        ? object.criterias.map((e: any) => Criteria.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllAssistantSkillRequest): unknown {
    const obj: any = {};
    if (message.paginate !== undefined) {
      obj.paginate = Paginate.toJSON(message.paginate);
    }
    if (message.criterias?.length) {
      obj.criterias = message.criterias.map((e) => Criteria.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantSkillRequest>, I>>(base?: I): GetAllAssistantSkillRequest {
    return GetAllAssistantSkillRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantSkillRequest>, I>>(object: I): GetAllAssistantSkillRequest {
    const message = createBaseGetAllAssistantSkillRequest();
    message.paginate = (object.paginate !== undefined && object.paginate !== null)
      ? Paginate.fromPartial(object.paginate)
      : undefined;
    message.criterias = object.criterias?.map((e) => Criteria.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAllAssistantSkillResponse(): GetAllAssistantSkillResponse {
  return { code: 0, success: false, data: [], error: undefined, paginated: undefined };
}

export const GetAllAssistantSkillResponse: MessageFns<GetAllAssistantSkillResponse> = {
  encode(message: GetAllAssistantSkillResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    for (const v of message.data) {
      AssistantSkill.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    if (message.paginated !== undefined) {
      Paginated.encode(message.paginated, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantSkillResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantSkillResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(AssistantSkill.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.paginated = Paginated.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantSkillResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => AssistantSkill.fromJSON(e)) : [],
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      paginated: isSet(object.paginated) ? Paginated.fromJSON(object.paginated) : undefined,
    };
  },

  toJSON(message: GetAllAssistantSkillResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => AssistantSkill.toJSON(e));
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.paginated !== undefined) {
      obj.paginated = Paginated.toJSON(message.paginated);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantSkillResponse>, I>>(base?: I): GetAllAssistantSkillResponse {
    return GetAllAssistantSkillResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantSkillResponse>, I>>(object: I): GetAllAssistantSkillResponse {
    const message = createBaseGetAllAssistantSkillResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = object.data?.map((e) => AssistantSkill.fromPartial(e)) || [];
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.paginated = (object.paginated !== undefined && object.paginated !== null)
      ? Paginated.fromPartial(object.paginated)
      : undefined;
    return message;
  },
};

function createBaseGetAllAssistantEmbeddedSkillRequest(): GetAllAssistantEmbeddedSkillRequest {
  return { assistantId: 0, paginate: undefined, criterias: [] };
}

export const GetAllAssistantEmbeddedSkillRequest: MessageFns<GetAllAssistantEmbeddedSkillRequest> = {
  encode(message: GetAllAssistantEmbeddedSkillRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    if (message.paginate !== undefined) {
      Paginate.encode(message.paginate, writer.uint32(18).fork()).join();
    }
    for (const v of message.criterias) {
      Criteria.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantEmbeddedSkillRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantEmbeddedSkillRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.paginate = Paginate.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.criterias.push(Criteria.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantEmbeddedSkillRequest {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      paginate: isSet(object.paginate) ? Paginate.fromJSON(object.paginate) : undefined,
      criterias: globalThis.Array.isArray(object?.criterias)
        ? object.criterias.map((e: any) => Criteria.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllAssistantEmbeddedSkillRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.paginate !== undefined) {
      obj.paginate = Paginate.toJSON(message.paginate);
    }
    if (message.criterias?.length) {
      obj.criterias = message.criterias.map((e) => Criteria.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantEmbeddedSkillRequest>, I>>(
    base?: I,
  ): GetAllAssistantEmbeddedSkillRequest {
    return GetAllAssistantEmbeddedSkillRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantEmbeddedSkillRequest>, I>>(
    object: I,
  ): GetAllAssistantEmbeddedSkillRequest {
    const message = createBaseGetAllAssistantEmbeddedSkillRequest();
    message.assistantId = object.assistantId ?? 0;
    message.paginate = (object.paginate !== undefined && object.paginate !== null)
      ? Paginate.fromPartial(object.paginate)
      : undefined;
    message.criterias = object.criterias?.map((e) => Criteria.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAllAssistantEmbeddedSkillResponse(): GetAllAssistantEmbeddedSkillResponse {
  return { code: 0, success: false, data: [], error: undefined, paginated: undefined };
}

export const GetAllAssistantEmbeddedSkillResponse: MessageFns<GetAllAssistantEmbeddedSkillResponse> = {
  encode(message: GetAllAssistantEmbeddedSkillResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    for (const v of message.data) {
      AssistantEmbeddedSkill.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    if (message.paginated !== undefined) {
      Paginated.encode(message.paginated, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllAssistantEmbeddedSkillResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllAssistantEmbeddedSkillResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(AssistantEmbeddedSkill.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.paginated = Paginated.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllAssistantEmbeddedSkillResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: globalThis.Array.isArray(object?.data)
        ? object.data.map((e: any) => AssistantEmbeddedSkill.fromJSON(e))
        : [],
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      paginated: isSet(object.paginated) ? Paginated.fromJSON(object.paginated) : undefined,
    };
  },

  toJSON(message: GetAllAssistantEmbeddedSkillResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => AssistantEmbeddedSkill.toJSON(e));
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.paginated !== undefined) {
      obj.paginated = Paginated.toJSON(message.paginated);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllAssistantEmbeddedSkillResponse>, I>>(
    base?: I,
  ): GetAllAssistantEmbeddedSkillResponse {
    return GetAllAssistantEmbeddedSkillResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllAssistantEmbeddedSkillResponse>, I>>(
    object: I,
  ): GetAllAssistantEmbeddedSkillResponse {
    const message = createBaseGetAllAssistantEmbeddedSkillResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = object.data?.map((e) => AssistantEmbeddedSkill.fromPartial(e)) || [];
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.paginated = (object.paginated !== undefined && object.paginated !== null)
      ? Paginated.fromPartial(object.paginated)
      : undefined;
    return message;
  },
};

export type AssistantServiceService = typeof AssistantServiceService;
export const AssistantServiceService = {
  getAssistant: {
    path: "/assistant_api.AssistantService/GetAssistant",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAssistantRequest): Buffer => Buffer.from(GetAssistantRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAssistantRequest => GetAssistantRequest.decode(value),
    responseSerialize: (value: GetAssistantResponse): Buffer =>
      Buffer.from(GetAssistantResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAssistantResponse => GetAssistantResponse.decode(value),
  },
  getAllAssistant: {
    path: "/assistant_api.AssistantService/GetAllAssistant",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllAssistantRequest): Buffer =>
      Buffer.from(GetAllAssistantRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAllAssistantRequest => GetAllAssistantRequest.decode(value),
    responseSerialize: (value: GetAllAssistantResponse): Buffer =>
      Buffer.from(GetAllAssistantResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAllAssistantResponse => GetAllAssistantResponse.decode(value),
  },
  getAllAssistantProviderModel: {
    path: "/assistant_api.AssistantService/GetAllAssistantProviderModel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllAssistantProviderModelRequest): Buffer =>
      Buffer.from(GetAllAssistantProviderModelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAllAssistantProviderModelRequest =>
      GetAllAssistantProviderModelRequest.decode(value),
    responseSerialize: (value: GetAllAssistantProviderModelResponse): Buffer =>
      Buffer.from(GetAllAssistantProviderModelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAllAssistantProviderModelResponse =>
      GetAllAssistantProviderModelResponse.decode(value),
  },
  createAssistant: {
    path: "/assistant_api.AssistantService/CreateAssistant",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAssistantRequest): Buffer =>
      Buffer.from(CreateAssistantRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAssistantRequest => CreateAssistantRequest.decode(value),
    responseSerialize: (value: CreateAssistantResponse): Buffer =>
      Buffer.from(CreateAssistantResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateAssistantResponse => CreateAssistantResponse.decode(value),
  },
  createAssistantProviderModel: {
    path: "/assistant_api.AssistantService/CreateAssistantProviderModel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAssistantProviderModelRequest): Buffer =>
      Buffer.from(CreateAssistantProviderModelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAssistantProviderModelRequest =>
      CreateAssistantProviderModelRequest.decode(value),
    responseSerialize: (value: CreateAssistantProviderModelResponse): Buffer =>
      Buffer.from(CreateAssistantProviderModelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateAssistantProviderModelResponse =>
      CreateAssistantProviderModelResponse.decode(value),
  },
  /** next gen */
  createAssistantKnowledgeConfiguration: {
    path: "/assistant_api.AssistantService/CreateAssistantKnowledgeConfiguration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAssistantKnowledgeConfigurationRequest): Buffer =>
      Buffer.from(CreateAssistantKnowledgeConfigurationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAssistantKnowledgeConfigurationRequest =>
      CreateAssistantKnowledgeConfigurationRequest.decode(value),
    responseSerialize: (value: GetAssistantResponse): Buffer =>
      Buffer.from(GetAssistantResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAssistantResponse => GetAssistantResponse.decode(value),
  },
  createAssistantToolConfiguration: {
    path: "/assistant_api.AssistantService/CreateAssistantToolConfiguration",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAssistantToolConfigurationRequest): Buffer =>
      Buffer.from(CreateAssistantToolConfigurationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAssistantToolConfigurationRequest =>
      CreateAssistantToolConfigurationRequest.decode(value),
    responseSerialize: (value: GetAssistantResponse): Buffer =>
      Buffer.from(GetAssistantResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAssistantResponse => GetAssistantResponse.decode(value),
  },
  createAssistantTag: {
    path: "/assistant_api.AssistantService/CreateAssistantTag",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAssistantTagRequest): Buffer =>
      Buffer.from(CreateAssistantTagRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAssistantTagRequest => CreateAssistantTagRequest.decode(value),
    responseSerialize: (value: GetAssistantResponse): Buffer =>
      Buffer.from(GetAssistantResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAssistantResponse => GetAssistantResponse.decode(value),
  },
  updateAssistantVersion: {
    path: "/assistant_api.AssistantService/UpdateAssistantVersion",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateAssistantVersionRequest): Buffer =>
      Buffer.from(UpdateAssistantVersionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateAssistantVersionRequest => UpdateAssistantVersionRequest.decode(value),
    responseSerialize: (value: UpdateAssistantVersionResponse): Buffer =>
      Buffer.from(UpdateAssistantVersionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdateAssistantVersionResponse =>
      UpdateAssistantVersionResponse.decode(value),
  },
  updateAssistantDetail: {
    path: "/assistant_api.AssistantService/UpdateAssistantDetail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateAssistantDetailRequest): Buffer =>
      Buffer.from(UpdateAssistantDetailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateAssistantDetailRequest => UpdateAssistantDetailRequest.decode(value),
    responseSerialize: (value: GetAssistantResponse): Buffer =>
      Buffer.from(GetAssistantResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAssistantResponse => GetAssistantResponse.decode(value),
  },
  getAllAssistantMessage: {
    path: "/assistant_api.AssistantService/GetAllAssistantMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllAssistantMessageRequest): Buffer =>
      Buffer.from(GetAllAssistantMessageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAllAssistantMessageRequest => GetAllAssistantMessageRequest.decode(value),
    responseSerialize: (value: GetAllAssistantMessageResponse): Buffer =>
      Buffer.from(GetAllAssistantMessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAllAssistantMessageResponse =>
      GetAllAssistantMessageResponse.decode(value),
  },
  getAllAssistantConversation: {
    path: "/assistant_api.AssistantService/GetAllAssistantConversation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllAssistantConversationRequest): Buffer =>
      Buffer.from(GetAllAssistantConversationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAllAssistantConversationRequest =>
      GetAllAssistantConversationRequest.decode(value),
    responseSerialize: (value: GetAllAssistantConversationResponse): Buffer =>
      Buffer.from(GetAllAssistantConversationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAllAssistantConversationResponse =>
      GetAllAssistantConversationResponse.decode(value),
  },
  getAllConversationMessage: {
    path: "/assistant_api.AssistantService/GetAllConversationMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllConversationMessageRequest): Buffer =>
      Buffer.from(GetAllConversationMessageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAllConversationMessageRequest =>
      GetAllConversationMessageRequest.decode(value),
    responseSerialize: (value: GetAllConversationMessageResponse): Buffer =>
      Buffer.from(GetAllConversationMessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAllConversationMessageResponse =>
      GetAllConversationMessageResponse.decode(value),
  },
  getAssistantSkill: {
    path: "/assistant_api.AssistantService/GetAssistantSkill",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAssistantSkillRequest): Buffer =>
      Buffer.from(GetAssistantSkillRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAssistantSkillRequest => GetAssistantSkillRequest.decode(value),
    responseSerialize: (value: GetAssistantSkillResponse): Buffer =>
      Buffer.from(GetAssistantSkillResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAssistantSkillResponse => GetAssistantSkillResponse.decode(value),
  },
  getAllAssistantSkill: {
    path: "/assistant_api.AssistantService/GetAllAssistantSkill",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllAssistantSkillRequest): Buffer =>
      Buffer.from(GetAllAssistantSkillRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAllAssistantSkillRequest => GetAllAssistantSkillRequest.decode(value),
    responseSerialize: (value: GetAllAssistantSkillResponse): Buffer =>
      Buffer.from(GetAllAssistantSkillResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAllAssistantSkillResponse => GetAllAssistantSkillResponse.decode(value),
  },
  getAllAssistantEmbeddedSkill: {
    path: "/assistant_api.AssistantService/GetAllAssistantEmbeddedSkill",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllAssistantEmbeddedSkillRequest): Buffer =>
      Buffer.from(GetAllAssistantEmbeddedSkillRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAllAssistantEmbeddedSkillRequest =>
      GetAllAssistantEmbeddedSkillRequest.decode(value),
    responseSerialize: (value: GetAllAssistantEmbeddedSkillResponse): Buffer =>
      Buffer.from(GetAllAssistantEmbeddedSkillResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAllAssistantEmbeddedSkillResponse =>
      GetAllAssistantEmbeddedSkillResponse.decode(value),
  },
} as const;

export interface AssistantServiceServer extends UntypedServiceImplementation {
  getAssistant: handleUnaryCall<GetAssistantRequest, GetAssistantResponse>;
  getAllAssistant: handleUnaryCall<GetAllAssistantRequest, GetAllAssistantResponse>;
  getAllAssistantProviderModel: handleUnaryCall<
    GetAllAssistantProviderModelRequest,
    GetAllAssistantProviderModelResponse
  >;
  createAssistant: handleUnaryCall<CreateAssistantRequest, CreateAssistantResponse>;
  createAssistantProviderModel: handleUnaryCall<
    CreateAssistantProviderModelRequest,
    CreateAssistantProviderModelResponse
  >;
  /** next gen */
  createAssistantKnowledgeConfiguration: handleUnaryCall<
    CreateAssistantKnowledgeConfigurationRequest,
    GetAssistantResponse
  >;
  createAssistantToolConfiguration: handleUnaryCall<CreateAssistantToolConfigurationRequest, GetAssistantResponse>;
  createAssistantTag: handleUnaryCall<CreateAssistantTagRequest, GetAssistantResponse>;
  updateAssistantVersion: handleUnaryCall<UpdateAssistantVersionRequest, UpdateAssistantVersionResponse>;
  updateAssistantDetail: handleUnaryCall<UpdateAssistantDetailRequest, GetAssistantResponse>;
  getAllAssistantMessage: handleUnaryCall<GetAllAssistantMessageRequest, GetAllAssistantMessageResponse>;
  getAllAssistantConversation: handleUnaryCall<GetAllAssistantConversationRequest, GetAllAssistantConversationResponse>;
  getAllConversationMessage: handleUnaryCall<GetAllConversationMessageRequest, GetAllConversationMessageResponse>;
  getAssistantSkill: handleUnaryCall<GetAssistantSkillRequest, GetAssistantSkillResponse>;
  getAllAssistantSkill: handleUnaryCall<GetAllAssistantSkillRequest, GetAllAssistantSkillResponse>;
  getAllAssistantEmbeddedSkill: handleUnaryCall<
    GetAllAssistantEmbeddedSkillRequest,
    GetAllAssistantEmbeddedSkillResponse
  >;
}

export interface AssistantServiceClient extends Client {
  getAssistant(
    request: GetAssistantRequest,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  getAssistant(
    request: GetAssistantRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  getAssistant(
    request: GetAssistantRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  getAllAssistant(
    request: GetAllAssistantRequest,
    callback: (error: ServiceError | null, response: GetAllAssistantResponse) => void,
  ): ClientUnaryCall;
  getAllAssistant(
    request: GetAllAssistantRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllAssistantResponse) => void,
  ): ClientUnaryCall;
  getAllAssistant(
    request: GetAllAssistantRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllAssistantResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantProviderModel(
    request: GetAllAssistantProviderModelRequest,
    callback: (error: ServiceError | null, response: GetAllAssistantProviderModelResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantProviderModel(
    request: GetAllAssistantProviderModelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllAssistantProviderModelResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantProviderModel(
    request: GetAllAssistantProviderModelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllAssistantProviderModelResponse) => void,
  ): ClientUnaryCall;
  createAssistant(
    request: CreateAssistantRequest,
    callback: (error: ServiceError | null, response: CreateAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistant(
    request: CreateAssistantRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistant(
    request: CreateAssistantRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistantProviderModel(
    request: CreateAssistantProviderModelRequest,
    callback: (error: ServiceError | null, response: CreateAssistantProviderModelResponse) => void,
  ): ClientUnaryCall;
  createAssistantProviderModel(
    request: CreateAssistantProviderModelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateAssistantProviderModelResponse) => void,
  ): ClientUnaryCall;
  createAssistantProviderModel(
    request: CreateAssistantProviderModelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateAssistantProviderModelResponse) => void,
  ): ClientUnaryCall;
  /** next gen */
  createAssistantKnowledgeConfiguration(
    request: CreateAssistantKnowledgeConfigurationRequest,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistantKnowledgeConfiguration(
    request: CreateAssistantKnowledgeConfigurationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistantKnowledgeConfiguration(
    request: CreateAssistantKnowledgeConfigurationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistantToolConfiguration(
    request: CreateAssistantToolConfigurationRequest,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistantToolConfiguration(
    request: CreateAssistantToolConfigurationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistantToolConfiguration(
    request: CreateAssistantToolConfigurationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistantTag(
    request: CreateAssistantTagRequest,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistantTag(
    request: CreateAssistantTagRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  createAssistantTag(
    request: CreateAssistantTagRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  updateAssistantVersion(
    request: UpdateAssistantVersionRequest,
    callback: (error: ServiceError | null, response: UpdateAssistantVersionResponse) => void,
  ): ClientUnaryCall;
  updateAssistantVersion(
    request: UpdateAssistantVersionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateAssistantVersionResponse) => void,
  ): ClientUnaryCall;
  updateAssistantVersion(
    request: UpdateAssistantVersionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateAssistantVersionResponse) => void,
  ): ClientUnaryCall;
  updateAssistantDetail(
    request: UpdateAssistantDetailRequest,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  updateAssistantDetail(
    request: UpdateAssistantDetailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  updateAssistantDetail(
    request: UpdateAssistantDetailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAssistantResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantMessage(
    request: GetAllAssistantMessageRequest,
    callback: (error: ServiceError | null, response: GetAllAssistantMessageResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantMessage(
    request: GetAllAssistantMessageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllAssistantMessageResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantMessage(
    request: GetAllAssistantMessageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllAssistantMessageResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantConversation(
    request: GetAllAssistantConversationRequest,
    callback: (error: ServiceError | null, response: GetAllAssistantConversationResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantConversation(
    request: GetAllAssistantConversationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllAssistantConversationResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantConversation(
    request: GetAllAssistantConversationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllAssistantConversationResponse) => void,
  ): ClientUnaryCall;
  getAllConversationMessage(
    request: GetAllConversationMessageRequest,
    callback: (error: ServiceError | null, response: GetAllConversationMessageResponse) => void,
  ): ClientUnaryCall;
  getAllConversationMessage(
    request: GetAllConversationMessageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllConversationMessageResponse) => void,
  ): ClientUnaryCall;
  getAllConversationMessage(
    request: GetAllConversationMessageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllConversationMessageResponse) => void,
  ): ClientUnaryCall;
  getAssistantSkill(
    request: GetAssistantSkillRequest,
    callback: (error: ServiceError | null, response: GetAssistantSkillResponse) => void,
  ): ClientUnaryCall;
  getAssistantSkill(
    request: GetAssistantSkillRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAssistantSkillResponse) => void,
  ): ClientUnaryCall;
  getAssistantSkill(
    request: GetAssistantSkillRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAssistantSkillResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantSkill(
    request: GetAllAssistantSkillRequest,
    callback: (error: ServiceError | null, response: GetAllAssistantSkillResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantSkill(
    request: GetAllAssistantSkillRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllAssistantSkillResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantSkill(
    request: GetAllAssistantSkillRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllAssistantSkillResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantEmbeddedSkill(
    request: GetAllAssistantEmbeddedSkillRequest,
    callback: (error: ServiceError | null, response: GetAllAssistantEmbeddedSkillResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantEmbeddedSkill(
    request: GetAllAssistantEmbeddedSkillRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllAssistantEmbeddedSkillResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantEmbeddedSkill(
    request: GetAllAssistantEmbeddedSkillRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllAssistantEmbeddedSkillResponse) => void,
  ): ClientUnaryCall;
}

export const AssistantServiceClient = makeGenericClientConstructor(
  AssistantServiceService,
  "assistant_api.AssistantService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AssistantServiceClient;
  service: typeof AssistantServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
