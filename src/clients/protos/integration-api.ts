/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: integration-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as dependency_2 from "./google/protobuf/struct";
import * as dependency_3 from "./google/protobuf/any";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace integration_api {
    export class Credential extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            value?: dependency_2.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 2) as dependency_2.google.protobuf.Struct;
        }
        set value(value: dependency_2.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            id?: string;
            value?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
        }): Credential {
            const message = new Credential({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.value != null) {
                message.value = dependency_2.google.protobuf.Struct.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                value?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.has_value)
                writer.writeMessage(2, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Credential {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Credential();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.value, () => message.value = dependency_2.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Credential {
            return Credential.deserialize(bytes);
        }
    }
    export class ToolDefinition extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            type?: string;
        } & (({
            functionDefinition?: FunctionDefinition;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("functionDefinition" in data && data.functionDefinition != undefined) {
                    this.functionDefinition = data.functionDefinition;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get functionDefinition() {
            return pb_1.Message.getWrapperField(this, FunctionDefinition, 2) as FunctionDefinition;
        }
        set functionDefinition(value: FunctionDefinition) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_functionDefinition() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _functionDefinition() {
            const cases: {
                [index: number]: "none" | "functionDefinition";
            } = {
                0: "none",
                2: "functionDefinition"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            type?: string;
            functionDefinition?: ReturnType<typeof FunctionDefinition.prototype.toObject>;
        }): ToolDefinition {
            const message = new ToolDefinition({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.functionDefinition != null) {
                message.functionDefinition = FunctionDefinition.fromObject(data.functionDefinition);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                functionDefinition?: ReturnType<typeof FunctionDefinition.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.functionDefinition != null) {
                data.functionDefinition = this.functionDefinition.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.has_functionDefinition)
                writer.writeMessage(2, this.functionDefinition, () => this.functionDefinition.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolDefinition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolDefinition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.functionDefinition, () => message.functionDefinition = FunctionDefinition.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToolDefinition {
            return ToolDefinition.deserialize(bytes);
        }
    }
    export class FunctionDefinition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            parameters?: FunctionParameter;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("parameters" in data && data.parameters != undefined) {
                    this.parameters = data.parameters;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get parameters() {
            return pb_1.Message.getWrapperField(this, FunctionParameter, 3) as FunctionParameter;
        }
        set parameters(value: FunctionParameter) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_parameters() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            parameters?: ReturnType<typeof FunctionParameter.prototype.toObject>;
        }): FunctionDefinition {
            const message = new FunctionDefinition({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.parameters != null) {
                message.parameters = FunctionParameter.fromObject(data.parameters);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                parameters?: ReturnType<typeof FunctionParameter.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.parameters != null) {
                data.parameters = this.parameters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.has_parameters)
                writer.writeMessage(3, this.parameters, () => this.parameters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FunctionDefinition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FunctionDefinition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.parameters, () => message.parameters = FunctionParameter.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FunctionDefinition {
            return FunctionDefinition.deserialize(bytes);
        }
    }
    export class FunctionParameter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            required?: string[];
            type?: string;
            properties?: Map<string, FunctionParameterProperty>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("required" in data && data.required != undefined) {
                    this.required = data.required;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("properties" in data && data.properties != undefined) {
                    this.properties = data.properties;
                }
            }
            if (!this.properties)
                this.properties = new Map();
        }
        get required() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set required(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get properties() {
            return pb_1.Message.getField(this, 3) as any as Map<string, FunctionParameterProperty>;
        }
        set properties(value: Map<string, FunctionParameterProperty>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            required?: string[];
            type?: string;
            properties?: {
                [key: string]: ReturnType<typeof FunctionParameterProperty.prototype.toObject>;
            };
        }): FunctionParameter {
            const message = new FunctionParameter({});
            if (data.required != null) {
                message.required = data.required;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (typeof data.properties == "object") {
                message.properties = new Map(Object.entries(data.properties).map(([key, value]) => [key, FunctionParameterProperty.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                required?: string[];
                type?: string;
                properties?: {
                    [key: string]: ReturnType<typeof FunctionParameterProperty.prototype.toObject>;
                };
            } = {};
            if (this.required != null) {
                data.required = this.required;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.properties != null) {
                data.properties = (Object.fromEntries)((Array.from)(this.properties).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.required.length)
                writer.writeRepeatedString(1, this.required);
            if (this.type.length)
                writer.writeString(2, this.type);
            for (const [key, value] of this.properties) {
                writer.writeMessage(3, this.properties, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FunctionParameter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FunctionParameter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.properties as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = FunctionParameterProperty.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FunctionParameter {
            return FunctionParameter.deserialize(bytes);
        }
    }
    export class FunctionParameterProperty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            description?: string;
            enum?: string[];
            items?: FunctionParameter;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("enum" in data && data.enum != undefined) {
                    this.enum = data.enum;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get enum() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set enum(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get items() {
            return pb_1.Message.getWrapperField(this, FunctionParameter, 4) as FunctionParameter;
        }
        set items(value: FunctionParameter) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_items() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            type?: string;
            description?: string;
            enum?: string[];
            items?: ReturnType<typeof FunctionParameter.prototype.toObject>;
        }): FunctionParameterProperty {
            const message = new FunctionParameterProperty({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.enum != null) {
                message.enum = data.enum;
            }
            if (data.items != null) {
                message.items = FunctionParameter.fromObject(data.items);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                description?: string;
                enum?: string[];
                items?: ReturnType<typeof FunctionParameter.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.enum != null) {
                data.enum = this.enum;
            }
            if (this.items != null) {
                data.items = this.items.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.enum.length)
                writer.writeRepeatedString(3, this.enum);
            if (this.has_items)
                writer.writeMessage(4, this.items, () => this.items.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FunctionParameterProperty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FunctionParameterProperty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.items, () => message.items = FunctionParameter.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FunctionParameterProperty {
            return FunctionParameterProperty.deserialize(bytes);
        }
    }
    export class Embedding extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            index?: number;
            embedding?: number[];
            base64?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("embedding" in data && data.embedding != undefined) {
                    this.embedding = data.embedding;
                }
                if ("base64" in data && data.base64 != undefined) {
                    this.base64 = data.base64;
                }
            }
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get embedding() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set embedding(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get base64() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set base64(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            index?: number;
            embedding?: number[];
            base64?: string;
        }): Embedding {
            const message = new Embedding({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.embedding != null) {
                message.embedding = data.embedding;
            }
            if (data.base64 != null) {
                message.base64 = data.base64;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: number;
                embedding?: number[];
                base64?: string;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.embedding != null) {
                data.embedding = this.embedding;
            }
            if (this.base64 != null) {
                data.base64 = this.base64;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index != 0)
                writer.writeInt32(1, this.index);
            if (this.embedding.length)
                writer.writePackedDouble(2, this.embedding);
            if (this.base64.length)
                writer.writeString(3, this.base64);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Embedding {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Embedding();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readInt32();
                        break;
                    case 2:
                        message.embedding = reader.readPackedDouble();
                        break;
                    case 3:
                        message.base64 = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Embedding {
            return Embedding.deserialize(bytes);
        }
    }
    export class EmbeddingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential?: Credential;
            content?: Map<number, string>;
            modelParameters?: Map<string, dependency_3.google.protobuf.Any>;
            additionalData?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("modelParameters" in data && data.modelParameters != undefined) {
                    this.modelParameters = data.modelParameters;
                }
                if ("additionalData" in data && data.additionalData != undefined) {
                    this.additionalData = data.additionalData;
                }
            }
            if (!this.content)
                this.content = new Map();
            if (!this.modelParameters)
                this.modelParameters = new Map();
            if (!this.additionalData)
                this.additionalData = new Map();
        }
        get credential() {
            return pb_1.Message.getWrapperField(this, Credential, 1) as Credential;
        }
        set credential(value: Credential) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_credential() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get content() {
            return pb_1.Message.getField(this, 4) as any as Map<number, string>;
        }
        set content(value: Map<number, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get modelParameters() {
            return pb_1.Message.getField(this, 5) as any as Map<string, dependency_3.google.protobuf.Any>;
        }
        set modelParameters(value: Map<string, dependency_3.google.protobuf.Any>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get additionalData() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set additionalData(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        static fromObject(data: {
            credential?: ReturnType<typeof Credential.prototype.toObject>;
            content?: {
                [key: number]: string;
            };
            modelParameters?: {
                [key: string]: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            };
            additionalData?: {
                [key: string]: string;
            };
        }): EmbeddingRequest {
            const message = new EmbeddingRequest({});
            if (data.credential != null) {
                message.credential = Credential.fromObject(data.credential);
            }
            if (typeof data.content == "object") {
                message.content = new Map(Object.entries(data.content).map(([key, value]) => [Number(key), value]));
            }
            if (typeof data.modelParameters == "object") {
                message.modelParameters = new Map(Object.entries(data.modelParameters).map(([key, value]) => [key, dependency_3.google.protobuf.Any.fromObject(value)]));
            }
            if (typeof data.additionalData == "object") {
                message.additionalData = new Map(Object.entries(data.additionalData));
            }
            return message;
        }
        toObject() {
            const data: {
                credential?: ReturnType<typeof Credential.prototype.toObject>;
                content?: {
                    [key: number]: string;
                };
                modelParameters?: {
                    [key: string]: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
                };
                additionalData?: {
                    [key: string]: string;
                };
            } = {};
            if (this.credential != null) {
                data.credential = this.credential.toObject();
            }
            if (this.content != null) {
                data.content = (Object.fromEntries)(this.content);
            }
            if (this.modelParameters != null) {
                data.modelParameters = (Object.fromEntries)((Array.from)(this.modelParameters).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.additionalData != null) {
                data.additionalData = (Object.fromEntries)(this.additionalData);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_credential)
                writer.writeMessage(1, this.credential, () => this.credential.serialize(writer));
            for (const [key, value] of this.content) {
                writer.writeMessage(4, this.content, () => {
                    writer.writeInt32(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.modelParameters) {
                writer.writeMessage(5, this.modelParameters, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.additionalData) {
                writer.writeMessage(6, this.additionalData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmbeddingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmbeddingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.credential, () => message.credential = Credential.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.content as any, reader, reader.readInt32, reader.readString));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.modelParameters as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_3.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.additionalData as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmbeddingRequest {
            return EmbeddingRequest.deserialize(bytes);
        }
    }
    export class EmbeddingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[5]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
            requestId?: number;
            data?: Embedding[];
            metrics?: dependency_1.Metric[];
        } & (({
            error?: dependency_1.Error;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set requestId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, Embedding, 4) as Embedding[];
        }
        set data(value: Embedding[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_1.Error, 5) as dependency_1.Error;
        }
        set error(value: dependency_1.Error) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Metric, 6) as dependency_1.Metric[];
        }
        set metrics(value: dependency_1.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                5: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            requestId?: number;
            data?: ReturnType<typeof Embedding.prototype.toObject>[];
            error?: ReturnType<typeof dependency_1.Error.prototype.toObject>;
            metrics?: ReturnType<typeof dependency_1.Metric.prototype.toObject>[];
        }): EmbeddingResponse {
            const message = new EmbeddingResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.data != null) {
                message.data = data.data.map(item => Embedding.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_1.Error.fromObject(data.error);
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => dependency_1.Metric.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                requestId?: number;
                data?: ReturnType<typeof Embedding.prototype.toObject>[];
                error?: ReturnType<typeof dependency_1.Error.prototype.toObject>;
                metrics?: ReturnType<typeof dependency_1.Metric.prototype.toObject>[];
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.data != null) {
                data.data = this.data.map((item: Embedding) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: dependency_1.Metric) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.data.length)
                writer.writeRepeatedMessage(4, this.data, (item: Embedding) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(5, this.error, () => this.error.serialize(writer));
            if (this.metrics.length)
                writer.writeRepeatedMessage(6, this.metrics, (item: dependency_1.Metric) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmbeddingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmbeddingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Embedding.deserialize(reader), Embedding));
                        break;
                    case 5:
                        reader.readMessage(message.error, () => message.error = dependency_1.Error.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.Metric.deserialize(reader), dependency_1.Metric));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmbeddingResponse {
            return EmbeddingResponse.deserialize(bytes);
        }
    }
    export class Reranking extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            index?: number;
            content?: dependency_1.Content;
            RelevanceScore?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("RelevanceScore" in data && data.RelevanceScore != undefined) {
                    this.RelevanceScore = data.RelevanceScore;
                }
            }
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getWrapperField(this, dependency_1.Content, 2) as dependency_1.Content;
        }
        set content(value: dependency_1.Content) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_content() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get RelevanceScore() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set RelevanceScore(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            index?: number;
            content?: ReturnType<typeof dependency_1.Content.prototype.toObject>;
            RelevanceScore?: number;
        }): Reranking {
            const message = new Reranking({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.content != null) {
                message.content = dependency_1.Content.fromObject(data.content);
            }
            if (data.RelevanceScore != null) {
                message.RelevanceScore = data.RelevanceScore;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: number;
                content?: ReturnType<typeof dependency_1.Content.prototype.toObject>;
                RelevanceScore?: number;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.content != null) {
                data.content = this.content.toObject();
            }
            if (this.RelevanceScore != null) {
                data.RelevanceScore = this.RelevanceScore;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index != 0)
                writer.writeInt32(1, this.index);
            if (this.has_content)
                writer.writeMessage(2, this.content, () => this.content.serialize(writer));
            if (this.RelevanceScore != 0)
                writer.writeDouble(3, this.RelevanceScore);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reranking {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reranking();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.content, () => message.content = dependency_1.Content.deserialize(reader));
                        break;
                    case 3:
                        message.RelevanceScore = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Reranking {
            return Reranking.deserialize(bytes);
        }
    }
    export class RerankingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential?: Credential;
            query?: string;
            content?: Map<number, dependency_1.Content>;
            modelParameters?: Map<string, dependency_3.google.protobuf.Any>;
            additionalData?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("modelParameters" in data && data.modelParameters != undefined) {
                    this.modelParameters = data.modelParameters;
                }
                if ("additionalData" in data && data.additionalData != undefined) {
                    this.additionalData = data.additionalData;
                }
            }
            if (!this.content)
                this.content = new Map();
            if (!this.modelParameters)
                this.modelParameters = new Map();
            if (!this.additionalData)
                this.additionalData = new Map();
        }
        get credential() {
            return pb_1.Message.getWrapperField(this, Credential, 1) as Credential;
        }
        set credential(value: Credential) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_credential() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get content() {
            return pb_1.Message.getField(this, 5) as any as Map<number, dependency_1.Content>;
        }
        set content(value: Map<number, dependency_1.Content>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get modelParameters() {
            return pb_1.Message.getField(this, 6) as any as Map<string, dependency_3.google.protobuf.Any>;
        }
        set modelParameters(value: Map<string, dependency_3.google.protobuf.Any>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get additionalData() {
            return pb_1.Message.getField(this, 7) as any as Map<string, string>;
        }
        set additionalData(value: Map<string, string>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        static fromObject(data: {
            credential?: ReturnType<typeof Credential.prototype.toObject>;
            query?: string;
            content?: {
                [key: number]: ReturnType<typeof dependency_1.Content.prototype.toObject>;
            };
            modelParameters?: {
                [key: string]: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            };
            additionalData?: {
                [key: string]: string;
            };
        }): RerankingRequest {
            const message = new RerankingRequest({});
            if (data.credential != null) {
                message.credential = Credential.fromObject(data.credential);
            }
            if (data.query != null) {
                message.query = data.query;
            }
            if (typeof data.content == "object") {
                message.content = new Map(Object.entries(data.content).map(([key, value]) => [Number(key), dependency_1.Content.fromObject(value)]));
            }
            if (typeof data.modelParameters == "object") {
                message.modelParameters = new Map(Object.entries(data.modelParameters).map(([key, value]) => [key, dependency_3.google.protobuf.Any.fromObject(value)]));
            }
            if (typeof data.additionalData == "object") {
                message.additionalData = new Map(Object.entries(data.additionalData));
            }
            return message;
        }
        toObject() {
            const data: {
                credential?: ReturnType<typeof Credential.prototype.toObject>;
                query?: string;
                content?: {
                    [key: number]: ReturnType<typeof dependency_1.Content.prototype.toObject>;
                };
                modelParameters?: {
                    [key: string]: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
                };
                additionalData?: {
                    [key: string]: string;
                };
            } = {};
            if (this.credential != null) {
                data.credential = this.credential.toObject();
            }
            if (this.query != null) {
                data.query = this.query;
            }
            if (this.content != null) {
                data.content = (Object.fromEntries)((Array.from)(this.content).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.modelParameters != null) {
                data.modelParameters = (Object.fromEntries)((Array.from)(this.modelParameters).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.additionalData != null) {
                data.additionalData = (Object.fromEntries)(this.additionalData);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_credential)
                writer.writeMessage(1, this.credential, () => this.credential.serialize(writer));
            if (this.query.length)
                writer.writeString(4, this.query);
            for (const [key, value] of this.content) {
                writer.writeMessage(5, this.content, () => {
                    writer.writeInt32(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.modelParameters) {
                writer.writeMessage(6, this.modelParameters, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.additionalData) {
                writer.writeMessage(7, this.additionalData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RerankingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RerankingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.credential, () => message.credential = Credential.deserialize(reader));
                        break;
                    case 4:
                        message.query = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.content as any, reader, reader.readInt32, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.Content.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.modelParameters as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_3.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.additionalData as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RerankingRequest {
            return RerankingRequest.deserialize(bytes);
        }
    }
    export class RerankingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            requestId?: number;
            data?: Reranking[];
            error?: dependency_1.Error;
            metrics?: dependency_1.Metric[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set requestId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, Reranking, 4) as Reranking[];
        }
        set data(value: Reranking[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_1.Error, 5) as dependency_1.Error;
        }
        set error(value: dependency_1.Error) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Metric, 6) as dependency_1.Metric[];
        }
        set metrics(value: dependency_1.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            requestId?: number;
            data?: ReturnType<typeof Reranking.prototype.toObject>[];
            error?: ReturnType<typeof dependency_1.Error.prototype.toObject>;
            metrics?: ReturnType<typeof dependency_1.Metric.prototype.toObject>[];
        }): RerankingResponse {
            const message = new RerankingResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.data != null) {
                message.data = data.data.map(item => Reranking.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_1.Error.fromObject(data.error);
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => dependency_1.Metric.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                requestId?: number;
                data?: ReturnType<typeof Reranking.prototype.toObject>[];
                error?: ReturnType<typeof dependency_1.Error.prototype.toObject>;
                metrics?: ReturnType<typeof dependency_1.Metric.prototype.toObject>[];
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.data != null) {
                data.data = this.data.map((item: Reranking) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: dependency_1.Metric) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.data.length)
                writer.writeRepeatedMessage(4, this.data, (item: Reranking) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(5, this.error, () => this.error.serialize(writer));
            if (this.metrics.length)
                writer.writeRepeatedMessage(6, this.metrics, (item: dependency_1.Metric) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RerankingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RerankingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Reranking.deserialize(reader), Reranking));
                        break;
                    case 5:
                        reader.readMessage(message.error, () => message.error = dependency_1.Error.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.Metric.deserialize(reader), dependency_1.Metric));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RerankingResponse {
            return RerankingResponse.deserialize(bytes);
        }
    }
    export class ChatResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[4], [6]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
            requestId?: number;
            metrics?: dependency_1.Metric[];
            finishReason?: string;
        } & (({
            data?: dependency_1.Message;
        }) | ({
            error?: dependency_1.Error;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
                if ("finishReason" in data && data.finishReason != undefined) {
                    this.finishReason = data.finishReason;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set requestId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_1.Message, 4) as dependency_1.Message;
        }
        set data(value: dependency_1.Message) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_1.Error, 6) as dependency_1.Error;
        }
        set error(value: dependency_1.Error) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[1], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Metric, 7) as dependency_1.Metric[];
        }
        set metrics(value: dependency_1.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get finishReason() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set finishReason(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get _data() {
            const cases: {
                [index: number]: "none" | "data";
            } = {
                0: "none",
                4: "data"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                6: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            requestId?: number;
            data?: ReturnType<typeof dependency_1.Message.prototype.toObject>;
            error?: ReturnType<typeof dependency_1.Error.prototype.toObject>;
            metrics?: ReturnType<typeof dependency_1.Metric.prototype.toObject>[];
            finishReason?: string;
        }): ChatResponse {
            const message = new ChatResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.data != null) {
                message.data = dependency_1.Message.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_1.Error.fromObject(data.error);
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => dependency_1.Metric.fromObject(item));
            }
            if (data.finishReason != null) {
                message.finishReason = data.finishReason;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                requestId?: number;
                data?: ReturnType<typeof dependency_1.Message.prototype.toObject>;
                error?: ReturnType<typeof dependency_1.Error.prototype.toObject>;
                metrics?: ReturnType<typeof dependency_1.Metric.prototype.toObject>[];
                finishReason?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: dependency_1.Metric) => item.toObject());
            }
            if (this.finishReason != null) {
                data.finishReason = this.finishReason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.has_data)
                writer.writeMessage(4, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(6, this.error, () => this.error.serialize(writer));
            if (this.metrics.length)
                writer.writeRepeatedMessage(7, this.metrics, (item: dependency_1.Metric) => item.serialize(writer));
            if (this.finishReason.length)
                writer.writeString(8, this.finishReason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = dependency_1.Message.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.error, () => message.error = dependency_1.Error.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_1.Metric.deserialize(reader), dependency_1.Metric));
                        break;
                    case 8:
                        message.finishReason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatResponse {
            return ChatResponse.deserialize(bytes);
        }
    }
    export class ChatRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential?: Credential;
            conversations?: dependency_1.Message[];
            additionalData?: Map<string, string>;
            modelParameters?: Map<string, dependency_3.google.protobuf.Any>;
            toolDefinitions?: ToolDefinition[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
                if ("conversations" in data && data.conversations != undefined) {
                    this.conversations = data.conversations;
                }
                if ("additionalData" in data && data.additionalData != undefined) {
                    this.additionalData = data.additionalData;
                }
                if ("modelParameters" in data && data.modelParameters != undefined) {
                    this.modelParameters = data.modelParameters;
                }
                if ("toolDefinitions" in data && data.toolDefinitions != undefined) {
                    this.toolDefinitions = data.toolDefinitions;
                }
            }
            if (!this.additionalData)
                this.additionalData = new Map();
            if (!this.modelParameters)
                this.modelParameters = new Map();
        }
        get credential() {
            return pb_1.Message.getWrapperField(this, Credential, 1) as Credential;
        }
        set credential(value: Credential) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_credential() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get conversations() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Message, 4) as dependency_1.Message[];
        }
        set conversations(value: dependency_1.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get additionalData() {
            return pb_1.Message.getField(this, 5) as any as Map<string, string>;
        }
        set additionalData(value: Map<string, string>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get modelParameters() {
            return pb_1.Message.getField(this, 6) as any as Map<string, dependency_3.google.protobuf.Any>;
        }
        set modelParameters(value: Map<string, dependency_3.google.protobuf.Any>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get toolDefinitions() {
            return pb_1.Message.getRepeatedWrapperField(this, ToolDefinition, 7) as ToolDefinition[];
        }
        set toolDefinitions(value: ToolDefinition[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            credential?: ReturnType<typeof Credential.prototype.toObject>;
            conversations?: ReturnType<typeof dependency_1.Message.prototype.toObject>[];
            additionalData?: {
                [key: string]: string;
            };
            modelParameters?: {
                [key: string]: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            };
            toolDefinitions?: ReturnType<typeof ToolDefinition.prototype.toObject>[];
        }): ChatRequest {
            const message = new ChatRequest({});
            if (data.credential != null) {
                message.credential = Credential.fromObject(data.credential);
            }
            if (data.conversations != null) {
                message.conversations = data.conversations.map(item => dependency_1.Message.fromObject(item));
            }
            if (typeof data.additionalData == "object") {
                message.additionalData = new Map(Object.entries(data.additionalData));
            }
            if (typeof data.modelParameters == "object") {
                message.modelParameters = new Map(Object.entries(data.modelParameters).map(([key, value]) => [key, dependency_3.google.protobuf.Any.fromObject(value)]));
            }
            if (data.toolDefinitions != null) {
                message.toolDefinitions = data.toolDefinitions.map(item => ToolDefinition.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                credential?: ReturnType<typeof Credential.prototype.toObject>;
                conversations?: ReturnType<typeof dependency_1.Message.prototype.toObject>[];
                additionalData?: {
                    [key: string]: string;
                };
                modelParameters?: {
                    [key: string]: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
                };
                toolDefinitions?: ReturnType<typeof ToolDefinition.prototype.toObject>[];
            } = {};
            if (this.credential != null) {
                data.credential = this.credential.toObject();
            }
            if (this.conversations != null) {
                data.conversations = this.conversations.map((item: dependency_1.Message) => item.toObject());
            }
            if (this.additionalData != null) {
                data.additionalData = (Object.fromEntries)(this.additionalData);
            }
            if (this.modelParameters != null) {
                data.modelParameters = (Object.fromEntries)((Array.from)(this.modelParameters).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.toolDefinitions != null) {
                data.toolDefinitions = this.toolDefinitions.map((item: ToolDefinition) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_credential)
                writer.writeMessage(1, this.credential, () => this.credential.serialize(writer));
            if (this.conversations.length)
                writer.writeRepeatedMessage(4, this.conversations, (item: dependency_1.Message) => item.serialize(writer));
            for (const [key, value] of this.additionalData) {
                writer.writeMessage(5, this.additionalData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.modelParameters) {
                writer.writeMessage(6, this.modelParameters, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.toolDefinitions.length)
                writer.writeRepeatedMessage(7, this.toolDefinitions, (item: ToolDefinition) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.credential, () => message.credential = Credential.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.conversations, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.Message.deserialize(reader), dependency_1.Message));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.additionalData as any, reader, reader.readString, reader.readString));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.modelParameters as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_3.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 7:
                        reader.readMessage(message.toolDefinitions, () => pb_1.Message.addToRepeatedWrapperField(message, 7, ToolDefinition.deserialize(reader), ToolDefinition));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatRequest {
            return ChatRequest.deserialize(bytes);
        }
    }
    export class VerifyCredentialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential?: Credential;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
            }
        }
        get credential() {
            return pb_1.Message.getWrapperField(this, Credential, 1) as Credential;
        }
        set credential(value: Credential) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_credential() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            credential?: ReturnType<typeof Credential.prototype.toObject>;
        }): VerifyCredentialRequest {
            const message = new VerifyCredentialRequest({});
            if (data.credential != null) {
                message.credential = Credential.fromObject(data.credential);
            }
            return message;
        }
        toObject() {
            const data: {
                credential?: ReturnType<typeof Credential.prototype.toObject>;
            } = {};
            if (this.credential != null) {
                data.credential = this.credential.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_credential)
                writer.writeMessage(1, this.credential, () => this.credential.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyCredentialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyCredentialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.credential, () => message.credential = Credential.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyCredentialRequest {
            return VerifyCredentialRequest.deserialize(bytes);
        }
    }
    export class VerifyCredentialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
            requestId?: number;
            errorMessage?: string;
        } & (({
            response?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("errorMessage" in data && data.errorMessage != undefined) {
                    this.errorMessage = data.errorMessage;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set requestId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get response() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set response(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get errorMessage() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set errorMessage(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get _response() {
            const cases: {
                [index: number]: "none" | "response";
            } = {
                0: "none",
                4: "response"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            requestId?: number;
            response?: string;
            errorMessage?: string;
        }): VerifyCredentialResponse {
            const message = new VerifyCredentialResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.response != null) {
                message.response = data.response;
            }
            if (data.errorMessage != null) {
                message.errorMessage = data.errorMessage;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                requestId?: number;
                response?: string;
                errorMessage?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.response != null) {
                data.response = this.response;
            }
            if (this.errorMessage != null) {
                data.errorMessage = this.errorMessage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.has_response)
                writer.writeString(4, this.response);
            if (this.errorMessage.length)
                writer.writeString(5, this.errorMessage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyCredentialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyCredentialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        message.response = reader.readString();
                        break;
                    case 5:
                        message.errorMessage = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyCredentialResponse {
            return VerifyCredentialResponse.deserialize(bytes);
        }
    }
    export class Moderation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            value?: string;
        }): Moderation {
            const message = new Moderation({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                value?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Moderation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Moderation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Moderation {
            return Moderation.deserialize(bytes);
        }
    }
    export class GetModerationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            credential?: Credential;
            model?: string;
            version?: string;
            content?: dependency_1.Content;
            additionalData?: Map<string, string>;
            modelParameters?: Map<string, dependency_3.google.protobuf.Any>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("credential" in data && data.credential != undefined) {
                    this.credential = data.credential;
                }
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("additionalData" in data && data.additionalData != undefined) {
                    this.additionalData = data.additionalData;
                }
                if ("modelParameters" in data && data.modelParameters != undefined) {
                    this.modelParameters = data.modelParameters;
                }
            }
            if (!this.additionalData)
                this.additionalData = new Map();
            if (!this.modelParameters)
                this.modelParameters = new Map();
        }
        get credential() {
            return pb_1.Message.getWrapperField(this, Credential, 1) as Credential;
        }
        set credential(value: Credential) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_credential() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get content() {
            return pb_1.Message.getWrapperField(this, dependency_1.Content, 4) as dependency_1.Content;
        }
        set content(value: dependency_1.Content) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_content() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get additionalData() {
            return pb_1.Message.getField(this, 5) as any as Map<string, string>;
        }
        set additionalData(value: Map<string, string>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get modelParameters() {
            return pb_1.Message.getField(this, 6) as any as Map<string, dependency_3.google.protobuf.Any>;
        }
        set modelParameters(value: Map<string, dependency_3.google.protobuf.Any>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        static fromObject(data: {
            credential?: ReturnType<typeof Credential.prototype.toObject>;
            model?: string;
            version?: string;
            content?: ReturnType<typeof dependency_1.Content.prototype.toObject>;
            additionalData?: {
                [key: string]: string;
            };
            modelParameters?: {
                [key: string]: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            };
        }): GetModerationRequest {
            const message = new GetModerationRequest({});
            if (data.credential != null) {
                message.credential = Credential.fromObject(data.credential);
            }
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.content != null) {
                message.content = dependency_1.Content.fromObject(data.content);
            }
            if (typeof data.additionalData == "object") {
                message.additionalData = new Map(Object.entries(data.additionalData));
            }
            if (typeof data.modelParameters == "object") {
                message.modelParameters = new Map(Object.entries(data.modelParameters).map(([key, value]) => [key, dependency_3.google.protobuf.Any.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                credential?: ReturnType<typeof Credential.prototype.toObject>;
                model?: string;
                version?: string;
                content?: ReturnType<typeof dependency_1.Content.prototype.toObject>;
                additionalData?: {
                    [key: string]: string;
                };
                modelParameters?: {
                    [key: string]: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
                };
            } = {};
            if (this.credential != null) {
                data.credential = this.credential.toObject();
            }
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.content != null) {
                data.content = this.content.toObject();
            }
            if (this.additionalData != null) {
                data.additionalData = (Object.fromEntries)(this.additionalData);
            }
            if (this.modelParameters != null) {
                data.modelParameters = (Object.fromEntries)((Array.from)(this.modelParameters).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_credential)
                writer.writeMessage(1, this.credential, () => this.credential.serialize(writer));
            if (this.model.length)
                writer.writeString(2, this.model);
            if (this.version.length)
                writer.writeString(3, this.version);
            if (this.has_content)
                writer.writeMessage(4, this.content, () => this.content.serialize(writer));
            for (const [key, value] of this.additionalData) {
                writer.writeMessage(5, this.additionalData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.modelParameters) {
                writer.writeMessage(6, this.modelParameters, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetModerationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetModerationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.credential, () => message.credential = Credential.deserialize(reader));
                        break;
                    case 2:
                        message.model = reader.readString();
                        break;
                    case 3:
                        message.version = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.content, () => message.content = dependency_1.Content.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.additionalData as any, reader, reader.readString, reader.readString));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.modelParameters as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_3.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetModerationRequest {
            return GetModerationRequest.deserialize(bytes);
        }
    }
    export class GetModerationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            requestId?: number;
            data?: Moderation[];
            error?: dependency_1.Error;
            metrics?: dependency_1.Metric[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set requestId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, Moderation, 4) as Moderation[];
        }
        set data(value: Moderation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_1.Error, 5) as dependency_1.Error;
        }
        set error(value: dependency_1.Error) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Metric, 6) as dependency_1.Metric[];
        }
        set metrics(value: dependency_1.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            requestId?: number;
            data?: ReturnType<typeof Moderation.prototype.toObject>[];
            error?: ReturnType<typeof dependency_1.Error.prototype.toObject>;
            metrics?: ReturnType<typeof dependency_1.Metric.prototype.toObject>[];
        }): GetModerationResponse {
            const message = new GetModerationResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.data != null) {
                message.data = data.data.map(item => Moderation.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_1.Error.fromObject(data.error);
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => dependency_1.Metric.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                requestId?: number;
                data?: ReturnType<typeof Moderation.prototype.toObject>[];
                error?: ReturnType<typeof dependency_1.Error.prototype.toObject>;
                metrics?: ReturnType<typeof dependency_1.Metric.prototype.toObject>[];
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.data != null) {
                data.data = this.data.map((item: Moderation) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: dependency_1.Metric) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.data.length)
                writer.writeRepeatedMessage(4, this.data, (item: Moderation) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(5, this.error, () => this.error.serialize(writer));
            if (this.metrics.length)
                writer.writeRepeatedMessage(6, this.metrics, (item: dependency_1.Metric) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetModerationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetModerationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Moderation.deserialize(reader), Moderation));
                        break;
                    case 5:
                        reader.readMessage(message.error, () => message.error = dependency_1.Error.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.Metric.deserialize(reader), dependency_1.Metric));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetModerationResponse {
            return GetModerationResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedBedrockServiceService {
        static definition = {
            Embedding: {
                path: "/integration_api.BedrockService/Embedding",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmbeddingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmbeddingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EmbeddingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EmbeddingResponse.deserialize(new Uint8Array(bytes))
            },
            Chat: {
                path: "/integration_api.BedrockService/Chat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.BedrockService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Embedding(call: grpc_1.ServerUnaryCall<EmbeddingRequest, EmbeddingResponse>, callback: grpc_1.sendUnaryData<EmbeddingResponse>): void;
        abstract Chat(call: grpc_1.ServerUnaryCall<ChatRequest, ChatResponse>, callback: grpc_1.sendUnaryData<ChatResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class BedrockServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedBedrockServiceService.definition, "BedrockService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Embedding: GrpcUnaryServiceInterface<EmbeddingRequest, EmbeddingResponse> = (message: EmbeddingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, callback?: grpc_1.requestCallback<EmbeddingResponse>): grpc_1.ClientUnaryCall => {
            return super.Embedding(message, metadata, options, callback);
        };
        Chat: GrpcUnaryServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, callback?: grpc_1.requestCallback<ChatResponse>): grpc_1.ClientUnaryCall => {
            return super.Chat(message, metadata, options, callback);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedOpenAiServiceService {
        static definition = {
            Embedding: {
                path: "/integration_api.OpenAiService/Embedding",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmbeddingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmbeddingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EmbeddingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EmbeddingResponse.deserialize(new Uint8Array(bytes))
            },
            Chat: {
                path: "/integration_api.OpenAiService/Chat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            StreamChat: {
                path: "/integration_api.OpenAiService/StreamChat",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.OpenAiService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            GetModeration: {
                path: "/integration_api.OpenAiService/GetModeration",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetModerationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetModerationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetModerationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetModerationResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Embedding(call: grpc_1.ServerUnaryCall<EmbeddingRequest, EmbeddingResponse>, callback: grpc_1.sendUnaryData<EmbeddingResponse>): void;
        abstract Chat(call: grpc_1.ServerUnaryCall<ChatRequest, ChatResponse>, callback: grpc_1.sendUnaryData<ChatResponse>): void;
        abstract StreamChat(call: grpc_1.ServerWritableStream<ChatRequest, ChatResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
        abstract GetModeration(call: grpc_1.ServerUnaryCall<GetModerationRequest, GetModerationResponse>, callback: grpc_1.sendUnaryData<GetModerationResponse>): void;
    }
    export class OpenAiServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedOpenAiServiceService.definition, "OpenAiService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Embedding: GrpcUnaryServiceInterface<EmbeddingRequest, EmbeddingResponse> = (message: EmbeddingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, callback?: grpc_1.requestCallback<EmbeddingResponse>): grpc_1.ClientUnaryCall => {
            return super.Embedding(message, metadata, options, callback);
        };
        Chat: GrpcUnaryServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, callback?: grpc_1.requestCallback<ChatResponse>): grpc_1.ClientUnaryCall => {
            return super.Chat(message, metadata, options, callback);
        };
        StreamChat: GrpcStreamServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ChatResponse> => {
            return super.StreamChat(message, metadata, options);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
        GetModeration: GrpcUnaryServiceInterface<GetModerationRequest, GetModerationResponse> = (message: GetModerationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetModerationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetModerationResponse>, callback?: grpc_1.requestCallback<GetModerationResponse>): grpc_1.ClientUnaryCall => {
            return super.GetModeration(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedAzureServiceService {
        static definition = {
            Embedding: {
                path: "/integration_api.AzureService/Embedding",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmbeddingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmbeddingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EmbeddingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EmbeddingResponse.deserialize(new Uint8Array(bytes))
            },
            Chat: {
                path: "/integration_api.AzureService/Chat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            StreamChat: {
                path: "/integration_api.AzureService/StreamChat",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.AzureService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            },
            GetModeration: {
                path: "/integration_api.AzureService/GetModeration",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetModerationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetModerationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetModerationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetModerationResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Embedding(call: grpc_1.ServerUnaryCall<EmbeddingRequest, EmbeddingResponse>, callback: grpc_1.sendUnaryData<EmbeddingResponse>): void;
        abstract Chat(call: grpc_1.ServerUnaryCall<ChatRequest, ChatResponse>, callback: grpc_1.sendUnaryData<ChatResponse>): void;
        abstract StreamChat(call: grpc_1.ServerWritableStream<ChatRequest, ChatResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
        abstract GetModeration(call: grpc_1.ServerUnaryCall<GetModerationRequest, GetModerationResponse>, callback: grpc_1.sendUnaryData<GetModerationResponse>): void;
    }
    export class AzureServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAzureServiceService.definition, "AzureService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Embedding: GrpcUnaryServiceInterface<EmbeddingRequest, EmbeddingResponse> = (message: EmbeddingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, callback?: grpc_1.requestCallback<EmbeddingResponse>): grpc_1.ClientUnaryCall => {
            return super.Embedding(message, metadata, options, callback);
        };
        Chat: GrpcUnaryServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, callback?: grpc_1.requestCallback<ChatResponse>): grpc_1.ClientUnaryCall => {
            return super.Chat(message, metadata, options, callback);
        };
        StreamChat: GrpcStreamServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ChatResponse> => {
            return super.StreamChat(message, metadata, options);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
        GetModeration: GrpcUnaryServiceInterface<GetModerationRequest, GetModerationResponse> = (message: GetModerationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetModerationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetModerationResponse>, callback?: grpc_1.requestCallback<GetModerationResponse>): grpc_1.ClientUnaryCall => {
            return super.GetModeration(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedGoogleServiceService {
        static definition = {
            Embedding: {
                path: "/integration_api.GoogleService/Embedding",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmbeddingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmbeddingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EmbeddingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EmbeddingResponse.deserialize(new Uint8Array(bytes))
            },
            Chat: {
                path: "/integration_api.GoogleService/Chat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            StreamChat: {
                path: "/integration_api.GoogleService/StreamChat",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.GoogleService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Embedding(call: grpc_1.ServerUnaryCall<EmbeddingRequest, EmbeddingResponse>, callback: grpc_1.sendUnaryData<EmbeddingResponse>): void;
        abstract Chat(call: grpc_1.ServerUnaryCall<ChatRequest, ChatResponse>, callback: grpc_1.sendUnaryData<ChatResponse>): void;
        abstract StreamChat(call: grpc_1.ServerWritableStream<ChatRequest, ChatResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class GoogleServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGoogleServiceService.definition, "GoogleService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Embedding: GrpcUnaryServiceInterface<EmbeddingRequest, EmbeddingResponse> = (message: EmbeddingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, callback?: grpc_1.requestCallback<EmbeddingResponse>): grpc_1.ClientUnaryCall => {
            return super.Embedding(message, metadata, options, callback);
        };
        Chat: GrpcUnaryServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, callback?: grpc_1.requestCallback<ChatResponse>): grpc_1.ClientUnaryCall => {
            return super.Chat(message, metadata, options, callback);
        };
        StreamChat: GrpcStreamServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ChatResponse> => {
            return super.StreamChat(message, metadata, options);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedReplicateServiceService {
        static definition = {
            Chat: {
                path: "/integration_api.ReplicateService/Chat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            StreamChat: {
                path: "/integration_api.ReplicateService/StreamChat",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.ReplicateService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Chat(call: grpc_1.ServerUnaryCall<ChatRequest, ChatResponse>, callback: grpc_1.sendUnaryData<ChatResponse>): void;
        abstract StreamChat(call: grpc_1.ServerWritableStream<ChatRequest, ChatResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class ReplicateServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedReplicateServiceService.definition, "ReplicateService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Chat: GrpcUnaryServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, callback?: grpc_1.requestCallback<ChatResponse>): grpc_1.ClientUnaryCall => {
            return super.Chat(message, metadata, options, callback);
        };
        StreamChat: GrpcStreamServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ChatResponse> => {
            return super.StreamChat(message, metadata, options);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedAnthropicServiceService {
        static definition = {
            Chat: {
                path: "/integration_api.AnthropicService/Chat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            StreamChat: {
                path: "/integration_api.AnthropicService/StreamChat",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.AnthropicService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Chat(call: grpc_1.ServerUnaryCall<ChatRequest, ChatResponse>, callback: grpc_1.sendUnaryData<ChatResponse>): void;
        abstract StreamChat(call: grpc_1.ServerWritableStream<ChatRequest, ChatResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class AnthropicServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAnthropicServiceService.definition, "AnthropicService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Chat: GrpcUnaryServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, callback?: grpc_1.requestCallback<ChatResponse>): grpc_1.ClientUnaryCall => {
            return super.Chat(message, metadata, options, callback);
        };
        StreamChat: GrpcStreamServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ChatResponse> => {
            return super.StreamChat(message, metadata, options);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedCohereServiceService {
        static definition = {
            Embedding: {
                path: "/integration_api.CohereService/Embedding",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmbeddingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmbeddingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EmbeddingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EmbeddingResponse.deserialize(new Uint8Array(bytes))
            },
            Reranking: {
                path: "/integration_api.CohereService/Reranking",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RerankingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RerankingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RerankingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RerankingResponse.deserialize(new Uint8Array(bytes))
            },
            Chat: {
                path: "/integration_api.CohereService/Chat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            StreamChat: {
                path: "/integration_api.CohereService/StreamChat",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.CohereService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Embedding(call: grpc_1.ServerUnaryCall<EmbeddingRequest, EmbeddingResponse>, callback: grpc_1.sendUnaryData<EmbeddingResponse>): void;
        abstract Reranking(call: grpc_1.ServerUnaryCall<RerankingRequest, RerankingResponse>, callback: grpc_1.sendUnaryData<RerankingResponse>): void;
        abstract Chat(call: grpc_1.ServerUnaryCall<ChatRequest, ChatResponse>, callback: grpc_1.sendUnaryData<ChatResponse>): void;
        abstract StreamChat(call: grpc_1.ServerWritableStream<ChatRequest, ChatResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class CohereServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCohereServiceService.definition, "CohereService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Embedding: GrpcUnaryServiceInterface<EmbeddingRequest, EmbeddingResponse> = (message: EmbeddingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, callback?: grpc_1.requestCallback<EmbeddingResponse>): grpc_1.ClientUnaryCall => {
            return super.Embedding(message, metadata, options, callback);
        };
        Reranking: GrpcUnaryServiceInterface<RerankingRequest, RerankingResponse> = (message: RerankingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RerankingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RerankingResponse>, callback?: grpc_1.requestCallback<RerankingResponse>): grpc_1.ClientUnaryCall => {
            return super.Reranking(message, metadata, options, callback);
        };
        Chat: GrpcUnaryServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, callback?: grpc_1.requestCallback<ChatResponse>): grpc_1.ClientUnaryCall => {
            return super.Chat(message, metadata, options, callback);
        };
        StreamChat: GrpcStreamServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ChatResponse> => {
            return super.StreamChat(message, metadata, options);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedHuggingfaceServiceService {
        static definition = {
            Chat: {
                path: "/integration_api.HuggingfaceService/Chat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.HuggingfaceService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Chat(call: grpc_1.ServerUnaryCall<ChatRequest, ChatResponse>, callback: grpc_1.sendUnaryData<ChatResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class HuggingfaceServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedHuggingfaceServiceService.definition, "HuggingfaceService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Chat: GrpcUnaryServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, callback?: grpc_1.requestCallback<ChatResponse>): grpc_1.ClientUnaryCall => {
            return super.Chat(message, metadata, options, callback);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedMistralServiceService {
        static definition = {
            Chat: {
                path: "/integration_api.MistralService/Chat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            StreamChat: {
                path: "/integration_api.MistralService/StreamChat",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.MistralService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Chat(call: grpc_1.ServerUnaryCall<ChatRequest, ChatResponse>, callback: grpc_1.sendUnaryData<ChatResponse>): void;
        abstract StreamChat(call: grpc_1.ServerWritableStream<ChatRequest, ChatResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class MistralServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMistralServiceService.definition, "MistralService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Chat: GrpcUnaryServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, callback?: grpc_1.requestCallback<ChatResponse>): grpc_1.ClientUnaryCall => {
            return super.Chat(message, metadata, options, callback);
        };
        StreamChat: GrpcStreamServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ChatResponse> => {
            return super.StreamChat(message, metadata, options);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedStabilityAiServiceService {
        static definition = {
            VerifyCredential: {
                path: "/integration_api.StabilityAiService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class StabilityAiServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedStabilityAiServiceService.definition, "StabilityAiService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedTogetherAiServiceService {
        static definition = {
            Chat: {
                path: "/integration_api.TogetherAiService/Chat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.TogetherAiService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Chat(call: grpc_1.ServerUnaryCall<ChatRequest, ChatResponse>, callback: grpc_1.sendUnaryData<ChatResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class TogetherAiServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTogetherAiServiceService.definition, "TogetherAiService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Chat: GrpcUnaryServiceInterface<ChatRequest, ChatResponse> = (message: ChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatResponse>, callback?: grpc_1.requestCallback<ChatResponse>): grpc_1.ClientUnaryCall => {
            return super.Chat(message, metadata, options, callback);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedDeepInfraServiceService {
        static definition = {
            VerifyCredential: {
                path: "/integration_api.DeepInfraService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class DeepInfraServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedDeepInfraServiceService.definition, "DeepInfraService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedVoyageAiServiceService {
        static definition = {
            Embedding: {
                path: "/integration_api.VoyageAiService/Embedding",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmbeddingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmbeddingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EmbeddingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EmbeddingResponse.deserialize(new Uint8Array(bytes))
            },
            Reranking: {
                path: "/integration_api.VoyageAiService/Reranking",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RerankingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RerankingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RerankingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RerankingResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCredential: {
                path: "/integration_api.VoyageAiService/VerifyCredential",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCredentialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCredentialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCredentialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCredentialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Embedding(call: grpc_1.ServerUnaryCall<EmbeddingRequest, EmbeddingResponse>, callback: grpc_1.sendUnaryData<EmbeddingResponse>): void;
        abstract Reranking(call: grpc_1.ServerUnaryCall<RerankingRequest, RerankingResponse>, callback: grpc_1.sendUnaryData<RerankingResponse>): void;
        abstract VerifyCredential(call: grpc_1.ServerUnaryCall<VerifyCredentialRequest, VerifyCredentialResponse>, callback: grpc_1.sendUnaryData<VerifyCredentialResponse>): void;
    }
    export class VoyageAiServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedVoyageAiServiceService.definition, "VoyageAiService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Embedding: GrpcUnaryServiceInterface<EmbeddingRequest, EmbeddingResponse> = (message: EmbeddingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EmbeddingResponse>, callback?: grpc_1.requestCallback<EmbeddingResponse>): grpc_1.ClientUnaryCall => {
            return super.Embedding(message, metadata, options, callback);
        };
        Reranking: GrpcUnaryServiceInterface<RerankingRequest, RerankingResponse> = (message: RerankingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RerankingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RerankingResponse>, callback?: grpc_1.requestCallback<RerankingResponse>): grpc_1.ClientUnaryCall => {
            return super.Reranking(message, metadata, options, callback);
        };
        VerifyCredential: GrpcUnaryServiceInterface<VerifyCredentialRequest, VerifyCredentialResponse> = (message: VerifyCredentialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCredentialResponse>, callback?: grpc_1.requestCallback<VerifyCredentialResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCredential(message, metadata, options, callback);
        };
    }
}
