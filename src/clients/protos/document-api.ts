/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: document-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace document_api {
    export class IndexKnowledgeDocumentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            knowledgeId?: string;
            knowledgeDocumentId?: string[];
            indexType?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("knowledgeDocumentId" in data && data.knowledgeDocumentId != undefined) {
                    this.knowledgeDocumentId = data.knowledgeDocumentId;
                }
                if ("indexType" in data && data.indexType != undefined) {
                    this.indexType = data.indexType;
                }
            }
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get knowledgeDocumentId() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set knowledgeDocumentId(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get indexType() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set indexType(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            knowledgeId?: string;
            knowledgeDocumentId?: string[];
            indexType?: string;
        }): IndexKnowledgeDocumentRequest {
            const message = new IndexKnowledgeDocumentRequest({});
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.knowledgeDocumentId != null) {
                message.knowledgeDocumentId = data.knowledgeDocumentId;
            }
            if (data.indexType != null) {
                message.indexType = data.indexType;
            }
            return message;
        }
        toObject() {
            const data: {
                knowledgeId?: string;
                knowledgeDocumentId?: string[];
                indexType?: string;
            } = {};
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.knowledgeDocumentId != null) {
                data.knowledgeDocumentId = this.knowledgeDocumentId;
            }
            if (this.indexType != null) {
                data.indexType = this.indexType;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.knowledgeId != "0")
                writer.writeUint64String(1, this.knowledgeId);
            if (this.knowledgeDocumentId.length)
                writer.writePackedUint64String(2, this.knowledgeDocumentId);
            if (this.indexType.length)
                writer.writeString(3, this.indexType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexKnowledgeDocumentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexKnowledgeDocumentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 2:
                        message.knowledgeDocumentId = reader.readPackedUint64String();
                        break;
                    case 3:
                        message.indexType = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexKnowledgeDocumentRequest {
            return IndexKnowledgeDocumentRequest.deserialize(bytes);
        }
    }
    export class IndexKnowledgeDocumentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
        }): IndexKnowledgeDocumentResponse {
            const message = new IndexKnowledgeDocumentResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexKnowledgeDocumentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexKnowledgeDocumentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexKnowledgeDocumentResponse {
            return IndexKnowledgeDocumentResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDocumentServiceService {
        static definition = {
            IndexKnowledgeDocument: {
                path: "/document_api.DocumentService/IndexKnowledgeDocument",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IndexKnowledgeDocumentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IndexKnowledgeDocumentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: IndexKnowledgeDocumentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => IndexKnowledgeDocumentResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract IndexKnowledgeDocument(call: grpc_1.ServerUnaryCall<IndexKnowledgeDocumentRequest, IndexKnowledgeDocumentResponse>, callback: grpc_1.sendUnaryData<IndexKnowledgeDocumentResponse>): void;
    }
    export class DocumentServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedDocumentServiceService.definition, "DocumentService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        IndexKnowledgeDocument: GrpcUnaryServiceInterface<IndexKnowledgeDocumentRequest, IndexKnowledgeDocumentResponse> = (message: IndexKnowledgeDocumentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<IndexKnowledgeDocumentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<IndexKnowledgeDocumentResponse>, callback?: grpc_1.requestCallback<IndexKnowledgeDocumentResponse>): grpc_1.ClientUnaryCall => {
            return super.IndexKnowledgeDocument(message, metadata, options, callback);
        };
    }
}
