/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./google/protobuf/struct";
import * as pb_1 from "google-protobuf";
export enum Source {
    WEB_PLUGIN = 0,
    DEBUGGER = 1,
    SDK = 2,
    PHONE_CALL = 3,
    WHATSAPP = 4
}
export class FieldSelector extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        field?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("field" in data && data.field != undefined) {
                this.field = data.field;
            }
        }
    }
    get field() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set field(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        field?: string;
    }): FieldSelector {
        const message = new FieldSelector({});
        if (data.field != null) {
            message.field = data.field;
        }
        return message;
    }
    toObject() {
        const data: {
            field?: string;
        } = {};
        if (this.field != null) {
            data.field = this.field;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.field.length)
            writer.writeString(1, this.field);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldSelector {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldSelector();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.field = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FieldSelector {
        return FieldSelector.deserialize(bytes);
    }
}
export class Criteria extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        key?: string;
        value?: string;
        logic?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
            if ("logic" in data && data.logic != undefined) {
                this.logic = data.logic;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get logic() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set logic(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        key?: string;
        value?: string;
        logic?: string;
    }): Criteria {
        const message = new Criteria({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        if (data.logic != null) {
            message.logic = data.logic;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: string;
            value?: string;
            logic?: string;
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        if (this.logic != null) {
            data.logic = this.logic;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.key.length)
            writer.writeString(1, this.key);
        if (this.value.length)
            writer.writeString(2, this.value);
        if (this.logic.length)
            writer.writeString(3, this.logic);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Criteria {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Criteria();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readString();
                    break;
                case 2:
                    message.value = reader.readString();
                    break;
                case 3:
                    message.logic = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Criteria {
        return Criteria.deserialize(bytes);
    }
}
export class Error extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errorCode?: string;
        errorMessage?: string;
        humanMessage?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errorCode" in data && data.errorCode != undefined) {
                this.errorCode = data.errorCode;
            }
            if ("errorMessage" in data && data.errorMessage != undefined) {
                this.errorMessage = data.errorMessage;
            }
            if ("humanMessage" in data && data.humanMessage != undefined) {
                this.humanMessage = data.humanMessage;
            }
        }
    }
    get errorCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set errorCode(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get errorMessage() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set errorMessage(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get humanMessage() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set humanMessage(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        errorCode?: string;
        errorMessage?: string;
        humanMessage?: string;
    }): Error {
        const message = new Error({});
        if (data.errorCode != null) {
            message.errorCode = data.errorCode;
        }
        if (data.errorMessage != null) {
            message.errorMessage = data.errorMessage;
        }
        if (data.humanMessage != null) {
            message.humanMessage = data.humanMessage;
        }
        return message;
    }
    toObject() {
        const data: {
            errorCode?: string;
            errorMessage?: string;
            humanMessage?: string;
        } = {};
        if (this.errorCode != null) {
            data.errorCode = this.errorCode;
        }
        if (this.errorMessage != null) {
            data.errorMessage = this.errorMessage;
        }
        if (this.humanMessage != null) {
            data.humanMessage = this.humanMessage;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errorCode != "0")
            writer.writeUint64String(1, this.errorCode);
        if (this.errorMessage.length)
            writer.writeString(2, this.errorMessage);
        if (this.humanMessage.length)
            writer.writeString(3, this.humanMessage);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Error {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Error();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errorCode = reader.readUint64String();
                    break;
                case 2:
                    message.errorMessage = reader.readString();
                    break;
                case 3:
                    message.humanMessage = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Error {
        return Error.deserialize(bytes);
    }
}
export class Paginate extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        page?: number;
        pageSize?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("page" in data && data.page != undefined) {
                this.page = data.page;
            }
            if ("pageSize" in data && data.pageSize != undefined) {
                this.pageSize = data.pageSize;
            }
        }
    }
    get page() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set page(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get pageSize() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set pageSize(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        page?: number;
        pageSize?: number;
    }): Paginate {
        const message = new Paginate({});
        if (data.page != null) {
            message.page = data.page;
        }
        if (data.pageSize != null) {
            message.pageSize = data.pageSize;
        }
        return message;
    }
    toObject() {
        const data: {
            page?: number;
            pageSize?: number;
        } = {};
        if (this.page != null) {
            data.page = this.page;
        }
        if (this.pageSize != null) {
            data.pageSize = this.pageSize;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.page != 0)
            writer.writeUint32(1, this.page);
        if (this.pageSize != 0)
            writer.writeUint32(2, this.pageSize);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Paginate {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Paginate();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.page = reader.readUint32();
                    break;
                case 2:
                    message.pageSize = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Paginate {
        return Paginate.deserialize(bytes);
    }
}
export class Paginated extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        currentPage?: number;
        totalItem?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("currentPage" in data && data.currentPage != undefined) {
                this.currentPage = data.currentPage;
            }
            if ("totalItem" in data && data.totalItem != undefined) {
                this.totalItem = data.totalItem;
            }
        }
    }
    get currentPage() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set currentPage(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get totalItem() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set totalItem(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        currentPage?: number;
        totalItem?: number;
    }): Paginated {
        const message = new Paginated({});
        if (data.currentPage != null) {
            message.currentPage = data.currentPage;
        }
        if (data.totalItem != null) {
            message.totalItem = data.totalItem;
        }
        return message;
    }
    toObject() {
        const data: {
            currentPage?: number;
            totalItem?: number;
        } = {};
        if (this.currentPage != null) {
            data.currentPage = this.currentPage;
        }
        if (this.totalItem != null) {
            data.totalItem = this.totalItem;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.currentPage != 0)
            writer.writeUint32(1, this.currentPage);
        if (this.totalItem != 0)
            writer.writeUint32(2, this.totalItem);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Paginated {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Paginated();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.currentPage = reader.readUint32();
                    break;
                case 2:
                    message.totalItem = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Paginated {
        return Paginated.deserialize(bytes);
    }
}
export class Ordering extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        column?: string;
        order?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("column" in data && data.column != undefined) {
                this.column = data.column;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
        }
    }
    get column() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set column(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get order() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set order(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        column?: string;
        order?: string;
    }): Ordering {
        const message = new Ordering({});
        if (data.column != null) {
            message.column = data.column;
        }
        if (data.order != null) {
            message.order = data.order;
        }
        return message;
    }
    toObject() {
        const data: {
            column?: string;
            order?: string;
        } = {};
        if (this.column != null) {
            data.column = this.column;
        }
        if (this.order != null) {
            data.order = this.order;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.column.length)
            writer.writeString(1, this.column);
        if (this.order.length)
            writer.writeString(2, this.order);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ordering {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ordering();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.column = reader.readString();
                    break;
                case 2:
                    message.order = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Ordering {
        return Ordering.deserialize(bytes);
    }
}
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        email?: string;
        role?: string;
        createdDate?: dependency_1.google.protobuf.Timestamp;
        status?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
            if ("createdDate" in data && data.createdDate != undefined) {
                this.createdDate = data.createdDate;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get createdDate() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
    }
    set createdDate(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_createdDate() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        email?: string;
        role?: string;
        createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        status?: string;
    }): User {
        const message = new User({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.role != null) {
            message.role = data.role;
        }
        if (data.createdDate != null) {
            message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
        }
        if (data.status != null) {
            message.status = data.status;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            email?: string;
            role?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            status?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.role != null) {
            data.role = this.role;
        }
        if (this.createdDate != null) {
            data.createdDate = this.createdDate.toObject();
        }
        if (this.status != null) {
            data.status = this.status;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.email.length)
            writer.writeString(3, this.email);
        if (this.role.length)
            writer.writeString(4, this.role);
        if (this.has_createdDate)
            writer.writeMessage(6, this.createdDate, () => this.createdDate.serialize(writer));
        if (this.status.length)
            writer.writeString(5, this.status);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.email = reader.readString();
                    break;
                case 4:
                    message.role = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 5:
                    message.status = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
export class BaseResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        success?: boolean;
        data?: Map<string, string>;
        error?: Error;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
        if (!this.data)
            this.data = new Map();
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getField(this, 3) as any as Map<string, string>;
    }
    set data(value: Map<string, string>) {
        pb_1.Message.setField(this, 3, value as any);
    }
    get error() {
        return pb_1.Message.getWrapperField(this, Error, 4) as Error;
    }
    set error(value: Error) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_error() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        code?: number;
        success?: boolean;
        data?: {
            [key: string]: string;
        };
        error?: ReturnType<typeof Error.prototype.toObject>;
    }): BaseResponse {
        const message = new BaseResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.success != null) {
            message.success = data.success;
        }
        if (typeof data.data == "object") {
            message.data = new Map(Object.entries(data.data));
        }
        if (data.error != null) {
            message.error = Error.fromObject(data.error);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            success?: boolean;
            data?: {
                [key: string]: string;
            };
            error?: ReturnType<typeof Error.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.data != null) {
            data.data = (Object.fromEntries)(this.data);
        }
        if (this.error != null) {
            data.error = this.error.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.success != false)
            writer.writeBool(2, this.success);
        for (const [key, value] of this.data) {
            writer.writeMessage(3, this.data, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (this.has_error)
            writer.writeMessage(4, this.error, () => this.error.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BaseResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BaseResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.success = reader.readBool();
                    break;
                case 3:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.data as any, reader, reader.readString, reader.readString));
                    break;
                case 4:
                    reader.readMessage(message.error, () => message.error = Error.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BaseResponse {
        return BaseResponse.deserialize(bytes);
    }
}
export class Metadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        key?: string;
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: string;
        key?: string;
        value?: string;
    }): Metadata {
        const message = new Metadata({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            key?: string;
            value?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.key.length)
            writer.writeString(2, this.key);
        if (this.value.length)
            writer.writeString(3, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metadata {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 2:
                    message.key = reader.readString();
                    break;
                case 3:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Metadata {
        return Metadata.deserialize(bytes);
    }
}
export class Argument extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        value?: string;
    }): Argument {
        const message = new Argument({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            value?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.value.length)
            writer.writeString(3, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Argument {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Argument();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Argument {
        return Argument.deserialize(bytes);
    }
}
export class Variable extends pb_1.Message {
    #one_of_decls: number[][] = [[4]];
    constructor(data?: any[] | ({
        id?: string;
        name?: string;
        type?: string;
    } & (({
        defaultValue?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("defaultValue" in data && data.defaultValue != undefined) {
                this.defaultValue = data.defaultValue;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get defaultValue() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set defaultValue(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_defaultValue() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get _defaultValue() {
        const cases: {
            [index: number]: "none" | "defaultValue";
        } = {
            0: "none",
            4: "defaultValue"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        type?: string;
        defaultValue?: string;
    }): Variable {
        const message = new Variable({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.defaultValue != null) {
            message.defaultValue = data.defaultValue;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            type?: string;
            defaultValue?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.defaultValue != null) {
            data.defaultValue = this.defaultValue;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.type.length)
            writer.writeString(3, this.type);
        if (this.has_defaultValue)
            writer.writeString(4, this.defaultValue);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Variable {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Variable();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.type = reader.readString();
                    break;
                case 4:
                    message.defaultValue = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Variable {
        return Variable.deserialize(bytes);
    }
}
export class Provider extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        description?: string;
        humanName?: string;
        image?: string;
        website?: string;
        status?: string;
        connectConfiguration?: Variable[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("humanName" in data && data.humanName != undefined) {
                this.humanName = data.humanName;
            }
            if ("image" in data && data.image != undefined) {
                this.image = data.image;
            }
            if ("website" in data && data.website != undefined) {
                this.website = data.website;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("connectConfiguration" in data && data.connectConfiguration != undefined) {
                this.connectConfiguration = data.connectConfiguration;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get humanName() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set humanName(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get image() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set image(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get website() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set website(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get connectConfiguration() {
        return pb_1.Message.getRepeatedWrapperField(this, Variable, 9) as Variable[];
    }
    set connectConfiguration(value: Variable[]) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        description?: string;
        humanName?: string;
        image?: string;
        website?: string;
        status?: string;
        connectConfiguration?: ReturnType<typeof Variable.prototype.toObject>[];
    }): Provider {
        const message = new Provider({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.humanName != null) {
            message.humanName = data.humanName;
        }
        if (data.image != null) {
            message.image = data.image;
        }
        if (data.website != null) {
            message.website = data.website;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.connectConfiguration != null) {
            message.connectConfiguration = data.connectConfiguration.map(item => Variable.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            description?: string;
            humanName?: string;
            image?: string;
            website?: string;
            status?: string;
            connectConfiguration?: ReturnType<typeof Variable.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.humanName != null) {
            data.humanName = this.humanName;
        }
        if (this.image != null) {
            data.image = this.image;
        }
        if (this.website != null) {
            data.website = this.website;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.connectConfiguration != null) {
            data.connectConfiguration = this.connectConfiguration.map((item: Variable) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (this.humanName.length)
            writer.writeString(4, this.humanName);
        if (this.image.length)
            writer.writeString(5, this.image);
        if (this.website.length)
            writer.writeString(6, this.website);
        if (this.status.length)
            writer.writeString(7, this.status);
        if (this.connectConfiguration.length)
            writer.writeRepeatedMessage(9, this.connectConfiguration, (item: Variable) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Provider {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Provider();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 4:
                    message.humanName = reader.readString();
                    break;
                case 5:
                    message.image = reader.readString();
                    break;
                case 6:
                    message.website = reader.readString();
                    break;
                case 7:
                    message.status = reader.readString();
                    break;
                case 9:
                    reader.readMessage(message.connectConfiguration, () => pb_1.Message.addToRepeatedWrapperField(message, 9, Variable.deserialize(reader), Variable));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Provider {
        return Provider.deserialize(bytes);
    }
}
export class Tag extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        tag?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("tag" in data && data.tag != undefined) {
                this.tag = data.tag;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get tag() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set tag(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: string;
        tag?: string[];
    }): Tag {
        const message = new Tag({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.tag != null) {
            message.tag = data.tag;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            tag?: string[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.tag != null) {
            data.tag = this.tag;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.tag.length)
            writer.writeRepeatedString(2, this.tag);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tag {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tag();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Tag {
        return Tag.deserialize(bytes);
    }
}
export class Organization extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        description?: string;
        industry?: string;
        contact?: string;
        size?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("industry" in data && data.industry != undefined) {
                this.industry = data.industry;
            }
            if ("contact" in data && data.contact != undefined) {
                this.contact = data.contact;
            }
            if ("size" in data && data.size != undefined) {
                this.size = data.size;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get industry() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set industry(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get contact() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set contact(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get size() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set size(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        description?: string;
        industry?: string;
        contact?: string;
        size?: string;
    }): Organization {
        const message = new Organization({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.industry != null) {
            message.industry = data.industry;
        }
        if (data.contact != null) {
            message.contact = data.contact;
        }
        if (data.size != null) {
            message.size = data.size;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            description?: string;
            industry?: string;
            contact?: string;
            size?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.industry != null) {
            data.industry = this.industry;
        }
        if (this.contact != null) {
            data.contact = this.contact;
        }
        if (this.size != null) {
            data.size = this.size;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (this.industry.length)
            writer.writeString(4, this.industry);
        if (this.contact.length)
            writer.writeString(5, this.contact);
        if (this.size.length)
            writer.writeString(6, this.size);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Organization {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Organization();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 4:
                    message.industry = reader.readString();
                    break;
                case 5:
                    message.contact = reader.readString();
                    break;
                case 6:
                    message.size = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Organization {
        return Organization.deserialize(bytes);
    }
}
export class Metric extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        value?: string;
        description?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        name?: string;
        value?: string;
        description?: string;
    }): Metric {
        const message = new Metric({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            value?: string;
            description?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.value.length)
            writer.writeString(2, this.value);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metric {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metric();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.value = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Metric {
        return Metric.deserialize(bytes);
    }
}
export class Content extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        contentType?: string;
        contentFormat?: string;
        content?: Uint8Array;
        meta?: dependency_2.google.protobuf.Struct;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("contentType" in data && data.contentType != undefined) {
                this.contentType = data.contentType;
            }
            if ("contentFormat" in data && data.contentFormat != undefined) {
                this.contentFormat = data.contentFormat;
            }
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
            if ("meta" in data && data.meta != undefined) {
                this.meta = data.meta;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get contentType() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set contentType(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get contentFormat() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set contentFormat(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get content() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
    }
    set content(value: Uint8Array) {
        pb_1.Message.setField(this, 4, value);
    }
    get meta() {
        return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 5) as dependency_2.google.protobuf.Struct;
    }
    set meta(value: dependency_2.google.protobuf.Struct) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_meta() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        name?: string;
        contentType?: string;
        contentFormat?: string;
        content?: Uint8Array;
        meta?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
    }): Content {
        const message = new Content({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.contentType != null) {
            message.contentType = data.contentType;
        }
        if (data.contentFormat != null) {
            message.contentFormat = data.contentFormat;
        }
        if (data.content != null) {
            message.content = data.content;
        }
        if (data.meta != null) {
            message.meta = dependency_2.google.protobuf.Struct.fromObject(data.meta);
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            contentType?: string;
            contentFormat?: string;
            content?: Uint8Array;
            meta?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.contentType != null) {
            data.contentType = this.contentType;
        }
        if (this.contentFormat != null) {
            data.contentFormat = this.contentFormat;
        }
        if (this.content != null) {
            data.content = this.content;
        }
        if (this.meta != null) {
            data.meta = this.meta.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.contentType.length)
            writer.writeString(2, this.contentType);
        if (this.contentFormat.length)
            writer.writeString(3, this.contentFormat);
        if (this.content.length)
            writer.writeBytes(4, this.content);
        if (this.has_meta)
            writer.writeMessage(5, this.meta, () => this.meta.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Content {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Content();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.contentType = reader.readString();
                    break;
                case 3:
                    message.contentFormat = reader.readString();
                    break;
                case 4:
                    message.content = reader.readBytes();
                    break;
                case 5:
                    reader.readMessage(message.meta, () => message.meta = dependency_2.google.protobuf.Struct.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Content {
        return Content.deserialize(bytes);
    }
}
export class Message extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        role?: string;
        contents?: Content[];
        toolCalls?: ToolCall[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
            if ("contents" in data && data.contents != undefined) {
                this.contents = data.contents;
            }
            if ("toolCalls" in data && data.toolCalls != undefined) {
                this.toolCalls = data.toolCalls;
            }
        }
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get contents() {
        return pb_1.Message.getRepeatedWrapperField(this, Content, 2) as Content[];
    }
    set contents(value: Content[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get toolCalls() {
        return pb_1.Message.getRepeatedWrapperField(this, ToolCall, 3) as ToolCall[];
    }
    set toolCalls(value: ToolCall[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        role?: string;
        contents?: ReturnType<typeof Content.prototype.toObject>[];
        toolCalls?: ReturnType<typeof ToolCall.prototype.toObject>[];
    }): Message {
        const message = new Message({});
        if (data.role != null) {
            message.role = data.role;
        }
        if (data.contents != null) {
            message.contents = data.contents.map(item => Content.fromObject(item));
        }
        if (data.toolCalls != null) {
            message.toolCalls = data.toolCalls.map(item => ToolCall.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            role?: string;
            contents?: ReturnType<typeof Content.prototype.toObject>[];
            toolCalls?: ReturnType<typeof ToolCall.prototype.toObject>[];
        } = {};
        if (this.role != null) {
            data.role = this.role;
        }
        if (this.contents != null) {
            data.contents = this.contents.map((item: Content) => item.toObject());
        }
        if (this.toolCalls != null) {
            data.toolCalls = this.toolCalls.map((item: ToolCall) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.role.length)
            writer.writeString(1, this.role);
        if (this.contents.length)
            writer.writeRepeatedMessage(2, this.contents, (item: Content) => item.serialize(writer));
        if (this.toolCalls.length)
            writer.writeRepeatedMessage(3, this.toolCalls, (item: ToolCall) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.role = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.contents, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Content.deserialize(reader), Content));
                    break;
                case 3:
                    reader.readMessage(message.toolCalls, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ToolCall.deserialize(reader), ToolCall));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Message {
        return Message.deserialize(bytes);
    }
}
export class ToolCall extends pb_1.Message {
    #one_of_decls: number[][] = [[3]];
    constructor(data?: any[] | ({
        id?: string;
        type?: string;
    } & (({
        function?: FunctionCall;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("function" in data && data.function != undefined) {
                this.function = data.function;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get function() {
        return pb_1.Message.getWrapperField(this, FunctionCall, 3) as FunctionCall;
    }
    set function(value: FunctionCall) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_function() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _function() {
        const cases: {
            [index: number]: "none" | "function";
        } = {
            0: "none",
            3: "function"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        id?: string;
        type?: string;
        function?: ReturnType<typeof FunctionCall.prototype.toObject>;
    }): ToolCall {
        const message = new ToolCall({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.function != null) {
            message.function = FunctionCall.fromObject(data.function);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            type?: string;
            function?: ReturnType<typeof FunctionCall.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.function != null) {
            data.function = this.function.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.type.length)
            writer.writeString(2, this.type);
        if (this.has_function)
            writer.writeMessage(3, this.function, () => this.function.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolCall {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolCall();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.type = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.function, () => message.function = FunctionCall.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ToolCall {
        return ToolCall.deserialize(bytes);
    }
}
export class FunctionCall extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        arguments?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("arguments" in data && data.arguments != undefined) {
                this.arguments = data.arguments;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get arguments() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set arguments(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        name?: string;
        arguments?: string;
    }): FunctionCall {
        const message = new FunctionCall({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.arguments != null) {
            message.arguments = data.arguments;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            arguments?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.arguments != null) {
            data.arguments = this.arguments;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.arguments.length)
            writer.writeString(2, this.arguments);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FunctionCall {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FunctionCall();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.arguments = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FunctionCall {
        return FunctionCall.deserialize(bytes);
    }
}
export class Knowledge extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        description?: string;
        visibility?: string;
        language?: string;
        embeddingModelProviderId?: string;
        embeddingModelProviderName?: string;
        knowledgeEmbeddingModelOptions?: Metadata[];
        status?: string;
        createdBy?: string;
        createdUser?: User;
        updatedBy?: string;
        updatedUser?: User;
        createdDate?: dependency_1.google.protobuf.Timestamp;
        updatedDate?: dependency_1.google.protobuf.Timestamp;
        organizationId?: string;
        projectId?: string;
        organization?: Organization;
        knowledgeTag?: Tag;
        documentCount?: number;
        tokenCount?: number;
        wordCount?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("visibility" in data && data.visibility != undefined) {
                this.visibility = data.visibility;
            }
            if ("language" in data && data.language != undefined) {
                this.language = data.language;
            }
            if ("embeddingModelProviderId" in data && data.embeddingModelProviderId != undefined) {
                this.embeddingModelProviderId = data.embeddingModelProviderId;
            }
            if ("embeddingModelProviderName" in data && data.embeddingModelProviderName != undefined) {
                this.embeddingModelProviderName = data.embeddingModelProviderName;
            }
            if ("knowledgeEmbeddingModelOptions" in data && data.knowledgeEmbeddingModelOptions != undefined) {
                this.knowledgeEmbeddingModelOptions = data.knowledgeEmbeddingModelOptions;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("createdBy" in data && data.createdBy != undefined) {
                this.createdBy = data.createdBy;
            }
            if ("createdUser" in data && data.createdUser != undefined) {
                this.createdUser = data.createdUser;
            }
            if ("updatedBy" in data && data.updatedBy != undefined) {
                this.updatedBy = data.updatedBy;
            }
            if ("updatedUser" in data && data.updatedUser != undefined) {
                this.updatedUser = data.updatedUser;
            }
            if ("createdDate" in data && data.createdDate != undefined) {
                this.createdDate = data.createdDate;
            }
            if ("updatedDate" in data && data.updatedDate != undefined) {
                this.updatedDate = data.updatedDate;
            }
            if ("organizationId" in data && data.organizationId != undefined) {
                this.organizationId = data.organizationId;
            }
            if ("projectId" in data && data.projectId != undefined) {
                this.projectId = data.projectId;
            }
            if ("organization" in data && data.organization != undefined) {
                this.organization = data.organization;
            }
            if ("knowledgeTag" in data && data.knowledgeTag != undefined) {
                this.knowledgeTag = data.knowledgeTag;
            }
            if ("documentCount" in data && data.documentCount != undefined) {
                this.documentCount = data.documentCount;
            }
            if ("tokenCount" in data && data.tokenCount != undefined) {
                this.tokenCount = data.tokenCount;
            }
            if ("wordCount" in data && data.wordCount != undefined) {
                this.wordCount = data.wordCount;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get visibility() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set visibility(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get language() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set language(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get embeddingModelProviderId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
    }
    set embeddingModelProviderId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get embeddingModelProviderName() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set embeddingModelProviderName(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get knowledgeEmbeddingModelOptions() {
        return pb_1.Message.getRepeatedWrapperField(this, Metadata, 8) as Metadata[];
    }
    set knowledgeEmbeddingModelOptions(value: Metadata[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get createdBy() {
        return pb_1.Message.getFieldWithDefault(this, 13, "0") as string;
    }
    set createdBy(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get createdUser() {
        return pb_1.Message.getWrapperField(this, User, 14) as User;
    }
    set createdUser(value: User) {
        pb_1.Message.setWrapperField(this, 14, value);
    }
    get has_createdUser() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get updatedBy() {
        return pb_1.Message.getFieldWithDefault(this, 15, "0") as string;
    }
    set updatedBy(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get updatedUser() {
        return pb_1.Message.getWrapperField(this, User, 16) as User;
    }
    set updatedUser(value: User) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get has_updatedUser() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get createdDate() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 17) as dependency_1.google.protobuf.Timestamp;
    }
    set createdDate(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    get has_createdDate() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get updatedDate() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 18) as dependency_1.google.protobuf.Timestamp;
    }
    set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 18, value);
    }
    get has_updatedDate() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get organizationId() {
        return pb_1.Message.getFieldWithDefault(this, 19, "0") as string;
    }
    set organizationId(value: string) {
        pb_1.Message.setField(this, 19, value);
    }
    get projectId() {
        return pb_1.Message.getFieldWithDefault(this, 20, "0") as string;
    }
    set projectId(value: string) {
        pb_1.Message.setField(this, 20, value);
    }
    get organization() {
        return pb_1.Message.getWrapperField(this, Organization, 21) as Organization;
    }
    set organization(value: Organization) {
        pb_1.Message.setWrapperField(this, 21, value);
    }
    get has_organization() {
        return pb_1.Message.getField(this, 21) != null;
    }
    get knowledgeTag() {
        return pb_1.Message.getWrapperField(this, Tag, 22) as Tag;
    }
    set knowledgeTag(value: Tag) {
        pb_1.Message.setWrapperField(this, 22, value);
    }
    get has_knowledgeTag() {
        return pb_1.Message.getField(this, 22) != null;
    }
    get documentCount() {
        return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
    }
    set documentCount(value: number) {
        pb_1.Message.setField(this, 23, value);
    }
    get tokenCount() {
        return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
    }
    set tokenCount(value: number) {
        pb_1.Message.setField(this, 24, value);
    }
    get wordCount() {
        return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
    }
    set wordCount(value: number) {
        pb_1.Message.setField(this, 25, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        description?: string;
        visibility?: string;
        language?: string;
        embeddingModelProviderId?: string;
        embeddingModelProviderName?: string;
        knowledgeEmbeddingModelOptions?: ReturnType<typeof Metadata.prototype.toObject>[];
        status?: string;
        createdBy?: string;
        createdUser?: ReturnType<typeof User.prototype.toObject>;
        updatedBy?: string;
        updatedUser?: ReturnType<typeof User.prototype.toObject>;
        createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        organizationId?: string;
        projectId?: string;
        organization?: ReturnType<typeof Organization.prototype.toObject>;
        knowledgeTag?: ReturnType<typeof Tag.prototype.toObject>;
        documentCount?: number;
        tokenCount?: number;
        wordCount?: number;
    }): Knowledge {
        const message = new Knowledge({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.visibility != null) {
            message.visibility = data.visibility;
        }
        if (data.language != null) {
            message.language = data.language;
        }
        if (data.embeddingModelProviderId != null) {
            message.embeddingModelProviderId = data.embeddingModelProviderId;
        }
        if (data.embeddingModelProviderName != null) {
            message.embeddingModelProviderName = data.embeddingModelProviderName;
        }
        if (data.knowledgeEmbeddingModelOptions != null) {
            message.knowledgeEmbeddingModelOptions = data.knowledgeEmbeddingModelOptions.map(item => Metadata.fromObject(item));
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.createdBy != null) {
            message.createdBy = data.createdBy;
        }
        if (data.createdUser != null) {
            message.createdUser = User.fromObject(data.createdUser);
        }
        if (data.updatedBy != null) {
            message.updatedBy = data.updatedBy;
        }
        if (data.updatedUser != null) {
            message.updatedUser = User.fromObject(data.updatedUser);
        }
        if (data.createdDate != null) {
            message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
        }
        if (data.updatedDate != null) {
            message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
        }
        if (data.organizationId != null) {
            message.organizationId = data.organizationId;
        }
        if (data.projectId != null) {
            message.projectId = data.projectId;
        }
        if (data.organization != null) {
            message.organization = Organization.fromObject(data.organization);
        }
        if (data.knowledgeTag != null) {
            message.knowledgeTag = Tag.fromObject(data.knowledgeTag);
        }
        if (data.documentCount != null) {
            message.documentCount = data.documentCount;
        }
        if (data.tokenCount != null) {
            message.tokenCount = data.tokenCount;
        }
        if (data.wordCount != null) {
            message.wordCount = data.wordCount;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            description?: string;
            visibility?: string;
            language?: string;
            embeddingModelProviderId?: string;
            embeddingModelProviderName?: string;
            knowledgeEmbeddingModelOptions?: ReturnType<typeof Metadata.prototype.toObject>[];
            status?: string;
            createdBy?: string;
            createdUser?: ReturnType<typeof User.prototype.toObject>;
            updatedBy?: string;
            updatedUser?: ReturnType<typeof User.prototype.toObject>;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            organizationId?: string;
            projectId?: string;
            organization?: ReturnType<typeof Organization.prototype.toObject>;
            knowledgeTag?: ReturnType<typeof Tag.prototype.toObject>;
            documentCount?: number;
            tokenCount?: number;
            wordCount?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.visibility != null) {
            data.visibility = this.visibility;
        }
        if (this.language != null) {
            data.language = this.language;
        }
        if (this.embeddingModelProviderId != null) {
            data.embeddingModelProviderId = this.embeddingModelProviderId;
        }
        if (this.embeddingModelProviderName != null) {
            data.embeddingModelProviderName = this.embeddingModelProviderName;
        }
        if (this.knowledgeEmbeddingModelOptions != null) {
            data.knowledgeEmbeddingModelOptions = this.knowledgeEmbeddingModelOptions.map((item: Metadata) => item.toObject());
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.createdBy != null) {
            data.createdBy = this.createdBy;
        }
        if (this.createdUser != null) {
            data.createdUser = this.createdUser.toObject();
        }
        if (this.updatedBy != null) {
            data.updatedBy = this.updatedBy;
        }
        if (this.updatedUser != null) {
            data.updatedUser = this.updatedUser.toObject();
        }
        if (this.createdDate != null) {
            data.createdDate = this.createdDate.toObject();
        }
        if (this.updatedDate != null) {
            data.updatedDate = this.updatedDate.toObject();
        }
        if (this.organizationId != null) {
            data.organizationId = this.organizationId;
        }
        if (this.projectId != null) {
            data.projectId = this.projectId;
        }
        if (this.organization != null) {
            data.organization = this.organization.toObject();
        }
        if (this.knowledgeTag != null) {
            data.knowledgeTag = this.knowledgeTag.toObject();
        }
        if (this.documentCount != null) {
            data.documentCount = this.documentCount;
        }
        if (this.tokenCount != null) {
            data.tokenCount = this.tokenCount;
        }
        if (this.wordCount != null) {
            data.wordCount = this.wordCount;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (this.visibility.length)
            writer.writeString(4, this.visibility);
        if (this.language.length)
            writer.writeString(5, this.language);
        if (this.embeddingModelProviderId != "0")
            writer.writeUint64String(6, this.embeddingModelProviderId);
        if (this.embeddingModelProviderName.length)
            writer.writeString(7, this.embeddingModelProviderName);
        if (this.knowledgeEmbeddingModelOptions.length)
            writer.writeRepeatedMessage(8, this.knowledgeEmbeddingModelOptions, (item: Metadata) => item.serialize(writer));
        if (this.status.length)
            writer.writeString(12, this.status);
        if (this.createdBy != "0")
            writer.writeUint64String(13, this.createdBy);
        if (this.has_createdUser)
            writer.writeMessage(14, this.createdUser, () => this.createdUser.serialize(writer));
        if (this.updatedBy != "0")
            writer.writeUint64String(15, this.updatedBy);
        if (this.has_updatedUser)
            writer.writeMessage(16, this.updatedUser, () => this.updatedUser.serialize(writer));
        if (this.has_createdDate)
            writer.writeMessage(17, this.createdDate, () => this.createdDate.serialize(writer));
        if (this.has_updatedDate)
            writer.writeMessage(18, this.updatedDate, () => this.updatedDate.serialize(writer));
        if (this.organizationId != "0")
            writer.writeUint64String(19, this.organizationId);
        if (this.projectId != "0")
            writer.writeUint64String(20, this.projectId);
        if (this.has_organization)
            writer.writeMessage(21, this.organization, () => this.organization.serialize(writer));
        if (this.has_knowledgeTag)
            writer.writeMessage(22, this.knowledgeTag, () => this.knowledgeTag.serialize(writer));
        if (this.documentCount != 0)
            writer.writeUint32(23, this.documentCount);
        if (this.tokenCount != 0)
            writer.writeUint32(24, this.tokenCount);
        if (this.wordCount != 0)
            writer.writeUint32(25, this.wordCount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Knowledge {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Knowledge();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 4:
                    message.visibility = reader.readString();
                    break;
                case 5:
                    message.language = reader.readString();
                    break;
                case 6:
                    message.embeddingModelProviderId = reader.readUint64String();
                    break;
                case 7:
                    message.embeddingModelProviderName = reader.readString();
                    break;
                case 8:
                    reader.readMessage(message.knowledgeEmbeddingModelOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 8, Metadata.deserialize(reader), Metadata));
                    break;
                case 12:
                    message.status = reader.readString();
                    break;
                case 13:
                    message.createdBy = reader.readUint64String();
                    break;
                case 14:
                    reader.readMessage(message.createdUser, () => message.createdUser = User.deserialize(reader));
                    break;
                case 15:
                    message.updatedBy = reader.readUint64String();
                    break;
                case 16:
                    reader.readMessage(message.updatedUser, () => message.updatedUser = User.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 18:
                    reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 19:
                    message.organizationId = reader.readUint64String();
                    break;
                case 20:
                    message.projectId = reader.readUint64String();
                    break;
                case 21:
                    reader.readMessage(message.organization, () => message.organization = Organization.deserialize(reader));
                    break;
                case 22:
                    reader.readMessage(message.knowledgeTag, () => message.knowledgeTag = Tag.deserialize(reader));
                    break;
                case 23:
                    message.documentCount = reader.readUint32();
                    break;
                case 24:
                    message.tokenCount = reader.readUint32();
                    break;
                case 25:
                    message.wordCount = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Knowledge {
        return Knowledge.deserialize(bytes);
    }
}
export class TextPrompt extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        role?: string;
        content?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
        }
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get content() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set content(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        role?: string;
        content?: string;
    }): TextPrompt {
        const message = new TextPrompt({});
        if (data.role != null) {
            message.role = data.role;
        }
        if (data.content != null) {
            message.content = data.content;
        }
        return message;
    }
    toObject() {
        const data: {
            role?: string;
            content?: string;
        } = {};
        if (this.role != null) {
            data.role = this.role;
        }
        if (this.content != null) {
            data.content = this.content;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.role.length)
            writer.writeString(1, this.role);
        if (this.content.length)
            writer.writeString(2, this.content);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextPrompt {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextPrompt();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.role = reader.readString();
                    break;
                case 2:
                    message.content = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TextPrompt {
        return TextPrompt.deserialize(bytes);
    }
}
export class TextChatCompletePrompt extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        prompt?: TextPrompt[];
        promptVariables?: Variable[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("prompt" in data && data.prompt != undefined) {
                this.prompt = data.prompt;
            }
            if ("promptVariables" in data && data.promptVariables != undefined) {
                this.promptVariables = data.promptVariables;
            }
        }
    }
    get prompt() {
        return pb_1.Message.getRepeatedWrapperField(this, TextPrompt, 1) as TextPrompt[];
    }
    set prompt(value: TextPrompt[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get promptVariables() {
        return pb_1.Message.getRepeatedWrapperField(this, Variable, 2) as Variable[];
    }
    set promptVariables(value: Variable[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        prompt?: ReturnType<typeof TextPrompt.prototype.toObject>[];
        promptVariables?: ReturnType<typeof Variable.prototype.toObject>[];
    }): TextChatCompletePrompt {
        const message = new TextChatCompletePrompt({});
        if (data.prompt != null) {
            message.prompt = data.prompt.map(item => TextPrompt.fromObject(item));
        }
        if (data.promptVariables != null) {
            message.promptVariables = data.promptVariables.map(item => Variable.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            prompt?: ReturnType<typeof TextPrompt.prototype.toObject>[];
            promptVariables?: ReturnType<typeof Variable.prototype.toObject>[];
        } = {};
        if (this.prompt != null) {
            data.prompt = this.prompt.map((item: TextPrompt) => item.toObject());
        }
        if (this.promptVariables != null) {
            data.promptVariables = this.promptVariables.map((item: Variable) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.prompt.length)
            writer.writeRepeatedMessage(1, this.prompt, (item: TextPrompt) => item.serialize(writer));
        if (this.promptVariables.length)
            writer.writeRepeatedMessage(2, this.promptVariables, (item: Variable) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextChatCompletePrompt {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextChatCompletePrompt();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.prompt, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TextPrompt.deserialize(reader), TextPrompt));
                    break;
                case 2:
                    reader.readMessage(message.promptVariables, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Variable.deserialize(reader), Variable));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TextChatCompletePrompt {
        return TextChatCompletePrompt.deserialize(bytes);
    }
}
export class AssistantMessageStage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        stage?: string;
        additionalData?: Map<string, string>;
        timetaken?: number;
        lifecycleId?: string;
        startTimestamp?: dependency_1.google.protobuf.Timestamp;
        endTimestamp?: dependency_1.google.protobuf.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stage" in data && data.stage != undefined) {
                this.stage = data.stage;
            }
            if ("additionalData" in data && data.additionalData != undefined) {
                this.additionalData = data.additionalData;
            }
            if ("timetaken" in data && data.timetaken != undefined) {
                this.timetaken = data.timetaken;
            }
            if ("lifecycleId" in data && data.lifecycleId != undefined) {
                this.lifecycleId = data.lifecycleId;
            }
            if ("startTimestamp" in data && data.startTimestamp != undefined) {
                this.startTimestamp = data.startTimestamp;
            }
            if ("endTimestamp" in data && data.endTimestamp != undefined) {
                this.endTimestamp = data.endTimestamp;
            }
        }
        if (!this.additionalData)
            this.additionalData = new Map();
    }
    get stage() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set stage(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get additionalData() {
        return pb_1.Message.getField(this, 2) as any as Map<string, string>;
    }
    set additionalData(value: Map<string, string>) {
        pb_1.Message.setField(this, 2, value as any);
    }
    get timetaken() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set timetaken(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get lifecycleId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set lifecycleId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get startTimestamp() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
    }
    set startTimestamp(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_startTimestamp() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get endTimestamp() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
    }
    set endTimestamp(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_endTimestamp() {
        return pb_1.Message.getField(this, 6) != null;
    }
    static fromObject(data: {
        stage?: string;
        additionalData?: {
            [key: string]: string;
        };
        timetaken?: number;
        lifecycleId?: string;
        startTimestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        endTimestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
    }): AssistantMessageStage {
        const message = new AssistantMessageStage({});
        if (data.stage != null) {
            message.stage = data.stage;
        }
        if (typeof data.additionalData == "object") {
            message.additionalData = new Map(Object.entries(data.additionalData));
        }
        if (data.timetaken != null) {
            message.timetaken = data.timetaken;
        }
        if (data.lifecycleId != null) {
            message.lifecycleId = data.lifecycleId;
        }
        if (data.startTimestamp != null) {
            message.startTimestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.startTimestamp);
        }
        if (data.endTimestamp != null) {
            message.endTimestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.endTimestamp);
        }
        return message;
    }
    toObject() {
        const data: {
            stage?: string;
            additionalData?: {
                [key: string]: string;
            };
            timetaken?: number;
            lifecycleId?: string;
            startTimestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            endTimestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        } = {};
        if (this.stage != null) {
            data.stage = this.stage;
        }
        if (this.additionalData != null) {
            data.additionalData = (Object.fromEntries)(this.additionalData);
        }
        if (this.timetaken != null) {
            data.timetaken = this.timetaken;
        }
        if (this.lifecycleId != null) {
            data.lifecycleId = this.lifecycleId;
        }
        if (this.startTimestamp != null) {
            data.startTimestamp = this.startTimestamp.toObject();
        }
        if (this.endTimestamp != null) {
            data.endTimestamp = this.endTimestamp.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.stage.length)
            writer.writeString(1, this.stage);
        for (const [key, value] of this.additionalData) {
            writer.writeMessage(2, this.additionalData, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (this.timetaken != 0)
            writer.writeUint64(3, this.timetaken);
        if (this.lifecycleId.length)
            writer.writeString(4, this.lifecycleId);
        if (this.has_startTimestamp)
            writer.writeMessage(5, this.startTimestamp, () => this.startTimestamp.serialize(writer));
        if (this.has_endTimestamp)
            writer.writeMessage(6, this.endTimestamp, () => this.endTimestamp.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantMessageStage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantMessageStage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.stage = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.additionalData as any, reader, reader.readString, reader.readString));
                    break;
                case 3:
                    message.timetaken = reader.readUint64();
                    break;
                case 4:
                    message.lifecycleId = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.startTimestamp, () => message.startTimestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.endTimestamp, () => message.endTimestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AssistantMessageStage {
        return AssistantMessageStage.deserialize(bytes);
    }
}
export class AssistantConversationMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        messageId?: string;
        assistantConversationId?: string;
        request?: Message;
        response?: Message;
        source?: string;
        metrics?: Metric[];
        status?: string;
        createdBy?: string;
        updatedBy?: string;
        suggestedQuestions?: string[];
        stages?: AssistantMessageStage[];
        createdDate?: dependency_1.google.protobuf.Timestamp;
        updatedDate?: dependency_1.google.protobuf.Timestamp;
        assistantId?: string;
        assistantProviderModelId?: string;
        metadata?: Metadata[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 14, 15, 31], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("messageId" in data && data.messageId != undefined) {
                this.messageId = data.messageId;
            }
            if ("assistantConversationId" in data && data.assistantConversationId != undefined) {
                this.assistantConversationId = data.assistantConversationId;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
            if ("source" in data && data.source != undefined) {
                this.source = data.source;
            }
            if ("metrics" in data && data.metrics != undefined) {
                this.metrics = data.metrics;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("createdBy" in data && data.createdBy != undefined) {
                this.createdBy = data.createdBy;
            }
            if ("updatedBy" in data && data.updatedBy != undefined) {
                this.updatedBy = data.updatedBy;
            }
            if ("suggestedQuestions" in data && data.suggestedQuestions != undefined) {
                this.suggestedQuestions = data.suggestedQuestions;
            }
            if ("stages" in data && data.stages != undefined) {
                this.stages = data.stages;
            }
            if ("createdDate" in data && data.createdDate != undefined) {
                this.createdDate = data.createdDate;
            }
            if ("updatedDate" in data && data.updatedDate != undefined) {
                this.updatedDate = data.updatedDate;
            }
            if ("assistantId" in data && data.assistantId != undefined) {
                this.assistantId = data.assistantId;
            }
            if ("assistantProviderModelId" in data && data.assistantProviderModelId != undefined) {
                this.assistantProviderModelId = data.assistantProviderModelId;
            }
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get messageId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set messageId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get assistantConversationId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
    }
    set assistantConversationId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get request() {
        return pb_1.Message.getWrapperField(this, Message, 5) as Message;
    }
    set request(value: Message) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_request() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, Message, 7) as Message;
    }
    set response(value: Message) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_response() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get source() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set source(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get metrics() {
        return pb_1.Message.getRepeatedWrapperField(this, Metric, 10) as Metric[];
    }
    set metrics(value: Metric[]) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get createdBy() {
        return pb_1.Message.getFieldWithDefault(this, 12, "0") as string;
    }
    set createdBy(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get updatedBy() {
        return pb_1.Message.getFieldWithDefault(this, 13, "0") as string;
    }
    set updatedBy(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get suggestedQuestions() {
        return pb_1.Message.getFieldWithDefault(this, 14, []) as string[];
    }
    set suggestedQuestions(value: string[]) {
        pb_1.Message.setField(this, 14, value);
    }
    get stages() {
        return pb_1.Message.getRepeatedWrapperField(this, AssistantMessageStage, 15) as AssistantMessageStage[];
    }
    set stages(value: AssistantMessageStage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get createdDate() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 26) as dependency_1.google.protobuf.Timestamp;
    }
    set createdDate(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 26, value);
    }
    get has_createdDate() {
        return pb_1.Message.getField(this, 26) != null;
    }
    get updatedDate() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 27) as dependency_1.google.protobuf.Timestamp;
    }
    set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 27, value);
    }
    get has_updatedDate() {
        return pb_1.Message.getField(this, 27) != null;
    }
    get assistantId() {
        return pb_1.Message.getFieldWithDefault(this, 28, "0") as string;
    }
    set assistantId(value: string) {
        pb_1.Message.setField(this, 28, value);
    }
    get assistantProviderModelId() {
        return pb_1.Message.getFieldWithDefault(this, 29, "0") as string;
    }
    set assistantProviderModelId(value: string) {
        pb_1.Message.setField(this, 29, value);
    }
    get metadata() {
        return pb_1.Message.getRepeatedWrapperField(this, Metadata, 31) as Metadata[];
    }
    set metadata(value: Metadata[]) {
        pb_1.Message.setRepeatedWrapperField(this, 31, value);
    }
    static fromObject(data: {
        id?: string;
        messageId?: string;
        assistantConversationId?: string;
        request?: ReturnType<typeof Message.prototype.toObject>;
        response?: ReturnType<typeof Message.prototype.toObject>;
        source?: string;
        metrics?: ReturnType<typeof Metric.prototype.toObject>[];
        status?: string;
        createdBy?: string;
        updatedBy?: string;
        suggestedQuestions?: string[];
        stages?: ReturnType<typeof AssistantMessageStage.prototype.toObject>[];
        createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        assistantId?: string;
        assistantProviderModelId?: string;
        metadata?: ReturnType<typeof Metadata.prototype.toObject>[];
    }): AssistantConversationMessage {
        const message = new AssistantConversationMessage({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.messageId != null) {
            message.messageId = data.messageId;
        }
        if (data.assistantConversationId != null) {
            message.assistantConversationId = data.assistantConversationId;
        }
        if (data.request != null) {
            message.request = Message.fromObject(data.request);
        }
        if (data.response != null) {
            message.response = Message.fromObject(data.response);
        }
        if (data.source != null) {
            message.source = data.source;
        }
        if (data.metrics != null) {
            message.metrics = data.metrics.map(item => Metric.fromObject(item));
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.createdBy != null) {
            message.createdBy = data.createdBy;
        }
        if (data.updatedBy != null) {
            message.updatedBy = data.updatedBy;
        }
        if (data.suggestedQuestions != null) {
            message.suggestedQuestions = data.suggestedQuestions;
        }
        if (data.stages != null) {
            message.stages = data.stages.map(item => AssistantMessageStage.fromObject(item));
        }
        if (data.createdDate != null) {
            message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
        }
        if (data.updatedDate != null) {
            message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
        }
        if (data.assistantId != null) {
            message.assistantId = data.assistantId;
        }
        if (data.assistantProviderModelId != null) {
            message.assistantProviderModelId = data.assistantProviderModelId;
        }
        if (data.metadata != null) {
            message.metadata = data.metadata.map(item => Metadata.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            messageId?: string;
            assistantConversationId?: string;
            request?: ReturnType<typeof Message.prototype.toObject>;
            response?: ReturnType<typeof Message.prototype.toObject>;
            source?: string;
            metrics?: ReturnType<typeof Metric.prototype.toObject>[];
            status?: string;
            createdBy?: string;
            updatedBy?: string;
            suggestedQuestions?: string[];
            stages?: ReturnType<typeof AssistantMessageStage.prototype.toObject>[];
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            assistantId?: string;
            assistantProviderModelId?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.messageId != null) {
            data.messageId = this.messageId;
        }
        if (this.assistantConversationId != null) {
            data.assistantConversationId = this.assistantConversationId;
        }
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        if (this.source != null) {
            data.source = this.source;
        }
        if (this.metrics != null) {
            data.metrics = this.metrics.map((item: Metric) => item.toObject());
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.createdBy != null) {
            data.createdBy = this.createdBy;
        }
        if (this.updatedBy != null) {
            data.updatedBy = this.updatedBy;
        }
        if (this.suggestedQuestions != null) {
            data.suggestedQuestions = this.suggestedQuestions;
        }
        if (this.stages != null) {
            data.stages = this.stages.map((item: AssistantMessageStage) => item.toObject());
        }
        if (this.createdDate != null) {
            data.createdDate = this.createdDate.toObject();
        }
        if (this.updatedDate != null) {
            data.updatedDate = this.updatedDate.toObject();
        }
        if (this.assistantId != null) {
            data.assistantId = this.assistantId;
        }
        if (this.assistantProviderModelId != null) {
            data.assistantProviderModelId = this.assistantProviderModelId;
        }
        if (this.metadata != null) {
            data.metadata = this.metadata.map((item: Metadata) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.messageId.length)
            writer.writeString(3, this.messageId);
        if (this.assistantConversationId != "0")
            writer.writeUint64String(2, this.assistantConversationId);
        if (this.has_request)
            writer.writeMessage(5, this.request, () => this.request.serialize(writer));
        if (this.has_response)
            writer.writeMessage(7, this.response, () => this.response.serialize(writer));
        if (this.source.length)
            writer.writeString(9, this.source);
        if (this.metrics.length)
            writer.writeRepeatedMessage(10, this.metrics, (item: Metric) => item.serialize(writer));
        if (this.status.length)
            writer.writeString(11, this.status);
        if (this.createdBy != "0")
            writer.writeUint64String(12, this.createdBy);
        if (this.updatedBy != "0")
            writer.writeUint64String(13, this.updatedBy);
        if (this.suggestedQuestions.length)
            writer.writeRepeatedString(14, this.suggestedQuestions);
        if (this.stages.length)
            writer.writeRepeatedMessage(15, this.stages, (item: AssistantMessageStage) => item.serialize(writer));
        if (this.has_createdDate)
            writer.writeMessage(26, this.createdDate, () => this.createdDate.serialize(writer));
        if (this.has_updatedDate)
            writer.writeMessage(27, this.updatedDate, () => this.updatedDate.serialize(writer));
        if (this.assistantId != "0")
            writer.writeUint64String(28, this.assistantId);
        if (this.assistantProviderModelId != "0")
            writer.writeUint64String(29, this.assistantProviderModelId);
        if (this.metadata.length)
            writer.writeRepeatedMessage(31, this.metadata, (item: Metadata) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantConversationMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantConversationMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 3:
                    message.messageId = reader.readString();
                    break;
                case 2:
                    message.assistantConversationId = reader.readUint64String();
                    break;
                case 5:
                    reader.readMessage(message.request, () => message.request = Message.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.response, () => message.response = Message.deserialize(reader));
                    break;
                case 9:
                    message.source = reader.readString();
                    break;
                case 10:
                    reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 10, Metric.deserialize(reader), Metric));
                    break;
                case 11:
                    message.status = reader.readString();
                    break;
                case 12:
                    message.createdBy = reader.readUint64String();
                    break;
                case 13:
                    message.updatedBy = reader.readUint64String();
                    break;
                case 14:
                    pb_1.Message.addToRepeatedField(message, 14, reader.readString());
                    break;
                case 15:
                    reader.readMessage(message.stages, () => pb_1.Message.addToRepeatedWrapperField(message, 15, AssistantMessageStage.deserialize(reader), AssistantMessageStage));
                    break;
                case 26:
                    reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 27:
                    reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 28:
                    message.assistantId = reader.readUint64String();
                    break;
                case 29:
                    message.assistantProviderModelId = reader.readUint64String();
                    break;
                case 31:
                    reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 31, Metadata.deserialize(reader), Metadata));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AssistantConversationMessage {
        return AssistantConversationMessage.deserialize(bytes);
    }
}
export class AssistantConversationContext extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        metadata?: dependency_2.google.protobuf.Struct;
        result?: dependency_2.google.protobuf.Struct;
        query?: dependency_2.google.protobuf.Struct;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("result" in data && data.result != undefined) {
                this.result = data.result;
            }
            if ("query" in data && data.query != undefined) {
                this.query = data.query;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
        return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 3) as dependency_2.google.protobuf.Struct;
    }
    set metadata(value: dependency_2.google.protobuf.Struct) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_metadata() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get result() {
        return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 4) as dependency_2.google.protobuf.Struct;
    }
    set result(value: dependency_2.google.protobuf.Struct) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_result() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get query() {
        return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Struct, 5) as dependency_2.google.protobuf.Struct;
    }
    set query(value: dependency_2.google.protobuf.Struct) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_query() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        id?: string;
        metadata?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
        result?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
        query?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
    }): AssistantConversationContext {
        const message = new AssistantConversationContext({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.metadata != null) {
            message.metadata = dependency_2.google.protobuf.Struct.fromObject(data.metadata);
        }
        if (data.result != null) {
            message.result = dependency_2.google.protobuf.Struct.fromObject(data.result);
        }
        if (data.query != null) {
            message.query = dependency_2.google.protobuf.Struct.fromObject(data.query);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            metadata?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
            result?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
            query?: ReturnType<typeof dependency_2.google.protobuf.Struct.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.metadata != null) {
            data.metadata = this.metadata.toObject();
        }
        if (this.result != null) {
            data.result = this.result.toObject();
        }
        if (this.query != null) {
            data.query = this.query.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.has_metadata)
            writer.writeMessage(3, this.metadata, () => this.metadata.serialize(writer));
        if (this.has_result)
            writer.writeMessage(4, this.result, () => this.result.serialize(writer));
        if (this.has_query)
            writer.writeMessage(5, this.query, () => this.query.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantConversationContext {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantConversationContext();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 3:
                    reader.readMessage(message.metadata, () => message.metadata = dependency_2.google.protobuf.Struct.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.result, () => message.result = dependency_2.google.protobuf.Struct.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.query, () => message.query = dependency_2.google.protobuf.Struct.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AssistantConversationContext {
        return AssistantConversationContext.deserialize(bytes);
    }
}
export class AssistantConversationRecording extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        recordingUrl?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("recordingUrl" in data && data.recordingUrl != undefined) {
                this.recordingUrl = data.recordingUrl;
            }
        }
    }
    get recordingUrl() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set recordingUrl(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        recordingUrl?: string;
    }): AssistantConversationRecording {
        const message = new AssistantConversationRecording({});
        if (data.recordingUrl != null) {
            message.recordingUrl = data.recordingUrl;
        }
        return message;
    }
    toObject() {
        const data: {
            recordingUrl?: string;
        } = {};
        if (this.recordingUrl != null) {
            data.recordingUrl = this.recordingUrl;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.recordingUrl.length)
            writer.writeString(1, this.recordingUrl);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantConversationRecording {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantConversationRecording();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.recordingUrl = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AssistantConversationRecording {
        return AssistantConversationRecording.deserialize(bytes);
    }
}
export class AssistantConversation extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        userId?: string;
        assistantId?: string;
        name?: string;
        projectId?: string;
        organizationId?: string;
        source?: string;
        createdBy?: string;
        updatedBy?: string;
        user?: User;
        assistantProviderModelId?: string;
        assistantConversationMessage?: AssistantConversationMessage[];
        identifier?: string;
        status?: string;
        createdDate?: dependency_1.google.protobuf.Timestamp;
        updatedDate?: dependency_1.google.protobuf.Timestamp;
        contexts?: AssistantConversationContext[];
        metrics?: Metric[];
        metadata?: Metadata[];
        arguments?: Argument[];
        options?: Metadata[];
        direction?: string;
        recordings?: AssistantConversationRecording[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13, 28, 30, 32, 31, 33, 35], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("assistantId" in data && data.assistantId != undefined) {
                this.assistantId = data.assistantId;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("projectId" in data && data.projectId != undefined) {
                this.projectId = data.projectId;
            }
            if ("organizationId" in data && data.organizationId != undefined) {
                this.organizationId = data.organizationId;
            }
            if ("source" in data && data.source != undefined) {
                this.source = data.source;
            }
            if ("createdBy" in data && data.createdBy != undefined) {
                this.createdBy = data.createdBy;
            }
            if ("updatedBy" in data && data.updatedBy != undefined) {
                this.updatedBy = data.updatedBy;
            }
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("assistantProviderModelId" in data && data.assistantProviderModelId != undefined) {
                this.assistantProviderModelId = data.assistantProviderModelId;
            }
            if ("assistantConversationMessage" in data && data.assistantConversationMessage != undefined) {
                this.assistantConversationMessage = data.assistantConversationMessage;
            }
            if ("identifier" in data && data.identifier != undefined) {
                this.identifier = data.identifier;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("createdDate" in data && data.createdDate != undefined) {
                this.createdDate = data.createdDate;
            }
            if ("updatedDate" in data && data.updatedDate != undefined) {
                this.updatedDate = data.updatedDate;
            }
            if ("contexts" in data && data.contexts != undefined) {
                this.contexts = data.contexts;
            }
            if ("metrics" in data && data.metrics != undefined) {
                this.metrics = data.metrics;
            }
            if ("metadata" in data && data.metadata != undefined) {
                this.metadata = data.metadata;
            }
            if ("arguments" in data && data.arguments != undefined) {
                this.arguments = data.arguments;
            }
            if ("options" in data && data.options != undefined) {
                this.options = data.options;
            }
            if ("direction" in data && data.direction != undefined) {
                this.direction = data.direction;
            }
            if ("recordings" in data && data.recordings != undefined) {
                this.recordings = data.recordings;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
    }
    set userId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get assistantId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
    }
    set assistantId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get projectId() {
        return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
    }
    set projectId(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get organizationId() {
        return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
    }
    set organizationId(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get source() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set source(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get createdBy() {
        return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
    }
    set createdBy(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get updatedBy() {
        return pb_1.Message.getFieldWithDefault(this, 9, "0") as string;
    }
    set updatedBy(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get user() {
        return pb_1.Message.getWrapperField(this, User, 10) as User;
    }
    set user(value: User) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get assistantProviderModelId() {
        return pb_1.Message.getFieldWithDefault(this, 12, "0") as string;
    }
    set assistantProviderModelId(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get assistantConversationMessage() {
        return pb_1.Message.getRepeatedWrapperField(this, AssistantConversationMessage, 13) as AssistantConversationMessage[];
    }
    set assistantConversationMessage(value: AssistantConversationMessage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get identifier() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set identifier(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get createdDate() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 26) as dependency_1.google.protobuf.Timestamp;
    }
    set createdDate(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 26, value);
    }
    get has_createdDate() {
        return pb_1.Message.getField(this, 26) != null;
    }
    get updatedDate() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 27) as dependency_1.google.protobuf.Timestamp;
    }
    set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 27, value);
    }
    get has_updatedDate() {
        return pb_1.Message.getField(this, 27) != null;
    }
    get contexts() {
        return pb_1.Message.getRepeatedWrapperField(this, AssistantConversationContext, 28) as AssistantConversationContext[];
    }
    set contexts(value: AssistantConversationContext[]) {
        pb_1.Message.setRepeatedWrapperField(this, 28, value);
    }
    get metrics() {
        return pb_1.Message.getRepeatedWrapperField(this, Metric, 30) as Metric[];
    }
    set metrics(value: Metric[]) {
        pb_1.Message.setRepeatedWrapperField(this, 30, value);
    }
    get metadata() {
        return pb_1.Message.getRepeatedWrapperField(this, Metadata, 32) as Metadata[];
    }
    set metadata(value: Metadata[]) {
        pb_1.Message.setRepeatedWrapperField(this, 32, value);
    }
    get arguments() {
        return pb_1.Message.getRepeatedWrapperField(this, Argument, 31) as Argument[];
    }
    set arguments(value: Argument[]) {
        pb_1.Message.setRepeatedWrapperField(this, 31, value);
    }
    get options() {
        return pb_1.Message.getRepeatedWrapperField(this, Metadata, 33) as Metadata[];
    }
    set options(value: Metadata[]) {
        pb_1.Message.setRepeatedWrapperField(this, 33, value);
    }
    get direction() {
        return pb_1.Message.getFieldWithDefault(this, 34, "") as string;
    }
    set direction(value: string) {
        pb_1.Message.setField(this, 34, value);
    }
    get recordings() {
        return pb_1.Message.getRepeatedWrapperField(this, AssistantConversationRecording, 35) as AssistantConversationRecording[];
    }
    set recordings(value: AssistantConversationRecording[]) {
        pb_1.Message.setRepeatedWrapperField(this, 35, value);
    }
    static fromObject(data: {
        id?: string;
        userId?: string;
        assistantId?: string;
        name?: string;
        projectId?: string;
        organizationId?: string;
        source?: string;
        createdBy?: string;
        updatedBy?: string;
        user?: ReturnType<typeof User.prototype.toObject>;
        assistantProviderModelId?: string;
        assistantConversationMessage?: ReturnType<typeof AssistantConversationMessage.prototype.toObject>[];
        identifier?: string;
        status?: string;
        createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        contexts?: ReturnType<typeof AssistantConversationContext.prototype.toObject>[];
        metrics?: ReturnType<typeof Metric.prototype.toObject>[];
        metadata?: ReturnType<typeof Metadata.prototype.toObject>[];
        arguments?: ReturnType<typeof Argument.prototype.toObject>[];
        options?: ReturnType<typeof Metadata.prototype.toObject>[];
        direction?: string;
        recordings?: ReturnType<typeof AssistantConversationRecording.prototype.toObject>[];
    }): AssistantConversation {
        const message = new AssistantConversation({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.assistantId != null) {
            message.assistantId = data.assistantId;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.projectId != null) {
            message.projectId = data.projectId;
        }
        if (data.organizationId != null) {
            message.organizationId = data.organizationId;
        }
        if (data.source != null) {
            message.source = data.source;
        }
        if (data.createdBy != null) {
            message.createdBy = data.createdBy;
        }
        if (data.updatedBy != null) {
            message.updatedBy = data.updatedBy;
        }
        if (data.user != null) {
            message.user = User.fromObject(data.user);
        }
        if (data.assistantProviderModelId != null) {
            message.assistantProviderModelId = data.assistantProviderModelId;
        }
        if (data.assistantConversationMessage != null) {
            message.assistantConversationMessage = data.assistantConversationMessage.map(item => AssistantConversationMessage.fromObject(item));
        }
        if (data.identifier != null) {
            message.identifier = data.identifier;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.createdDate != null) {
            message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
        }
        if (data.updatedDate != null) {
            message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
        }
        if (data.contexts != null) {
            message.contexts = data.contexts.map(item => AssistantConversationContext.fromObject(item));
        }
        if (data.metrics != null) {
            message.metrics = data.metrics.map(item => Metric.fromObject(item));
        }
        if (data.metadata != null) {
            message.metadata = data.metadata.map(item => Metadata.fromObject(item));
        }
        if (data.arguments != null) {
            message.arguments = data.arguments.map(item => Argument.fromObject(item));
        }
        if (data.options != null) {
            message.options = data.options.map(item => Metadata.fromObject(item));
        }
        if (data.direction != null) {
            message.direction = data.direction;
        }
        if (data.recordings != null) {
            message.recordings = data.recordings.map(item => AssistantConversationRecording.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            userId?: string;
            assistantId?: string;
            name?: string;
            projectId?: string;
            organizationId?: string;
            source?: string;
            createdBy?: string;
            updatedBy?: string;
            user?: ReturnType<typeof User.prototype.toObject>;
            assistantProviderModelId?: string;
            assistantConversationMessage?: ReturnType<typeof AssistantConversationMessage.prototype.toObject>[];
            identifier?: string;
            status?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            contexts?: ReturnType<typeof AssistantConversationContext.prototype.toObject>[];
            metrics?: ReturnType<typeof Metric.prototype.toObject>[];
            metadata?: ReturnType<typeof Metadata.prototype.toObject>[];
            arguments?: ReturnType<typeof Argument.prototype.toObject>[];
            options?: ReturnType<typeof Metadata.prototype.toObject>[];
            direction?: string;
            recordings?: ReturnType<typeof AssistantConversationRecording.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.assistantId != null) {
            data.assistantId = this.assistantId;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.projectId != null) {
            data.projectId = this.projectId;
        }
        if (this.organizationId != null) {
            data.organizationId = this.organizationId;
        }
        if (this.source != null) {
            data.source = this.source;
        }
        if (this.createdBy != null) {
            data.createdBy = this.createdBy;
        }
        if (this.updatedBy != null) {
            data.updatedBy = this.updatedBy;
        }
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        if (this.assistantProviderModelId != null) {
            data.assistantProviderModelId = this.assistantProviderModelId;
        }
        if (this.assistantConversationMessage != null) {
            data.assistantConversationMessage = this.assistantConversationMessage.map((item: AssistantConversationMessage) => item.toObject());
        }
        if (this.identifier != null) {
            data.identifier = this.identifier;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.createdDate != null) {
            data.createdDate = this.createdDate.toObject();
        }
        if (this.updatedDate != null) {
            data.updatedDate = this.updatedDate.toObject();
        }
        if (this.contexts != null) {
            data.contexts = this.contexts.map((item: AssistantConversationContext) => item.toObject());
        }
        if (this.metrics != null) {
            data.metrics = this.metrics.map((item: Metric) => item.toObject());
        }
        if (this.metadata != null) {
            data.metadata = this.metadata.map((item: Metadata) => item.toObject());
        }
        if (this.arguments != null) {
            data.arguments = this.arguments.map((item: Argument) => item.toObject());
        }
        if (this.options != null) {
            data.options = this.options.map((item: Metadata) => item.toObject());
        }
        if (this.direction != null) {
            data.direction = this.direction;
        }
        if (this.recordings != null) {
            data.recordings = this.recordings.map((item: AssistantConversationRecording) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != "0")
            writer.writeUint64String(1, this.id);
        if (this.userId != "0")
            writer.writeUint64String(2, this.userId);
        if (this.assistantId != "0")
            writer.writeUint64String(3, this.assistantId);
        if (this.name.length)
            writer.writeString(4, this.name);
        if (this.projectId != "0")
            writer.writeUint64String(5, this.projectId);
        if (this.organizationId != "0")
            writer.writeUint64String(6, this.organizationId);
        if (this.source.length)
            writer.writeString(7, this.source);
        if (this.createdBy != "0")
            writer.writeUint64String(8, this.createdBy);
        if (this.updatedBy != "0")
            writer.writeUint64String(9, this.updatedBy);
        if (this.has_user)
            writer.writeMessage(10, this.user, () => this.user.serialize(writer));
        if (this.assistantProviderModelId != "0")
            writer.writeUint64String(12, this.assistantProviderModelId);
        if (this.assistantConversationMessage.length)
            writer.writeRepeatedMessage(13, this.assistantConversationMessage, (item: AssistantConversationMessage) => item.serialize(writer));
        if (this.identifier.length)
            writer.writeString(14, this.identifier);
        if (this.status.length)
            writer.writeString(15, this.status);
        if (this.has_createdDate)
            writer.writeMessage(26, this.createdDate, () => this.createdDate.serialize(writer));
        if (this.has_updatedDate)
            writer.writeMessage(27, this.updatedDate, () => this.updatedDate.serialize(writer));
        if (this.contexts.length)
            writer.writeRepeatedMessage(28, this.contexts, (item: AssistantConversationContext) => item.serialize(writer));
        if (this.metrics.length)
            writer.writeRepeatedMessage(30, this.metrics, (item: Metric) => item.serialize(writer));
        if (this.metadata.length)
            writer.writeRepeatedMessage(32, this.metadata, (item: Metadata) => item.serialize(writer));
        if (this.arguments.length)
            writer.writeRepeatedMessage(31, this.arguments, (item: Argument) => item.serialize(writer));
        if (this.options.length)
            writer.writeRepeatedMessage(33, this.options, (item: Metadata) => item.serialize(writer));
        if (this.direction.length)
            writer.writeString(34, this.direction);
        if (this.recordings.length)
            writer.writeRepeatedMessage(35, this.recordings, (item: AssistantConversationRecording) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantConversation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantConversation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint64String();
                    break;
                case 2:
                    message.userId = reader.readUint64String();
                    break;
                case 3:
                    message.assistantId = reader.readUint64String();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.projectId = reader.readUint64String();
                    break;
                case 6:
                    message.organizationId = reader.readUint64String();
                    break;
                case 7:
                    message.source = reader.readString();
                    break;
                case 8:
                    message.createdBy = reader.readUint64String();
                    break;
                case 9:
                    message.updatedBy = reader.readUint64String();
                    break;
                case 10:
                    reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                    break;
                case 12:
                    message.assistantProviderModelId = reader.readUint64String();
                    break;
                case 13:
                    reader.readMessage(message.assistantConversationMessage, () => pb_1.Message.addToRepeatedWrapperField(message, 13, AssistantConversationMessage.deserialize(reader), AssistantConversationMessage));
                    break;
                case 14:
                    message.identifier = reader.readString();
                    break;
                case 15:
                    message.status = reader.readString();
                    break;
                case 26:
                    reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 27:
                    reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 28:
                    reader.readMessage(message.contexts, () => pb_1.Message.addToRepeatedWrapperField(message, 28, AssistantConversationContext.deserialize(reader), AssistantConversationContext));
                    break;
                case 30:
                    reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 30, Metric.deserialize(reader), Metric));
                    break;
                case 32:
                    reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 32, Metadata.deserialize(reader), Metadata));
                    break;
                case 31:
                    reader.readMessage(message.arguments, () => pb_1.Message.addToRepeatedWrapperField(message, 31, Argument.deserialize(reader), Argument));
                    break;
                case 33:
                    reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 33, Metadata.deserialize(reader), Metadata));
                    break;
                case 34:
                    message.direction = reader.readString();
                    break;
                case 35:
                    reader.readMessage(message.recordings, () => pb_1.Message.addToRepeatedWrapperField(message, 35, AssistantConversationRecording.deserialize(reader), AssistantConversationRecording));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AssistantConversation {
        return AssistantConversation.deserialize(bytes);
    }
}
export class GetAllAssistantConversationRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        assistantId?: string;
        paginate?: Paginate;
        criterias?: Criteria[];
        source?: Source;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("assistantId" in data && data.assistantId != undefined) {
                this.assistantId = data.assistantId;
            }
            if ("paginate" in data && data.paginate != undefined) {
                this.paginate = data.paginate;
            }
            if ("criterias" in data && data.criterias != undefined) {
                this.criterias = data.criterias;
            }
            if ("source" in data && data.source != undefined) {
                this.source = data.source;
            }
        }
    }
    get assistantId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set assistantId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get paginate() {
        return pb_1.Message.getWrapperField(this, Paginate, 2) as Paginate;
    }
    set paginate(value: Paginate) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_paginate() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get criterias() {
        return pb_1.Message.getRepeatedWrapperField(this, Criteria, 3) as Criteria[];
    }
    set criterias(value: Criteria[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get source() {
        return pb_1.Message.getFieldWithDefault(this, 7, Source.WEB_PLUGIN) as Source;
    }
    set source(value: Source) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        assistantId?: string;
        paginate?: ReturnType<typeof Paginate.prototype.toObject>;
        criterias?: ReturnType<typeof Criteria.prototype.toObject>[];
        source?: Source;
    }): GetAllAssistantConversationRequest {
        const message = new GetAllAssistantConversationRequest({});
        if (data.assistantId != null) {
            message.assistantId = data.assistantId;
        }
        if (data.paginate != null) {
            message.paginate = Paginate.fromObject(data.paginate);
        }
        if (data.criterias != null) {
            message.criterias = data.criterias.map(item => Criteria.fromObject(item));
        }
        if (data.source != null) {
            message.source = data.source;
        }
        return message;
    }
    toObject() {
        const data: {
            assistantId?: string;
            paginate?: ReturnType<typeof Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof Criteria.prototype.toObject>[];
            source?: Source;
        } = {};
        if (this.assistantId != null) {
            data.assistantId = this.assistantId;
        }
        if (this.paginate != null) {
            data.paginate = this.paginate.toObject();
        }
        if (this.criterias != null) {
            data.criterias = this.criterias.map((item: Criteria) => item.toObject());
        }
        if (this.source != null) {
            data.source = this.source;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.assistantId != "0")
            writer.writeUint64String(1, this.assistantId);
        if (this.has_paginate)
            writer.writeMessage(2, this.paginate, () => this.paginate.serialize(writer));
        if (this.criterias.length)
            writer.writeRepeatedMessage(3, this.criterias, (item: Criteria) => item.serialize(writer));
        if (this.source != Source.WEB_PLUGIN)
            writer.writeEnum(7, this.source);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantConversationRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantConversationRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.assistantId = reader.readUint64String();
                    break;
                case 2:
                    reader.readMessage(message.paginate, () => message.paginate = Paginate.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Criteria.deserialize(reader), Criteria));
                    break;
                case 7:
                    message.source = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAllAssistantConversationRequest {
        return GetAllAssistantConversationRequest.deserialize(bytes);
    }
}
export class GetAllAssistantConversationResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        success?: boolean;
        data?: AssistantConversation[];
        error?: Error;
        paginated?: Paginated;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
            if ("paginated" in data && data.paginated != undefined) {
                this.paginated = data.paginated;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getRepeatedWrapperField(this, AssistantConversation, 3) as AssistantConversation[];
    }
    set data(value: AssistantConversation[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get error() {
        return pb_1.Message.getWrapperField(this, Error, 4) as Error;
    }
    set error(value: Error) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_error() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get paginated() {
        return pb_1.Message.getWrapperField(this, Paginated, 5) as Paginated;
    }
    set paginated(value: Paginated) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_paginated() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        code?: number;
        success?: boolean;
        data?: ReturnType<typeof AssistantConversation.prototype.toObject>[];
        error?: ReturnType<typeof Error.prototype.toObject>;
        paginated?: ReturnType<typeof Paginated.prototype.toObject>;
    }): GetAllAssistantConversationResponse {
        const message = new GetAllAssistantConversationResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.data != null) {
            message.data = data.data.map(item => AssistantConversation.fromObject(item));
        }
        if (data.error != null) {
            message.error = Error.fromObject(data.error);
        }
        if (data.paginated != null) {
            message.paginated = Paginated.fromObject(data.paginated);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantConversation.prototype.toObject>[];
            error?: ReturnType<typeof Error.prototype.toObject>;
            paginated?: ReturnType<typeof Paginated.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.data != null) {
            data.data = this.data.map((item: AssistantConversation) => item.toObject());
        }
        if (this.error != null) {
            data.error = this.error.toObject();
        }
        if (this.paginated != null) {
            data.paginated = this.paginated.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.success != false)
            writer.writeBool(2, this.success);
        if (this.data.length)
            writer.writeRepeatedMessage(3, this.data, (item: AssistantConversation) => item.serialize(writer));
        if (this.has_error)
            writer.writeMessage(4, this.error, () => this.error.serialize(writer));
        if (this.has_paginated)
            writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantConversationResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantConversationResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.success = reader.readBool();
                    break;
                case 3:
                    reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AssistantConversation.deserialize(reader), AssistantConversation));
                    break;
                case 4:
                    reader.readMessage(message.error, () => message.error = Error.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.paginated, () => message.paginated = Paginated.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAllAssistantConversationResponse {
        return GetAllAssistantConversationResponse.deserialize(bytes);
    }
}
export class GetAllConversationMessageRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        assistantId?: string;
        assistantConversationId?: string;
        paginate?: Paginate;
        criterias?: Criteria[];
        order?: Ordering;
        source?: Source;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("assistantId" in data && data.assistantId != undefined) {
                this.assistantId = data.assistantId;
            }
            if ("assistantConversationId" in data && data.assistantConversationId != undefined) {
                this.assistantConversationId = data.assistantConversationId;
            }
            if ("paginate" in data && data.paginate != undefined) {
                this.paginate = data.paginate;
            }
            if ("criterias" in data && data.criterias != undefined) {
                this.criterias = data.criterias;
            }
            if ("order" in data && data.order != undefined) {
                this.order = data.order;
            }
            if ("source" in data && data.source != undefined) {
                this.source = data.source;
            }
        }
    }
    get assistantId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
    }
    set assistantId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get assistantConversationId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
    }
    set assistantConversationId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get paginate() {
        return pb_1.Message.getWrapperField(this, Paginate, 3) as Paginate;
    }
    set paginate(value: Paginate) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_paginate() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get criterias() {
        return pb_1.Message.getRepeatedWrapperField(this, Criteria, 4) as Criteria[];
    }
    set criterias(value: Criteria[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get order() {
        return pb_1.Message.getWrapperField(this, Ordering, 5) as Ordering;
    }
    set order(value: Ordering) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_order() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get source() {
        return pb_1.Message.getFieldWithDefault(this, 7, Source.WEB_PLUGIN) as Source;
    }
    set source(value: Source) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        assistantId?: string;
        assistantConversationId?: string;
        paginate?: ReturnType<typeof Paginate.prototype.toObject>;
        criterias?: ReturnType<typeof Criteria.prototype.toObject>[];
        order?: ReturnType<typeof Ordering.prototype.toObject>;
        source?: Source;
    }): GetAllConversationMessageRequest {
        const message = new GetAllConversationMessageRequest({});
        if (data.assistantId != null) {
            message.assistantId = data.assistantId;
        }
        if (data.assistantConversationId != null) {
            message.assistantConversationId = data.assistantConversationId;
        }
        if (data.paginate != null) {
            message.paginate = Paginate.fromObject(data.paginate);
        }
        if (data.criterias != null) {
            message.criterias = data.criterias.map(item => Criteria.fromObject(item));
        }
        if (data.order != null) {
            message.order = Ordering.fromObject(data.order);
        }
        if (data.source != null) {
            message.source = data.source;
        }
        return message;
    }
    toObject() {
        const data: {
            assistantId?: string;
            assistantConversationId?: string;
            paginate?: ReturnType<typeof Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof Criteria.prototype.toObject>[];
            order?: ReturnType<typeof Ordering.prototype.toObject>;
            source?: Source;
        } = {};
        if (this.assistantId != null) {
            data.assistantId = this.assistantId;
        }
        if (this.assistantConversationId != null) {
            data.assistantConversationId = this.assistantConversationId;
        }
        if (this.paginate != null) {
            data.paginate = this.paginate.toObject();
        }
        if (this.criterias != null) {
            data.criterias = this.criterias.map((item: Criteria) => item.toObject());
        }
        if (this.order != null) {
            data.order = this.order.toObject();
        }
        if (this.source != null) {
            data.source = this.source;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.assistantId != "0")
            writer.writeUint64String(1, this.assistantId);
        if (this.assistantConversationId != "0")
            writer.writeUint64String(2, this.assistantConversationId);
        if (this.has_paginate)
            writer.writeMessage(3, this.paginate, () => this.paginate.serialize(writer));
        if (this.criterias.length)
            writer.writeRepeatedMessage(4, this.criterias, (item: Criteria) => item.serialize(writer));
        if (this.has_order)
            writer.writeMessage(5, this.order, () => this.order.serialize(writer));
        if (this.source != Source.WEB_PLUGIN)
            writer.writeEnum(7, this.source);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllConversationMessageRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllConversationMessageRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.assistantId = reader.readUint64String();
                    break;
                case 2:
                    message.assistantConversationId = reader.readUint64String();
                    break;
                case 3:
                    reader.readMessage(message.paginate, () => message.paginate = Paginate.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Criteria.deserialize(reader), Criteria));
                    break;
                case 5:
                    reader.readMessage(message.order, () => message.order = Ordering.deserialize(reader));
                    break;
                case 7:
                    message.source = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAllConversationMessageRequest {
        return GetAllConversationMessageRequest.deserialize(bytes);
    }
}
export class GetAllConversationMessageResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: number;
        success?: boolean;
        data?: AssistantConversationMessage[];
        error?: Error;
        paginated?: Paginated;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
            if ("paginated" in data && data.paginated != undefined) {
                this.paginated = data.paginated;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getRepeatedWrapperField(this, AssistantConversationMessage, 3) as AssistantConversationMessage[];
    }
    set data(value: AssistantConversationMessage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get error() {
        return pb_1.Message.getWrapperField(this, Error, 4) as Error;
    }
    set error(value: Error) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_error() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get paginated() {
        return pb_1.Message.getWrapperField(this, Paginated, 5) as Paginated;
    }
    set paginated(value: Paginated) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_paginated() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        code?: number;
        success?: boolean;
        data?: ReturnType<typeof AssistantConversationMessage.prototype.toObject>[];
        error?: ReturnType<typeof Error.prototype.toObject>;
        paginated?: ReturnType<typeof Paginated.prototype.toObject>;
    }): GetAllConversationMessageResponse {
        const message = new GetAllConversationMessageResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.success != null) {
            message.success = data.success;
        }
        if (data.data != null) {
            message.data = data.data.map(item => AssistantConversationMessage.fromObject(item));
        }
        if (data.error != null) {
            message.error = Error.fromObject(data.error);
        }
        if (data.paginated != null) {
            message.paginated = Paginated.fromObject(data.paginated);
        }
        return message;
    }
    toObject() {
        const data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantConversationMessage.prototype.toObject>[];
            error?: ReturnType<typeof Error.prototype.toObject>;
            paginated?: ReturnType<typeof Paginated.prototype.toObject>;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.success != null) {
            data.success = this.success;
        }
        if (this.data != null) {
            data.data = this.data.map((item: AssistantConversationMessage) => item.toObject());
        }
        if (this.error != null) {
            data.error = this.error.toObject();
        }
        if (this.paginated != null) {
            data.paginated = this.paginated.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != 0)
            writer.writeInt32(1, this.code);
        if (this.success != false)
            writer.writeBool(2, this.success);
        if (this.data.length)
            writer.writeRepeatedMessage(3, this.data, (item: AssistantConversationMessage) => item.serialize(writer));
        if (this.has_error)
            writer.writeMessage(4, this.error, () => this.error.serialize(writer));
        if (this.has_paginated)
            writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllConversationMessageResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllConversationMessageResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readInt32();
                    break;
                case 2:
                    message.success = reader.readBool();
                    break;
                case 3:
                    reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AssistantConversationMessage.deserialize(reader), AssistantConversationMessage));
                    break;
                case 4:
                    reader.readMessage(message.error, () => message.error = Error.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.paginated, () => message.paginated = Paginated.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAllConversationMessageResponse {
        return GetAllConversationMessageResponse.deserialize(bytes);
    }
}
