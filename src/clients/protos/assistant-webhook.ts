/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: assistant-webhook.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./common";
import * as dependency_3 from "./google/protobuf/struct";
import * as pb_1 from "google-protobuf";
export namespace assistant_api {
    export class AssistantWebhook extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantEvents?: string[];
            description?: string;
            httpMethod?: string;
            httpUrl?: string;
            httpHeaders?: Map<string, string>;
            httpBody?: Map<string, string>;
            timeoutSecond?: number;
            executionPriority?: number;
            retryStatusCodes?: string[];
            retryCount?: number;
            assistantId?: string;
            status?: string;
            createdBy?: string;
            createdUser?: dependency_2.User;
            updatedBy?: string;
            updatedUser?: dependency_2.User;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantEvents" in data && data.assistantEvents != undefined) {
                    this.assistantEvents = data.assistantEvents;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("httpMethod" in data && data.httpMethod != undefined) {
                    this.httpMethod = data.httpMethod;
                }
                if ("httpUrl" in data && data.httpUrl != undefined) {
                    this.httpUrl = data.httpUrl;
                }
                if ("httpHeaders" in data && data.httpHeaders != undefined) {
                    this.httpHeaders = data.httpHeaders;
                }
                if ("httpBody" in data && data.httpBody != undefined) {
                    this.httpBody = data.httpBody;
                }
                if ("timeoutSecond" in data && data.timeoutSecond != undefined) {
                    this.timeoutSecond = data.timeoutSecond;
                }
                if ("executionPriority" in data && data.executionPriority != undefined) {
                    this.executionPriority = data.executionPriority;
                }
                if ("retryStatusCodes" in data && data.retryStatusCodes != undefined) {
                    this.retryStatusCodes = data.retryStatusCodes;
                }
                if ("retryCount" in data && data.retryCount != undefined) {
                    this.retryCount = data.retryCount;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdBy" in data && data.createdBy != undefined) {
                    this.createdBy = data.createdBy;
                }
                if ("createdUser" in data && data.createdUser != undefined) {
                    this.createdUser = data.createdUser;
                }
                if ("updatedBy" in data && data.updatedBy != undefined) {
                    this.updatedBy = data.updatedBy;
                }
                if ("updatedUser" in data && data.updatedUser != undefined) {
                    this.updatedUser = data.updatedUser;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
            }
            if (!this.httpHeaders)
                this.httpHeaders = new Map();
            if (!this.httpBody)
                this.httpBody = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantEvents() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set assistantEvents(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get httpMethod() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set httpMethod(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get httpUrl() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set httpUrl(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get httpHeaders() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set httpHeaders(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get httpBody() {
            return pb_1.Message.getField(this, 7) as any as Map<string, string>;
        }
        set httpBody(value: Map<string, string>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        get timeoutSecond() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set timeoutSecond(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get executionPriority() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set executionPriority(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get retryStatusCodes() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set retryStatusCodes(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get retryCount() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set retryCount(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get createdBy() {
            return pb_1.Message.getFieldWithDefault(this, 13, "0") as string;
        }
        set createdBy(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get createdUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 14) as dependency_2.User;
        }
        set createdUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_createdUser() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get updatedBy() {
            return pb_1.Message.getFieldWithDefault(this, 15, "0") as string;
        }
        set updatedBy(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get updatedUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 16) as dependency_2.User;
        }
        set updatedUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_updatedUser() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 17) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 18) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 18) != null;
        }
        static fromObject(data: {
            id?: string;
            assistantEvents?: string[];
            description?: string;
            httpMethod?: string;
            httpUrl?: string;
            httpHeaders?: {
                [key: string]: string;
            };
            httpBody?: {
                [key: string]: string;
            };
            timeoutSecond?: number;
            executionPriority?: number;
            retryStatusCodes?: string[];
            retryCount?: number;
            assistantId?: string;
            status?: string;
            createdBy?: string;
            createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            updatedBy?: string;
            updatedUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): AssistantWebhook {
            const message = new AssistantWebhook({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantEvents != null) {
                message.assistantEvents = data.assistantEvents;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.httpMethod != null) {
                message.httpMethod = data.httpMethod;
            }
            if (data.httpUrl != null) {
                message.httpUrl = data.httpUrl;
            }
            if (typeof data.httpHeaders == "object") {
                message.httpHeaders = new Map(Object.entries(data.httpHeaders));
            }
            if (typeof data.httpBody == "object") {
                message.httpBody = new Map(Object.entries(data.httpBody));
            }
            if (data.timeoutSecond != null) {
                message.timeoutSecond = data.timeoutSecond;
            }
            if (data.executionPriority != null) {
                message.executionPriority = data.executionPriority;
            }
            if (data.retryStatusCodes != null) {
                message.retryStatusCodes = data.retryStatusCodes;
            }
            if (data.retryCount != null) {
                message.retryCount = data.retryCount;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdBy != null) {
                message.createdBy = data.createdBy;
            }
            if (data.createdUser != null) {
                message.createdUser = dependency_2.User.fromObject(data.createdUser);
            }
            if (data.updatedBy != null) {
                message.updatedBy = data.updatedBy;
            }
            if (data.updatedUser != null) {
                message.updatedUser = dependency_2.User.fromObject(data.updatedUser);
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantEvents?: string[];
                description?: string;
                httpMethod?: string;
                httpUrl?: string;
                httpHeaders?: {
                    [key: string]: string;
                };
                httpBody?: {
                    [key: string]: string;
                };
                timeoutSecond?: number;
                executionPriority?: number;
                retryStatusCodes?: string[];
                retryCount?: number;
                assistantId?: string;
                status?: string;
                createdBy?: string;
                createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
                updatedBy?: string;
                updatedUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantEvents != null) {
                data.assistantEvents = this.assistantEvents;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.httpMethod != null) {
                data.httpMethod = this.httpMethod;
            }
            if (this.httpUrl != null) {
                data.httpUrl = this.httpUrl;
            }
            if (this.httpHeaders != null) {
                data.httpHeaders = (Object.fromEntries)(this.httpHeaders);
            }
            if (this.httpBody != null) {
                data.httpBody = (Object.fromEntries)(this.httpBody);
            }
            if (this.timeoutSecond != null) {
                data.timeoutSecond = this.timeoutSecond;
            }
            if (this.executionPriority != null) {
                data.executionPriority = this.executionPriority;
            }
            if (this.retryStatusCodes != null) {
                data.retryStatusCodes = this.retryStatusCodes;
            }
            if (this.retryCount != null) {
                data.retryCount = this.retryCount;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdBy != null) {
                data.createdBy = this.createdBy;
            }
            if (this.createdUser != null) {
                data.createdUser = this.createdUser.toObject();
            }
            if (this.updatedBy != null) {
                data.updatedBy = this.updatedBy;
            }
            if (this.updatedUser != null) {
                data.updatedUser = this.updatedUser.toObject();
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantEvents.length)
                writer.writeRepeatedString(2, this.assistantEvents);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.httpMethod.length)
                writer.writeString(4, this.httpMethod);
            if (this.httpUrl.length)
                writer.writeString(5, this.httpUrl);
            for (const [key, value] of this.httpHeaders) {
                writer.writeMessage(6, this.httpHeaders, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.httpBody) {
                writer.writeMessage(7, this.httpBody, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.timeoutSecond != 0)
                writer.writeUint32(19, this.timeoutSecond);
            if (this.executionPriority != 0)
                writer.writeUint32(20, this.executionPriority);
            if (this.retryStatusCodes.length)
                writer.writeRepeatedString(8, this.retryStatusCodes);
            if (this.retryCount != 0)
                writer.writeUint32(9, this.retryCount);
            if (this.assistantId != "0")
                writer.writeUint64String(10, this.assistantId);
            if (this.status.length)
                writer.writeString(12, this.status);
            if (this.createdBy != "0")
                writer.writeUint64String(13, this.createdBy);
            if (this.has_createdUser)
                writer.writeMessage(14, this.createdUser, () => this.createdUser.serialize(writer));
            if (this.updatedBy != "0")
                writer.writeUint64String(15, this.updatedBy);
            if (this.has_updatedUser)
                writer.writeMessage(16, this.updatedUser, () => this.updatedUser.serialize(writer));
            if (this.has_createdDate)
                writer.writeMessage(17, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(18, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantWebhook {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantWebhook();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.httpMethod = reader.readString();
                        break;
                    case 5:
                        message.httpUrl = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.httpHeaders as any, reader, reader.readString, reader.readString));
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.httpBody as any, reader, reader.readString, reader.readString));
                        break;
                    case 19:
                        message.timeoutSecond = reader.readUint32();
                        break;
                    case 20:
                        message.executionPriority = reader.readUint32();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.retryCount = reader.readUint32();
                        break;
                    case 10:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 12:
                        message.status = reader.readString();
                        break;
                    case 13:
                        message.createdBy = reader.readUint64String();
                        break;
                    case 14:
                        reader.readMessage(message.createdUser, () => message.createdUser = dependency_2.User.deserialize(reader));
                        break;
                    case 15:
                        message.updatedBy = reader.readUint64String();
                        break;
                    case 16:
                        reader.readMessage(message.updatedUser, () => message.updatedUser = dependency_2.User.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantWebhook {
            return AssistantWebhook.deserialize(bytes);
        }
    }
    export class AssistantWebhookLog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            webhookId?: string;
            request?: dependency_3.google.protobuf.Struct;
            response?: dependency_3.google.protobuf.Struct;
            status?: string;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
            assistantId?: string;
            projectId?: string;
            organizationId?: string;
            assistantConversationId?: string;
            assetPrefix?: string;
            event?: string;
            responseStatus?: string;
            timeTaken?: string;
            retryCount?: number;
            httpMethod?: string;
            httpUrl?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("webhookId" in data && data.webhookId != undefined) {
                    this.webhookId = data.webhookId;
                }
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
                if ("assistantConversationId" in data && data.assistantConversationId != undefined) {
                    this.assistantConversationId = data.assistantConversationId;
                }
                if ("assetPrefix" in data && data.assetPrefix != undefined) {
                    this.assetPrefix = data.assetPrefix;
                }
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("responseStatus" in data && data.responseStatus != undefined) {
                    this.responseStatus = data.responseStatus;
                }
                if ("timeTaken" in data && data.timeTaken != undefined) {
                    this.timeTaken = data.timeTaken;
                }
                if ("retryCount" in data && data.retryCount != undefined) {
                    this.retryCount = data.retryCount;
                }
                if ("httpMethod" in data && data.httpMethod != undefined) {
                    this.httpMethod = data.httpMethod;
                }
                if ("httpUrl" in data && data.httpUrl != undefined) {
                    this.httpUrl = data.httpUrl;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get webhookId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set webhookId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get request() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 3) as dependency_3.google.protobuf.Struct;
        }
        set request(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get response() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 4) as dependency_3.google.protobuf.Struct;
        }
        set response(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get assistantConversationId() {
            return pb_1.Message.getFieldWithDefault(this, 11, "0") as string;
        }
        set assistantConversationId(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get assetPrefix() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set assetPrefix(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get event() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set event(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get responseStatus() {
            return pb_1.Message.getFieldWithDefault(this, 14, "0") as string;
        }
        set responseStatus(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get timeTaken() {
            return pb_1.Message.getFieldWithDefault(this, 15, "0") as string;
        }
        set timeTaken(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get retryCount() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set retryCount(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get httpMethod() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set httpMethod(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get httpUrl() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set httpUrl(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        static fromObject(data: {
            id?: string;
            webhookId?: string;
            request?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            response?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            status?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            assistantId?: string;
            projectId?: string;
            organizationId?: string;
            assistantConversationId?: string;
            assetPrefix?: string;
            event?: string;
            responseStatus?: string;
            timeTaken?: string;
            retryCount?: number;
            httpMethod?: string;
            httpUrl?: string;
        }): AssistantWebhookLog {
            const message = new AssistantWebhookLog({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.webhookId != null) {
                message.webhookId = data.webhookId;
            }
            if (data.request != null) {
                message.request = dependency_3.google.protobuf.Struct.fromObject(data.request);
            }
            if (data.response != null) {
                message.response = dependency_3.google.protobuf.Struct.fromObject(data.response);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            if (data.assistantConversationId != null) {
                message.assistantConversationId = data.assistantConversationId;
            }
            if (data.assetPrefix != null) {
                message.assetPrefix = data.assetPrefix;
            }
            if (data.event != null) {
                message.event = data.event;
            }
            if (data.responseStatus != null) {
                message.responseStatus = data.responseStatus;
            }
            if (data.timeTaken != null) {
                message.timeTaken = data.timeTaken;
            }
            if (data.retryCount != null) {
                message.retryCount = data.retryCount;
            }
            if (data.httpMethod != null) {
                message.httpMethod = data.httpMethod;
            }
            if (data.httpUrl != null) {
                message.httpUrl = data.httpUrl;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                webhookId?: string;
                request?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                response?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                status?: string;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                assistantId?: string;
                projectId?: string;
                organizationId?: string;
                assistantConversationId?: string;
                assetPrefix?: string;
                event?: string;
                responseStatus?: string;
                timeTaken?: string;
                retryCount?: number;
                httpMethod?: string;
                httpUrl?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.webhookId != null) {
                data.webhookId = this.webhookId;
            }
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            if (this.assistantConversationId != null) {
                data.assistantConversationId = this.assistantConversationId;
            }
            if (this.assetPrefix != null) {
                data.assetPrefix = this.assetPrefix;
            }
            if (this.event != null) {
                data.event = this.event;
            }
            if (this.responseStatus != null) {
                data.responseStatus = this.responseStatus;
            }
            if (this.timeTaken != null) {
                data.timeTaken = this.timeTaken;
            }
            if (this.retryCount != null) {
                data.retryCount = this.retryCount;
            }
            if (this.httpMethod != null) {
                data.httpMethod = this.httpMethod;
            }
            if (this.httpUrl != null) {
                data.httpUrl = this.httpUrl;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.webhookId != "0")
                writer.writeUint64String(2, this.webhookId);
            if (this.has_request)
                writer.writeMessage(3, this.request, () => this.request.serialize(writer));
            if (this.has_response)
                writer.writeMessage(4, this.response, () => this.response.serialize(writer));
            if (this.status.length)
                writer.writeString(5, this.status);
            if (this.has_createdDate)
                writer.writeMessage(6, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(7, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.assistantId != "0")
                writer.writeUint64String(8, this.assistantId);
            if (this.projectId != "0")
                writer.writeUint64String(9, this.projectId);
            if (this.organizationId != "0")
                writer.writeUint64String(10, this.organizationId);
            if (this.assistantConversationId != "0")
                writer.writeUint64String(11, this.assistantConversationId);
            if (this.assetPrefix.length)
                writer.writeString(12, this.assetPrefix);
            if (this.event.length)
                writer.writeString(13, this.event);
            if (this.responseStatus != "0")
                writer.writeUint64String(14, this.responseStatus);
            if (this.timeTaken != "0")
                writer.writeUint64String(15, this.timeTaken);
            if (this.retryCount != 0)
                writer.writeUint32(16, this.retryCount);
            if (this.httpMethod.length)
                writer.writeString(17, this.httpMethod);
            if (this.httpUrl.length)
                writer.writeString(18, this.httpUrl);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantWebhookLog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantWebhookLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.webhookId = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.request, () => message.request = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.response, () => message.response = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 5:
                        message.status = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 9:
                        message.projectId = reader.readUint64String();
                        break;
                    case 10:
                        message.organizationId = reader.readUint64String();
                        break;
                    case 11:
                        message.assistantConversationId = reader.readUint64String();
                        break;
                    case 12:
                        message.assetPrefix = reader.readString();
                        break;
                    case 13:
                        message.event = reader.readString();
                        break;
                    case 14:
                        message.responseStatus = reader.readUint64String();
                        break;
                    case 15:
                        message.timeTaken = reader.readUint64String();
                        break;
                    case 16:
                        message.retryCount = reader.readUint32();
                        break;
                    case 17:
                        message.httpMethod = reader.readString();
                        break;
                    case 18:
                        message.httpUrl = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantWebhookLog {
            return AssistantWebhookLog.deserialize(bytes);
        }
    }
    export class CreateAssistantWebhookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistantEvents?: string[];
            description?: string;
            httpMethod?: string;
            httpUrl?: string;
            httpHeaders?: Map<string, string>;
            httpBody?: Map<string, string>;
            timeoutSecond?: number;
            retryStatusCodes?: string[];
            maxRetryCount?: number;
            assistantId?: string;
            executionPriority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistantEvents" in data && data.assistantEvents != undefined) {
                    this.assistantEvents = data.assistantEvents;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("httpMethod" in data && data.httpMethod != undefined) {
                    this.httpMethod = data.httpMethod;
                }
                if ("httpUrl" in data && data.httpUrl != undefined) {
                    this.httpUrl = data.httpUrl;
                }
                if ("httpHeaders" in data && data.httpHeaders != undefined) {
                    this.httpHeaders = data.httpHeaders;
                }
                if ("httpBody" in data && data.httpBody != undefined) {
                    this.httpBody = data.httpBody;
                }
                if ("timeoutSecond" in data && data.timeoutSecond != undefined) {
                    this.timeoutSecond = data.timeoutSecond;
                }
                if ("retryStatusCodes" in data && data.retryStatusCodes != undefined) {
                    this.retryStatusCodes = data.retryStatusCodes;
                }
                if ("maxRetryCount" in data && data.maxRetryCount != undefined) {
                    this.maxRetryCount = data.maxRetryCount;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("executionPriority" in data && data.executionPriority != undefined) {
                    this.executionPriority = data.executionPriority;
                }
            }
            if (!this.httpHeaders)
                this.httpHeaders = new Map();
            if (!this.httpBody)
                this.httpBody = new Map();
        }
        get assistantEvents() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set assistantEvents(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get httpMethod() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set httpMethod(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get httpUrl() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set httpUrl(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get httpHeaders() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set httpHeaders(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get httpBody() {
            return pb_1.Message.getField(this, 11) as any as Map<string, string>;
        }
        set httpBody(value: Map<string, string>) {
            pb_1.Message.setField(this, 11, value as any);
        }
        get timeoutSecond() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set timeoutSecond(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get retryStatusCodes() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set retryStatusCodes(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get maxRetryCount() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set maxRetryCount(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get executionPriority() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set executionPriority(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        static fromObject(data: {
            assistantEvents?: string[];
            description?: string;
            httpMethod?: string;
            httpUrl?: string;
            httpHeaders?: {
                [key: string]: string;
            };
            httpBody?: {
                [key: string]: string;
            };
            timeoutSecond?: number;
            retryStatusCodes?: string[];
            maxRetryCount?: number;
            assistantId?: string;
            executionPriority?: number;
        }): CreateAssistantWebhookRequest {
            const message = new CreateAssistantWebhookRequest({});
            if (data.assistantEvents != null) {
                message.assistantEvents = data.assistantEvents;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.httpMethod != null) {
                message.httpMethod = data.httpMethod;
            }
            if (data.httpUrl != null) {
                message.httpUrl = data.httpUrl;
            }
            if (typeof data.httpHeaders == "object") {
                message.httpHeaders = new Map(Object.entries(data.httpHeaders));
            }
            if (typeof data.httpBody == "object") {
                message.httpBody = new Map(Object.entries(data.httpBody));
            }
            if (data.timeoutSecond != null) {
                message.timeoutSecond = data.timeoutSecond;
            }
            if (data.retryStatusCodes != null) {
                message.retryStatusCodes = data.retryStatusCodes;
            }
            if (data.maxRetryCount != null) {
                message.maxRetryCount = data.maxRetryCount;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.executionPriority != null) {
                message.executionPriority = data.executionPriority;
            }
            return message;
        }
        toObject() {
            const data: {
                assistantEvents?: string[];
                description?: string;
                httpMethod?: string;
                httpUrl?: string;
                httpHeaders?: {
                    [key: string]: string;
                };
                httpBody?: {
                    [key: string]: string;
                };
                timeoutSecond?: number;
                retryStatusCodes?: string[];
                maxRetryCount?: number;
                assistantId?: string;
                executionPriority?: number;
            } = {};
            if (this.assistantEvents != null) {
                data.assistantEvents = this.assistantEvents;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.httpMethod != null) {
                data.httpMethod = this.httpMethod;
            }
            if (this.httpUrl != null) {
                data.httpUrl = this.httpUrl;
            }
            if (this.httpHeaders != null) {
                data.httpHeaders = (Object.fromEntries)(this.httpHeaders);
            }
            if (this.httpBody != null) {
                data.httpBody = (Object.fromEntries)(this.httpBody);
            }
            if (this.timeoutSecond != null) {
                data.timeoutSecond = this.timeoutSecond;
            }
            if (this.retryStatusCodes != null) {
                data.retryStatusCodes = this.retryStatusCodes;
            }
            if (this.maxRetryCount != null) {
                data.maxRetryCount = this.maxRetryCount;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.executionPriority != null) {
                data.executionPriority = this.executionPriority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assistantEvents.length)
                writer.writeRepeatedString(2, this.assistantEvents);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.httpMethod.length)
                writer.writeString(4, this.httpMethod);
            if (this.httpUrl.length)
                writer.writeString(5, this.httpUrl);
            for (const [key, value] of this.httpHeaders) {
                writer.writeMessage(6, this.httpHeaders, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.httpBody) {
                writer.writeMessage(11, this.httpBody, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.timeoutSecond != 0)
                writer.writeUint32(7, this.timeoutSecond);
            if (this.retryStatusCodes.length)
                writer.writeRepeatedString(8, this.retryStatusCodes);
            if (this.maxRetryCount != 0)
                writer.writeUint32(9, this.maxRetryCount);
            if (this.assistantId != "0")
                writer.writeUint64String(10, this.assistantId);
            if (this.executionPriority != 0)
                writer.writeUint32(20, this.executionPriority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAssistantWebhookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAssistantWebhookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.httpMethod = reader.readString();
                        break;
                    case 5:
                        message.httpUrl = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.httpHeaders as any, reader, reader.readString, reader.readString));
                        break;
                    case 11:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.httpBody as any, reader, reader.readString, reader.readString));
                        break;
                    case 7:
                        message.timeoutSecond = reader.readUint32();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.maxRetryCount = reader.readUint32();
                        break;
                    case 10:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 20:
                        message.executionPriority = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAssistantWebhookRequest {
            return CreateAssistantWebhookRequest.deserialize(bytes);
        }
    }
    export class UpdateAssistantWebhookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantEvents?: string[];
            description?: string;
            httpMethod?: string;
            httpUrl?: string;
            httpHeaders?: Map<string, string>;
            httpBody?: Map<string, string>;
            timeoutSecond?: number;
            retryStatusCodes?: string[];
            maxRetryCount?: number;
            assistantId?: string;
            executionPriority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantEvents" in data && data.assistantEvents != undefined) {
                    this.assistantEvents = data.assistantEvents;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("httpMethod" in data && data.httpMethod != undefined) {
                    this.httpMethod = data.httpMethod;
                }
                if ("httpUrl" in data && data.httpUrl != undefined) {
                    this.httpUrl = data.httpUrl;
                }
                if ("httpHeaders" in data && data.httpHeaders != undefined) {
                    this.httpHeaders = data.httpHeaders;
                }
                if ("httpBody" in data && data.httpBody != undefined) {
                    this.httpBody = data.httpBody;
                }
                if ("timeoutSecond" in data && data.timeoutSecond != undefined) {
                    this.timeoutSecond = data.timeoutSecond;
                }
                if ("retryStatusCodes" in data && data.retryStatusCodes != undefined) {
                    this.retryStatusCodes = data.retryStatusCodes;
                }
                if ("maxRetryCount" in data && data.maxRetryCount != undefined) {
                    this.maxRetryCount = data.maxRetryCount;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("executionPriority" in data && data.executionPriority != undefined) {
                    this.executionPriority = data.executionPriority;
                }
            }
            if (!this.httpHeaders)
                this.httpHeaders = new Map();
            if (!this.httpBody)
                this.httpBody = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantEvents() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set assistantEvents(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get httpMethod() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set httpMethod(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get httpUrl() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set httpUrl(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get httpHeaders() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set httpHeaders(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get httpBody() {
            return pb_1.Message.getField(this, 11) as any as Map<string, string>;
        }
        set httpBody(value: Map<string, string>) {
            pb_1.Message.setField(this, 11, value as any);
        }
        get timeoutSecond() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set timeoutSecond(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get retryStatusCodes() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set retryStatusCodes(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get maxRetryCount() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set maxRetryCount(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get executionPriority() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set executionPriority(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        static fromObject(data: {
            id?: string;
            assistantEvents?: string[];
            description?: string;
            httpMethod?: string;
            httpUrl?: string;
            httpHeaders?: {
                [key: string]: string;
            };
            httpBody?: {
                [key: string]: string;
            };
            timeoutSecond?: number;
            retryStatusCodes?: string[];
            maxRetryCount?: number;
            assistantId?: string;
            executionPriority?: number;
        }): UpdateAssistantWebhookRequest {
            const message = new UpdateAssistantWebhookRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantEvents != null) {
                message.assistantEvents = data.assistantEvents;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.httpMethod != null) {
                message.httpMethod = data.httpMethod;
            }
            if (data.httpUrl != null) {
                message.httpUrl = data.httpUrl;
            }
            if (typeof data.httpHeaders == "object") {
                message.httpHeaders = new Map(Object.entries(data.httpHeaders));
            }
            if (typeof data.httpBody == "object") {
                message.httpBody = new Map(Object.entries(data.httpBody));
            }
            if (data.timeoutSecond != null) {
                message.timeoutSecond = data.timeoutSecond;
            }
            if (data.retryStatusCodes != null) {
                message.retryStatusCodes = data.retryStatusCodes;
            }
            if (data.maxRetryCount != null) {
                message.maxRetryCount = data.maxRetryCount;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.executionPriority != null) {
                message.executionPriority = data.executionPriority;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantEvents?: string[];
                description?: string;
                httpMethod?: string;
                httpUrl?: string;
                httpHeaders?: {
                    [key: string]: string;
                };
                httpBody?: {
                    [key: string]: string;
                };
                timeoutSecond?: number;
                retryStatusCodes?: string[];
                maxRetryCount?: number;
                assistantId?: string;
                executionPriority?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantEvents != null) {
                data.assistantEvents = this.assistantEvents;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.httpMethod != null) {
                data.httpMethod = this.httpMethod;
            }
            if (this.httpUrl != null) {
                data.httpUrl = this.httpUrl;
            }
            if (this.httpHeaders != null) {
                data.httpHeaders = (Object.fromEntries)(this.httpHeaders);
            }
            if (this.httpBody != null) {
                data.httpBody = (Object.fromEntries)(this.httpBody);
            }
            if (this.timeoutSecond != null) {
                data.timeoutSecond = this.timeoutSecond;
            }
            if (this.retryStatusCodes != null) {
                data.retryStatusCodes = this.retryStatusCodes;
            }
            if (this.maxRetryCount != null) {
                data.maxRetryCount = this.maxRetryCount;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.executionPriority != null) {
                data.executionPriority = this.executionPriority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantEvents.length)
                writer.writeRepeatedString(2, this.assistantEvents);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.httpMethod.length)
                writer.writeString(4, this.httpMethod);
            if (this.httpUrl.length)
                writer.writeString(5, this.httpUrl);
            for (const [key, value] of this.httpHeaders) {
                writer.writeMessage(6, this.httpHeaders, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.httpBody) {
                writer.writeMessage(11, this.httpBody, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.timeoutSecond != 0)
                writer.writeUint32(7, this.timeoutSecond);
            if (this.retryStatusCodes.length)
                writer.writeRepeatedString(8, this.retryStatusCodes);
            if (this.maxRetryCount != 0)
                writer.writeUint32(9, this.maxRetryCount);
            if (this.assistantId != "0")
                writer.writeUint64String(10, this.assistantId);
            if (this.executionPriority != 0)
                writer.writeUint32(20, this.executionPriority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAssistantWebhookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAssistantWebhookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.httpMethod = reader.readString();
                        break;
                    case 5:
                        message.httpUrl = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.httpHeaders as any, reader, reader.readString, reader.readString));
                        break;
                    case 11:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.httpBody as any, reader, reader.readString, reader.readString));
                        break;
                    case 7:
                        message.timeoutSecond = reader.readUint32();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.maxRetryCount = reader.readUint32();
                        break;
                    case 10:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 20:
                        message.executionPriority = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAssistantWebhookRequest {
            return UpdateAssistantWebhookRequest.deserialize(bytes);
        }
    }
    export class GetAssistantWebhookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            assistantId?: string;
        }): GetAssistantWebhookRequest {
            const message = new GetAssistantWebhookRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantWebhookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantWebhookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantWebhookRequest {
            return GetAssistantWebhookRequest.deserialize(bytes);
        }
    }
    export class DeleteAssistantWebhookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            assistantId?: string;
        }): DeleteAssistantWebhookRequest {
            const message = new DeleteAssistantWebhookRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAssistantWebhookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAssistantWebhookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAssistantWebhookRequest {
            return DeleteAssistantWebhookRequest.deserialize(bytes);
        }
    }
    export class GetAssistantWebhookResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantWebhook;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, AssistantWebhook, 3) as AssistantWebhook;
        }
        set data(value: AssistantWebhook) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantWebhook.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetAssistantWebhookResponse {
            const message = new GetAssistantWebhookResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = AssistantWebhook.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantWebhook.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantWebhookResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantWebhookResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = AssistantWebhook.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantWebhookResponse {
            return GetAssistantWebhookResponse.deserialize(bytes);
        }
    }
    export class GetAllAssistantWebhookRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            webhookId?: string;
            assistantId?: string;
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("webhookId" in data && data.webhookId != undefined) {
                    this.webhookId = data.webhookId;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get webhookId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set webhookId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 2) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 3) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            webhookId?: string;
            assistantId?: string;
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
        }): GetAllAssistantWebhookRequest {
            const message = new GetAllAssistantWebhookRequest({});
            if (data.webhookId != null) {
                message.webhookId = data.webhookId;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                webhookId?: string;
                assistantId?: string;
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            } = {};
            if (this.webhookId != null) {
                data.webhookId = this.webhookId;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.webhookId != "0")
                writer.writeUint64String(1, this.webhookId);
            if (this.assistantId != "0")
                writer.writeUint64String(4, this.assistantId);
            if (this.has_paginate)
                writer.writeMessage(2, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(3, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantWebhookRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantWebhookRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.webhookId = reader.readUint64String();
                        break;
                    case 4:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantWebhookRequest {
            return GetAllAssistantWebhookRequest.deserialize(bytes);
        }
    }
    export class GetAllAssistantWebhookResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantWebhook[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, AssistantWebhook, 3) as AssistantWebhook[];
        }
        set data(value: AssistantWebhook[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantWebhook.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllAssistantWebhookResponse {
            const message = new GetAllAssistantWebhookResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => AssistantWebhook.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantWebhook.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: AssistantWebhook) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: AssistantWebhook) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantWebhookResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantWebhookResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AssistantWebhook.deserialize(reader), AssistantWebhook));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantWebhookResponse {
            return GetAllAssistantWebhookResponse.deserialize(bytes);
        }
    }
    export class GetAllAssistantWebhookLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projectId?: string;
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
            order?: dependency_2.Ordering;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
            }
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 3) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 4) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get order() {
            return pb_1.Message.getWrapperField(this, dependency_2.Ordering, 5) as dependency_2.Ordering;
        }
        set order(value: dependency_2.Ordering) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_order() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            projectId?: string;
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            order?: ReturnType<typeof dependency_2.Ordering.prototype.toObject>;
        }): GetAllAssistantWebhookLogRequest {
            const message = new GetAllAssistantWebhookLogRequest({});
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            if (data.order != null) {
                message.order = dependency_2.Ordering.fromObject(data.order);
            }
            return message;
        }
        toObject() {
            const data: {
                projectId?: string;
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
                order?: ReturnType<typeof dependency_2.Ordering.prototype.toObject>;
            } = {};
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            if (this.order != null) {
                data.order = this.order.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectId != "0")
                writer.writeUint64String(2, this.projectId);
            if (this.has_paginate)
                writer.writeMessage(3, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(4, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (this.has_order)
                writer.writeMessage(5, this.order, () => this.order.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantWebhookLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantWebhookLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.projectId = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    case 5:
                        reader.readMessage(message.order, () => message.order = dependency_2.Ordering.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantWebhookLogRequest {
            return GetAllAssistantWebhookLogRequest.deserialize(bytes);
        }
    }
    export class GetAssistantWebhookLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projectId?: string;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            projectId?: string;
            id?: string;
        }): GetAssistantWebhookLogRequest {
            const message = new GetAssistantWebhookLogRequest({});
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                projectId?: string;
                id?: string;
            } = {};
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectId != "0")
                writer.writeUint64String(2, this.projectId);
            if (this.id != "0")
                writer.writeUint64String(3, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantWebhookLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantWebhookLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.projectId = reader.readUint64String();
                        break;
                    case 3:
                        message.id = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantWebhookLogRequest {
            return GetAssistantWebhookLogRequest.deserialize(bytes);
        }
    }
    export class GetAssistantWebhookLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantWebhookLog;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, AssistantWebhookLog, 3) as AssistantWebhookLog;
        }
        set data(value: AssistantWebhookLog) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantWebhookLog.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetAssistantWebhookLogResponse {
            const message = new GetAssistantWebhookLogResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = AssistantWebhookLog.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantWebhookLog.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantWebhookLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantWebhookLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = AssistantWebhookLog.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantWebhookLogResponse {
            return GetAssistantWebhookLogResponse.deserialize(bytes);
        }
    }
    export class GetAllAssistantWebhookLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantWebhookLog[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, AssistantWebhookLog, 3) as AssistantWebhookLog[];
        }
        set data(value: AssistantWebhookLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantWebhookLog.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllAssistantWebhookLogResponse {
            const message = new GetAllAssistantWebhookLogResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => AssistantWebhookLog.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantWebhookLog.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: AssistantWebhookLog) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: AssistantWebhookLog) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantWebhookLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantWebhookLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AssistantWebhookLog.deserialize(reader), AssistantWebhookLog));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantWebhookLogResponse {
            return GetAllAssistantWebhookLogResponse.deserialize(bytes);
        }
    }
}
