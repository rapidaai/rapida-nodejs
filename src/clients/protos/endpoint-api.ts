/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: endpoint-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace endpoint_api {
    export class EndpointAttribute extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source?: string;
            sourceIdentifier?: string;
            visibility?: string;
            language?: string;
            name?: string;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("sourceIdentifier" in data && data.sourceIdentifier != undefined) {
                    this.sourceIdentifier = data.sourceIdentifier;
                }
                if ("visibility" in data && data.visibility != undefined) {
                    this.visibility = data.visibility;
                }
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sourceIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set sourceIdentifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get visibility() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set visibility(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get language() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set language(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            source?: string;
            sourceIdentifier?: string;
            visibility?: string;
            language?: string;
            name?: string;
            description?: string;
        }): EndpointAttribute {
            const message = new EndpointAttribute({});
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.sourceIdentifier != null) {
                message.sourceIdentifier = data.sourceIdentifier;
            }
            if (data.visibility != null) {
                message.visibility = data.visibility;
            }
            if (data.language != null) {
                message.language = data.language;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                source?: string;
                sourceIdentifier?: string;
                visibility?: string;
                language?: string;
                name?: string;
                description?: string;
            } = {};
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.sourceIdentifier != null) {
                data.sourceIdentifier = this.sourceIdentifier;
            }
            if (this.visibility != null) {
                data.visibility = this.visibility;
            }
            if (this.language != null) {
                data.language = this.language;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source.length)
                writer.writeString(1, this.source);
            if (this.sourceIdentifier != "0")
                writer.writeUint64String(2, this.sourceIdentifier);
            if (this.visibility.length)
                writer.writeString(4, this.visibility);
            if (this.language.length)
                writer.writeString(6, this.language);
            if (this.name.length)
                writer.writeString(7, this.name);
            if (this.description.length)
                writer.writeString(8, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndpointAttribute {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndpointAttribute();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source = reader.readString();
                        break;
                    case 2:
                        message.sourceIdentifier = reader.readUint64String();
                        break;
                    case 4:
                        message.visibility = reader.readString();
                        break;
                    case 6:
                        message.language = reader.readString();
                        break;
                    case 7:
                        message.name = reader.readString();
                        break;
                    case 8:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndpointAttribute {
            return EndpointAttribute.deserialize(bytes);
        }
    }
    export class EndpointProviderModelAttribute extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            description?: string;
            chatCompletePrompt?: dependency_2.TextChatCompletePrompt;
            modelProviderId?: string;
            modelProviderName?: string;
            endpointModelOptions?: dependency_2.Metadata[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("chatCompletePrompt" in data && data.chatCompletePrompt != undefined) {
                    this.chatCompletePrompt = data.chatCompletePrompt;
                }
                if ("modelProviderId" in data && data.modelProviderId != undefined) {
                    this.modelProviderId = data.modelProviderId;
                }
                if ("modelProviderName" in data && data.modelProviderName != undefined) {
                    this.modelProviderName = data.modelProviderName;
                }
                if ("endpointModelOptions" in data && data.endpointModelOptions != undefined) {
                    this.endpointModelOptions = data.endpointModelOptions;
                }
            }
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get chatCompletePrompt() {
            return pb_1.Message.getWrapperField(this, dependency_2.TextChatCompletePrompt, 2) as dependency_2.TextChatCompletePrompt;
        }
        set chatCompletePrompt(value: dependency_2.TextChatCompletePrompt) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_chatCompletePrompt() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get modelProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
        }
        set modelProviderId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get modelProviderName() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set modelProviderName(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get endpointModelOptions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 8) as dependency_2.Metadata[];
        }
        set endpointModelOptions(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            description?: string;
            chatCompletePrompt?: ReturnType<typeof dependency_2.TextChatCompletePrompt.prototype.toObject>;
            modelProviderId?: string;
            modelProviderName?: string;
            endpointModelOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
        }): EndpointProviderModelAttribute {
            const message = new EndpointProviderModelAttribute({});
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.chatCompletePrompt != null) {
                message.chatCompletePrompt = dependency_2.TextChatCompletePrompt.fromObject(data.chatCompletePrompt);
            }
            if (data.modelProviderId != null) {
                message.modelProviderId = data.modelProviderId;
            }
            if (data.modelProviderName != null) {
                message.modelProviderName = data.modelProviderName;
            }
            if (data.endpointModelOptions != null) {
                message.endpointModelOptions = data.endpointModelOptions.map(item => dependency_2.Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                description?: string;
                chatCompletePrompt?: ReturnType<typeof dependency_2.TextChatCompletePrompt.prototype.toObject>;
                modelProviderId?: string;
                modelProviderName?: string;
                endpointModelOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            } = {};
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.chatCompletePrompt != null) {
                data.chatCompletePrompt = this.chatCompletePrompt.toObject();
            }
            if (this.modelProviderId != null) {
                data.modelProviderId = this.modelProviderId;
            }
            if (this.modelProviderName != null) {
                data.modelProviderName = this.modelProviderName;
            }
            if (this.endpointModelOptions != null) {
                data.endpointModelOptions = this.endpointModelOptions.map((item: dependency_2.Metadata) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.description.length)
                writer.writeString(1, this.description);
            if (this.has_chatCompletePrompt)
                writer.writeMessage(2, this.chatCompletePrompt, () => this.chatCompletePrompt.serialize(writer));
            if (this.modelProviderId != "0")
                writer.writeUint64String(6, this.modelProviderId);
            if (this.modelProviderName.length)
                writer.writeString(7, this.modelProviderName);
            if (this.endpointModelOptions.length)
                writer.writeRepeatedMessage(8, this.endpointModelOptions, (item: dependency_2.Metadata) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndpointProviderModelAttribute {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndpointProviderModelAttribute();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.description = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.chatCompletePrompt, () => message.chatCompletePrompt = dependency_2.TextChatCompletePrompt.deserialize(reader));
                        break;
                    case 6:
                        message.modelProviderId = reader.readUint64String();
                        break;
                    case 7:
                        message.modelProviderName = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.endpointModelOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndpointProviderModelAttribute {
            return EndpointProviderModelAttribute.deserialize(bytes);
        }
    }
    export class CreateEndpointRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointProviderModelAttribute?: EndpointProviderModelAttribute;
            endpointAttribute?: EndpointAttribute;
            retryConfiguration?: EndpointRetryConfiguration;
            cacheConfiguration?: EndpointCacheConfiguration;
            tags?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointProviderModelAttribute" in data && data.endpointProviderModelAttribute != undefined) {
                    this.endpointProviderModelAttribute = data.endpointProviderModelAttribute;
                }
                if ("endpointAttribute" in data && data.endpointAttribute != undefined) {
                    this.endpointAttribute = data.endpointAttribute;
                }
                if ("retryConfiguration" in data && data.retryConfiguration != undefined) {
                    this.retryConfiguration = data.retryConfiguration;
                }
                if ("cacheConfiguration" in data && data.cacheConfiguration != undefined) {
                    this.cacheConfiguration = data.cacheConfiguration;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
        }
        get endpointProviderModelAttribute() {
            return pb_1.Message.getWrapperField(this, EndpointProviderModelAttribute, 1) as EndpointProviderModelAttribute;
        }
        set endpointProviderModelAttribute(value: EndpointProviderModelAttribute) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_endpointProviderModelAttribute() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get endpointAttribute() {
            return pb_1.Message.getWrapperField(this, EndpointAttribute, 2) as EndpointAttribute;
        }
        set endpointAttribute(value: EndpointAttribute) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_endpointAttribute() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get retryConfiguration() {
            return pb_1.Message.getWrapperField(this, EndpointRetryConfiguration, 3) as EndpointRetryConfiguration;
        }
        set retryConfiguration(value: EndpointRetryConfiguration) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_retryConfiguration() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get cacheConfiguration() {
            return pb_1.Message.getWrapperField(this, EndpointCacheConfiguration, 4) as EndpointCacheConfiguration;
        }
        set cacheConfiguration(value: EndpointCacheConfiguration) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_cacheConfiguration() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            endpointProviderModelAttribute?: ReturnType<typeof EndpointProviderModelAttribute.prototype.toObject>;
            endpointAttribute?: ReturnType<typeof EndpointAttribute.prototype.toObject>;
            retryConfiguration?: ReturnType<typeof EndpointRetryConfiguration.prototype.toObject>;
            cacheConfiguration?: ReturnType<typeof EndpointCacheConfiguration.prototype.toObject>;
            tags?: string[];
        }): CreateEndpointRequest {
            const message = new CreateEndpointRequest({});
            if (data.endpointProviderModelAttribute != null) {
                message.endpointProviderModelAttribute = EndpointProviderModelAttribute.fromObject(data.endpointProviderModelAttribute);
            }
            if (data.endpointAttribute != null) {
                message.endpointAttribute = EndpointAttribute.fromObject(data.endpointAttribute);
            }
            if (data.retryConfiguration != null) {
                message.retryConfiguration = EndpointRetryConfiguration.fromObject(data.retryConfiguration);
            }
            if (data.cacheConfiguration != null) {
                message.cacheConfiguration = EndpointCacheConfiguration.fromObject(data.cacheConfiguration);
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            return message;
        }
        toObject() {
            const data: {
                endpointProviderModelAttribute?: ReturnType<typeof EndpointProviderModelAttribute.prototype.toObject>;
                endpointAttribute?: ReturnType<typeof EndpointAttribute.prototype.toObject>;
                retryConfiguration?: ReturnType<typeof EndpointRetryConfiguration.prototype.toObject>;
                cacheConfiguration?: ReturnType<typeof EndpointCacheConfiguration.prototype.toObject>;
                tags?: string[];
            } = {};
            if (this.endpointProviderModelAttribute != null) {
                data.endpointProviderModelAttribute = this.endpointProviderModelAttribute.toObject();
            }
            if (this.endpointAttribute != null) {
                data.endpointAttribute = this.endpointAttribute.toObject();
            }
            if (this.retryConfiguration != null) {
                data.retryConfiguration = this.retryConfiguration.toObject();
            }
            if (this.cacheConfiguration != null) {
                data.cacheConfiguration = this.cacheConfiguration.toObject();
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_endpointProviderModelAttribute)
                writer.writeMessage(1, this.endpointProviderModelAttribute, () => this.endpointProviderModelAttribute.serialize(writer));
            if (this.has_endpointAttribute)
                writer.writeMessage(2, this.endpointAttribute, () => this.endpointAttribute.serialize(writer));
            if (this.has_retryConfiguration)
                writer.writeMessage(3, this.retryConfiguration, () => this.retryConfiguration.serialize(writer));
            if (this.has_cacheConfiguration)
                writer.writeMessage(4, this.cacheConfiguration, () => this.cacheConfiguration.serialize(writer));
            if (this.tags.length)
                writer.writeRepeatedString(5, this.tags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEndpointRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEndpointRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.endpointProviderModelAttribute, () => message.endpointProviderModelAttribute = EndpointProviderModelAttribute.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.endpointAttribute, () => message.endpointAttribute = EndpointAttribute.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.retryConfiguration, () => message.retryConfiguration = EndpointRetryConfiguration.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.cacheConfiguration, () => message.cacheConfiguration = EndpointCacheConfiguration.deserialize(reader));
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEndpointRequest {
            return CreateEndpointRequest.deserialize(bytes);
        }
    }
    export class CreateEndpointResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: Endpoint;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, Endpoint, 3) as Endpoint;
        }
        set data(value: Endpoint) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Endpoint.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): CreateEndpointResponse {
            const message = new CreateEndpointResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = Endpoint.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Endpoint.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEndpointResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEndpointResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = Endpoint.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEndpointResponse {
            return CreateEndpointResponse.deserialize(bytes);
        }
    }
    export class EndpointProviderModel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            chatCompletePrompt?: dependency_2.TextChatCompletePrompt;
            modelProviderId?: string;
            modelProviderName?: string;
            endpointModelOptions?: dependency_2.Metadata[];
            status?: string;
            createdBy?: string;
            createdUser?: dependency_2.User;
            updatedBy?: string;
            updatedUser?: dependency_2.User;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
            endpointId?: string;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("chatCompletePrompt" in data && data.chatCompletePrompt != undefined) {
                    this.chatCompletePrompt = data.chatCompletePrompt;
                }
                if ("modelProviderId" in data && data.modelProviderId != undefined) {
                    this.modelProviderId = data.modelProviderId;
                }
                if ("modelProviderName" in data && data.modelProviderName != undefined) {
                    this.modelProviderName = data.modelProviderName;
                }
                if ("endpointModelOptions" in data && data.endpointModelOptions != undefined) {
                    this.endpointModelOptions = data.endpointModelOptions;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdBy" in data && data.createdBy != undefined) {
                    this.createdBy = data.createdBy;
                }
                if ("createdUser" in data && data.createdUser != undefined) {
                    this.createdUser = data.createdUser;
                }
                if ("updatedBy" in data && data.updatedBy != undefined) {
                    this.updatedBy = data.updatedBy;
                }
                if ("updatedUser" in data && data.updatedUser != undefined) {
                    this.updatedUser = data.updatedUser;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get chatCompletePrompt() {
            return pb_1.Message.getWrapperField(this, dependency_2.TextChatCompletePrompt, 2) as dependency_2.TextChatCompletePrompt;
        }
        set chatCompletePrompt(value: dependency_2.TextChatCompletePrompt) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_chatCompletePrompt() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get modelProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set modelProviderId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get modelProviderName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set modelProviderName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get endpointModelOptions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 5) as dependency_2.Metadata[];
        }
        set endpointModelOptions(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get createdBy() {
            return pb_1.Message.getFieldWithDefault(this, 13, "0") as string;
        }
        set createdBy(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get createdUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 14) as dependency_2.User;
        }
        set createdUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_createdUser() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get updatedBy() {
            return pb_1.Message.getFieldWithDefault(this, 15, "0") as string;
        }
        set updatedBy(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get updatedUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 16) as dependency_2.User;
        }
        set updatedUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_updatedUser() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 17) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 18) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 19, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        static fromObject(data: {
            id?: string;
            chatCompletePrompt?: ReturnType<typeof dependency_2.TextChatCompletePrompt.prototype.toObject>;
            modelProviderId?: string;
            modelProviderName?: string;
            endpointModelOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            status?: string;
            createdBy?: string;
            createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            updatedBy?: string;
            updatedUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            endpointId?: string;
            description?: string;
        }): EndpointProviderModel {
            const message = new EndpointProviderModel({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.chatCompletePrompt != null) {
                message.chatCompletePrompt = dependency_2.TextChatCompletePrompt.fromObject(data.chatCompletePrompt);
            }
            if (data.modelProviderId != null) {
                message.modelProviderId = data.modelProviderId;
            }
            if (data.modelProviderName != null) {
                message.modelProviderName = data.modelProviderName;
            }
            if (data.endpointModelOptions != null) {
                message.endpointModelOptions = data.endpointModelOptions.map(item => dependency_2.Metadata.fromObject(item));
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdBy != null) {
                message.createdBy = data.createdBy;
            }
            if (data.createdUser != null) {
                message.createdUser = dependency_2.User.fromObject(data.createdUser);
            }
            if (data.updatedBy != null) {
                message.updatedBy = data.updatedBy;
            }
            if (data.updatedUser != null) {
                message.updatedUser = dependency_2.User.fromObject(data.updatedUser);
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                chatCompletePrompt?: ReturnType<typeof dependency_2.TextChatCompletePrompt.prototype.toObject>;
                modelProviderId?: string;
                modelProviderName?: string;
                endpointModelOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
                status?: string;
                createdBy?: string;
                createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
                updatedBy?: string;
                updatedUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                endpointId?: string;
                description?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.chatCompletePrompt != null) {
                data.chatCompletePrompt = this.chatCompletePrompt.toObject();
            }
            if (this.modelProviderId != null) {
                data.modelProviderId = this.modelProviderId;
            }
            if (this.modelProviderName != null) {
                data.modelProviderName = this.modelProviderName;
            }
            if (this.endpointModelOptions != null) {
                data.endpointModelOptions = this.endpointModelOptions.map((item: dependency_2.Metadata) => item.toObject());
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdBy != null) {
                data.createdBy = this.createdBy;
            }
            if (this.createdUser != null) {
                data.createdUser = this.createdUser.toObject();
            }
            if (this.updatedBy != null) {
                data.updatedBy = this.updatedBy;
            }
            if (this.updatedUser != null) {
                data.updatedUser = this.updatedUser.toObject();
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.has_chatCompletePrompt)
                writer.writeMessage(2, this.chatCompletePrompt, () => this.chatCompletePrompt.serialize(writer));
            if (this.modelProviderId != "0")
                writer.writeUint64String(3, this.modelProviderId);
            if (this.modelProviderName.length)
                writer.writeString(4, this.modelProviderName);
            if (this.endpointModelOptions.length)
                writer.writeRepeatedMessage(5, this.endpointModelOptions, (item: dependency_2.Metadata) => item.serialize(writer));
            if (this.status.length)
                writer.writeString(12, this.status);
            if (this.createdBy != "0")
                writer.writeUint64String(13, this.createdBy);
            if (this.has_createdUser)
                writer.writeMessage(14, this.createdUser, () => this.createdUser.serialize(writer));
            if (this.updatedBy != "0")
                writer.writeUint64String(15, this.updatedBy);
            if (this.has_updatedUser)
                writer.writeMessage(16, this.updatedUser, () => this.updatedUser.serialize(writer));
            if (this.has_createdDate)
                writer.writeMessage(17, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(18, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.endpointId != "0")
                writer.writeUint64String(19, this.endpointId);
            if (this.description.length)
                writer.writeString(20, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndpointProviderModel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndpointProviderModel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.chatCompletePrompt, () => message.chatCompletePrompt = dependency_2.TextChatCompletePrompt.deserialize(reader));
                        break;
                    case 3:
                        message.modelProviderId = reader.readUint64String();
                        break;
                    case 4:
                        message.modelProviderName = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.endpointModelOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    case 12:
                        message.status = reader.readString();
                        break;
                    case 13:
                        message.createdBy = reader.readUint64String();
                        break;
                    case 14:
                        reader.readMessage(message.createdUser, () => message.createdUser = dependency_2.User.deserialize(reader));
                        break;
                    case 15:
                        message.updatedBy = reader.readUint64String();
                        break;
                    case 16:
                        reader.readMessage(message.updatedUser, () => message.updatedUser = dependency_2.User.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 19:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 20:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndpointProviderModel {
            return EndpointProviderModel.deserialize(bytes);
        }
    }
    export class AggregatedEndpointAnalytics extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            count?: string;
            totalInputCost?: number;
            totalOutputCost?: number;
            totalToken?: string;
            successCount?: string;
            errorCount?: string;
            p50Latency?: number;
            p99Latency?: number;
            lastActivity?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("totalInputCost" in data && data.totalInputCost != undefined) {
                    this.totalInputCost = data.totalInputCost;
                }
                if ("totalOutputCost" in data && data.totalOutputCost != undefined) {
                    this.totalOutputCost = data.totalOutputCost;
                }
                if ("totalToken" in data && data.totalToken != undefined) {
                    this.totalToken = data.totalToken;
                }
                if ("successCount" in data && data.successCount != undefined) {
                    this.successCount = data.successCount;
                }
                if ("errorCount" in data && data.errorCount != undefined) {
                    this.errorCount = data.errorCount;
                }
                if ("p50Latency" in data && data.p50Latency != undefined) {
                    this.p50Latency = data.p50Latency;
                }
                if ("p99Latency" in data && data.p99Latency != undefined) {
                    this.p99Latency = data.p99Latency;
                }
                if ("lastActivity" in data && data.lastActivity != undefined) {
                    this.lastActivity = data.lastActivity;
                }
            }
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set count(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get totalInputCost() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalInputCost(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get totalOutputCost() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set totalOutputCost(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get totalToken() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set totalToken(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get successCount() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set successCount(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get errorCount() {
            return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
        }
        set errorCount(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get p50Latency() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set p50Latency(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get p99Latency() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set p99Latency(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get lastActivity() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 9) as dependency_1.google.protobuf.Timestamp;
        }
        set lastActivity(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_lastActivity() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            count?: string;
            totalInputCost?: number;
            totalOutputCost?: number;
            totalToken?: string;
            successCount?: string;
            errorCount?: string;
            p50Latency?: number;
            p99Latency?: number;
            lastActivity?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): AggregatedEndpointAnalytics {
            const message = new AggregatedEndpointAnalytics({});
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.totalInputCost != null) {
                message.totalInputCost = data.totalInputCost;
            }
            if (data.totalOutputCost != null) {
                message.totalOutputCost = data.totalOutputCost;
            }
            if (data.totalToken != null) {
                message.totalToken = data.totalToken;
            }
            if (data.successCount != null) {
                message.successCount = data.successCount;
            }
            if (data.errorCount != null) {
                message.errorCount = data.errorCount;
            }
            if (data.p50Latency != null) {
                message.p50Latency = data.p50Latency;
            }
            if (data.p99Latency != null) {
                message.p99Latency = data.p99Latency;
            }
            if (data.lastActivity != null) {
                message.lastActivity = dependency_1.google.protobuf.Timestamp.fromObject(data.lastActivity);
            }
            return message;
        }
        toObject() {
            const data: {
                count?: string;
                totalInputCost?: number;
                totalOutputCost?: number;
                totalToken?: string;
                successCount?: string;
                errorCount?: string;
                p50Latency?: number;
                p99Latency?: number;
                lastActivity?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.totalInputCost != null) {
                data.totalInputCost = this.totalInputCost;
            }
            if (this.totalOutputCost != null) {
                data.totalOutputCost = this.totalOutputCost;
            }
            if (this.totalToken != null) {
                data.totalToken = this.totalToken;
            }
            if (this.successCount != null) {
                data.successCount = this.successCount;
            }
            if (this.errorCount != null) {
                data.errorCount = this.errorCount;
            }
            if (this.p50Latency != null) {
                data.p50Latency = this.p50Latency;
            }
            if (this.p99Latency != null) {
                data.p99Latency = this.p99Latency;
            }
            if (this.lastActivity != null) {
                data.lastActivity = this.lastActivity.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.count != "0")
                writer.writeUint64String(1, this.count);
            if (this.totalInputCost != 0)
                writer.writeFloat(2, this.totalInputCost);
            if (this.totalOutputCost != 0)
                writer.writeFloat(3, this.totalOutputCost);
            if (this.totalToken != "0")
                writer.writeUint64String(4, this.totalToken);
            if (this.successCount != "0")
                writer.writeUint64String(5, this.successCount);
            if (this.errorCount != "0")
                writer.writeUint64String(6, this.errorCount);
            if (this.p50Latency != 0)
                writer.writeFloat(7, this.p50Latency);
            if (this.p99Latency != 0)
                writer.writeFloat(8, this.p99Latency);
            if (this.has_lastActivity)
                writer.writeMessage(9, this.lastActivity, () => this.lastActivity.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AggregatedEndpointAnalytics {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AggregatedEndpointAnalytics();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.count = reader.readUint64String();
                        break;
                    case 2:
                        message.totalInputCost = reader.readFloat();
                        break;
                    case 3:
                        message.totalOutputCost = reader.readFloat();
                        break;
                    case 4:
                        message.totalToken = reader.readUint64String();
                        break;
                    case 5:
                        message.successCount = reader.readUint64String();
                        break;
                    case 6:
                        message.errorCount = reader.readUint64String();
                        break;
                    case 7:
                        message.p50Latency = reader.readFloat();
                        break;
                    case 8:
                        message.p99Latency = reader.readFloat();
                        break;
                    case 9:
                        reader.readMessage(message.lastActivity, () => message.lastActivity = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AggregatedEndpointAnalytics {
            return AggregatedEndpointAnalytics.deserialize(bytes);
        }
    }
    export class Endpoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            status?: string;
            visibility?: string;
            source?: string;
            sourceIdentifier?: string;
            projectId?: string;
            organizationId?: string;
            endpointProviderModelId?: string;
            endpointProviderModel?: EndpointProviderModel;
            endpointAnalytics?: AggregatedEndpointAnalytics;
            endpointRetry?: EndpointRetryConfiguration;
            endpointCaching?: EndpointCacheConfiguration;
            endpointTag?: dependency_2.Tag;
            language?: string;
            organization?: dependency_2.Organization;
            name?: string;
            description?: string;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
            createdBy?: string;
            createdUser?: dependency_2.User;
            updatedBy?: string;
            updatedUser?: dependency_2.User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("visibility" in data && data.visibility != undefined) {
                    this.visibility = data.visibility;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("sourceIdentifier" in data && data.sourceIdentifier != undefined) {
                    this.sourceIdentifier = data.sourceIdentifier;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
                if ("endpointProviderModelId" in data && data.endpointProviderModelId != undefined) {
                    this.endpointProviderModelId = data.endpointProviderModelId;
                }
                if ("endpointProviderModel" in data && data.endpointProviderModel != undefined) {
                    this.endpointProviderModel = data.endpointProviderModel;
                }
                if ("endpointAnalytics" in data && data.endpointAnalytics != undefined) {
                    this.endpointAnalytics = data.endpointAnalytics;
                }
                if ("endpointRetry" in data && data.endpointRetry != undefined) {
                    this.endpointRetry = data.endpointRetry;
                }
                if ("endpointCaching" in data && data.endpointCaching != undefined) {
                    this.endpointCaching = data.endpointCaching;
                }
                if ("endpointTag" in data && data.endpointTag != undefined) {
                    this.endpointTag = data.endpointTag;
                }
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
                if ("organization" in data && data.organization != undefined) {
                    this.organization = data.organization;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("createdBy" in data && data.createdBy != undefined) {
                    this.createdBy = data.createdBy;
                }
                if ("createdUser" in data && data.createdUser != undefined) {
                    this.createdUser = data.createdUser;
                }
                if ("updatedBy" in data && data.updatedBy != undefined) {
                    this.updatedBy = data.updatedBy;
                }
                if ("updatedUser" in data && data.updatedUser != undefined) {
                    this.updatedUser = data.updatedUser;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get visibility() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set visibility(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get sourceIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set sourceIdentifier(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get endpointProviderModelId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "0") as string;
        }
        set endpointProviderModelId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get endpointProviderModel() {
            return pb_1.Message.getWrapperField(this, EndpointProviderModel, 10) as EndpointProviderModel;
        }
        set endpointProviderModel(value: EndpointProviderModel) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_endpointProviderModel() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get endpointAnalytics() {
            return pb_1.Message.getWrapperField(this, AggregatedEndpointAnalytics, 11) as AggregatedEndpointAnalytics;
        }
        set endpointAnalytics(value: AggregatedEndpointAnalytics) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_endpointAnalytics() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get endpointRetry() {
            return pb_1.Message.getWrapperField(this, EndpointRetryConfiguration, 12) as EndpointRetryConfiguration;
        }
        set endpointRetry(value: EndpointRetryConfiguration) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_endpointRetry() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get endpointCaching() {
            return pb_1.Message.getWrapperField(this, EndpointCacheConfiguration, 13) as EndpointCacheConfiguration;
        }
        set endpointCaching(value: EndpointCacheConfiguration) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_endpointCaching() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get endpointTag() {
            return pb_1.Message.getWrapperField(this, dependency_2.Tag, 14) as dependency_2.Tag;
        }
        set endpointTag(value: dependency_2.Tag) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_endpointTag() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get language() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set language(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get organization() {
            return pb_1.Message.getWrapperField(this, dependency_2.Organization, 17) as dependency_2.Organization;
        }
        set organization(value: dependency_2.Organization) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_organization() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 20) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 21) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 21, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get createdBy() {
            return pb_1.Message.getFieldWithDefault(this, 22, "0") as string;
        }
        set createdBy(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get createdUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 23) as dependency_2.User;
        }
        set createdUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get has_createdUser() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get updatedBy() {
            return pb_1.Message.getFieldWithDefault(this, 24, "0") as string;
        }
        set updatedBy(value: string) {
            pb_1.Message.setField(this, 24, value);
        }
        get updatedUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 25) as dependency_2.User;
        }
        set updatedUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get has_updatedUser() {
            return pb_1.Message.getField(this, 25) != null;
        }
        static fromObject(data: {
            id?: string;
            status?: string;
            visibility?: string;
            source?: string;
            sourceIdentifier?: string;
            projectId?: string;
            organizationId?: string;
            endpointProviderModelId?: string;
            endpointProviderModel?: ReturnType<typeof EndpointProviderModel.prototype.toObject>;
            endpointAnalytics?: ReturnType<typeof AggregatedEndpointAnalytics.prototype.toObject>;
            endpointRetry?: ReturnType<typeof EndpointRetryConfiguration.prototype.toObject>;
            endpointCaching?: ReturnType<typeof EndpointCacheConfiguration.prototype.toObject>;
            endpointTag?: ReturnType<typeof dependency_2.Tag.prototype.toObject>;
            language?: string;
            organization?: ReturnType<typeof dependency_2.Organization.prototype.toObject>;
            name?: string;
            description?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            createdBy?: string;
            createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            updatedBy?: string;
            updatedUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
        }): Endpoint {
            const message = new Endpoint({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.visibility != null) {
                message.visibility = data.visibility;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.sourceIdentifier != null) {
                message.sourceIdentifier = data.sourceIdentifier;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            if (data.endpointProviderModelId != null) {
                message.endpointProviderModelId = data.endpointProviderModelId;
            }
            if (data.endpointProviderModel != null) {
                message.endpointProviderModel = EndpointProviderModel.fromObject(data.endpointProviderModel);
            }
            if (data.endpointAnalytics != null) {
                message.endpointAnalytics = AggregatedEndpointAnalytics.fromObject(data.endpointAnalytics);
            }
            if (data.endpointRetry != null) {
                message.endpointRetry = EndpointRetryConfiguration.fromObject(data.endpointRetry);
            }
            if (data.endpointCaching != null) {
                message.endpointCaching = EndpointCacheConfiguration.fromObject(data.endpointCaching);
            }
            if (data.endpointTag != null) {
                message.endpointTag = dependency_2.Tag.fromObject(data.endpointTag);
            }
            if (data.language != null) {
                message.language = data.language;
            }
            if (data.organization != null) {
                message.organization = dependency_2.Organization.fromObject(data.organization);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.createdBy != null) {
                message.createdBy = data.createdBy;
            }
            if (data.createdUser != null) {
                message.createdUser = dependency_2.User.fromObject(data.createdUser);
            }
            if (data.updatedBy != null) {
                message.updatedBy = data.updatedBy;
            }
            if (data.updatedUser != null) {
                message.updatedUser = dependency_2.User.fromObject(data.updatedUser);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                status?: string;
                visibility?: string;
                source?: string;
                sourceIdentifier?: string;
                projectId?: string;
                organizationId?: string;
                endpointProviderModelId?: string;
                endpointProviderModel?: ReturnType<typeof EndpointProviderModel.prototype.toObject>;
                endpointAnalytics?: ReturnType<typeof AggregatedEndpointAnalytics.prototype.toObject>;
                endpointRetry?: ReturnType<typeof EndpointRetryConfiguration.prototype.toObject>;
                endpointCaching?: ReturnType<typeof EndpointCacheConfiguration.prototype.toObject>;
                endpointTag?: ReturnType<typeof dependency_2.Tag.prototype.toObject>;
                language?: string;
                organization?: ReturnType<typeof dependency_2.Organization.prototype.toObject>;
                name?: string;
                description?: string;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                createdBy?: string;
                createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
                updatedBy?: string;
                updatedUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.visibility != null) {
                data.visibility = this.visibility;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.sourceIdentifier != null) {
                data.sourceIdentifier = this.sourceIdentifier;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            if (this.endpointProviderModelId != null) {
                data.endpointProviderModelId = this.endpointProviderModelId;
            }
            if (this.endpointProviderModel != null) {
                data.endpointProviderModel = this.endpointProviderModel.toObject();
            }
            if (this.endpointAnalytics != null) {
                data.endpointAnalytics = this.endpointAnalytics.toObject();
            }
            if (this.endpointRetry != null) {
                data.endpointRetry = this.endpointRetry.toObject();
            }
            if (this.endpointCaching != null) {
                data.endpointCaching = this.endpointCaching.toObject();
            }
            if (this.endpointTag != null) {
                data.endpointTag = this.endpointTag.toObject();
            }
            if (this.language != null) {
                data.language = this.language;
            }
            if (this.organization != null) {
                data.organization = this.organization.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.createdBy != null) {
                data.createdBy = this.createdBy;
            }
            if (this.createdUser != null) {
                data.createdUser = this.createdUser.toObject();
            }
            if (this.updatedBy != null) {
                data.updatedBy = this.updatedBy;
            }
            if (this.updatedUser != null) {
                data.updatedUser = this.updatedUser.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.status.length)
                writer.writeString(2, this.status);
            if (this.visibility.length)
                writer.writeString(3, this.visibility);
            if (this.source.length)
                writer.writeString(4, this.source);
            if (this.sourceIdentifier != "0")
                writer.writeUint64String(5, this.sourceIdentifier);
            if (this.projectId != "0")
                writer.writeUint64String(7, this.projectId);
            if (this.organizationId != "0")
                writer.writeUint64String(8, this.organizationId);
            if (this.endpointProviderModelId != "0")
                writer.writeUint64String(9, this.endpointProviderModelId);
            if (this.has_endpointProviderModel)
                writer.writeMessage(10, this.endpointProviderModel, () => this.endpointProviderModel.serialize(writer));
            if (this.has_endpointAnalytics)
                writer.writeMessage(11, this.endpointAnalytics, () => this.endpointAnalytics.serialize(writer));
            if (this.has_endpointRetry)
                writer.writeMessage(12, this.endpointRetry, () => this.endpointRetry.serialize(writer));
            if (this.has_endpointCaching)
                writer.writeMessage(13, this.endpointCaching, () => this.endpointCaching.serialize(writer));
            if (this.has_endpointTag)
                writer.writeMessage(14, this.endpointTag, () => this.endpointTag.serialize(writer));
            if (this.language.length)
                writer.writeString(16, this.language);
            if (this.has_organization)
                writer.writeMessage(17, this.organization, () => this.organization.serialize(writer));
            if (this.name.length)
                writer.writeString(18, this.name);
            if (this.description.length)
                writer.writeString(19, this.description);
            if (this.has_createdDate)
                writer.writeMessage(20, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(21, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.createdBy != "0")
                writer.writeUint64String(22, this.createdBy);
            if (this.has_createdUser)
                writer.writeMessage(23, this.createdUser, () => this.createdUser.serialize(writer));
            if (this.updatedBy != "0")
                writer.writeUint64String(24, this.updatedBy);
            if (this.has_updatedUser)
                writer.writeMessage(25, this.updatedUser, () => this.updatedUser.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Endpoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Endpoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.status = reader.readString();
                        break;
                    case 3:
                        message.visibility = reader.readString();
                        break;
                    case 4:
                        message.source = reader.readString();
                        break;
                    case 5:
                        message.sourceIdentifier = reader.readUint64String();
                        break;
                    case 7:
                        message.projectId = reader.readUint64String();
                        break;
                    case 8:
                        message.organizationId = reader.readUint64String();
                        break;
                    case 9:
                        message.endpointProviderModelId = reader.readUint64String();
                        break;
                    case 10:
                        reader.readMessage(message.endpointProviderModel, () => message.endpointProviderModel = EndpointProviderModel.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.endpointAnalytics, () => message.endpointAnalytics = AggregatedEndpointAnalytics.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.endpointRetry, () => message.endpointRetry = EndpointRetryConfiguration.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.endpointCaching, () => message.endpointCaching = EndpointCacheConfiguration.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.endpointTag, () => message.endpointTag = dependency_2.Tag.deserialize(reader));
                        break;
                    case 16:
                        message.language = reader.readString();
                        break;
                    case 17:
                        reader.readMessage(message.organization, () => message.organization = dependency_2.Organization.deserialize(reader));
                        break;
                    case 18:
                        message.name = reader.readString();
                        break;
                    case 19:
                        message.description = reader.readString();
                        break;
                    case 20:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 22:
                        message.createdBy = reader.readUint64String();
                        break;
                    case 23:
                        reader.readMessage(message.createdUser, () => message.createdUser = dependency_2.User.deserialize(reader));
                        break;
                    case 24:
                        message.updatedBy = reader.readUint64String();
                        break;
                    case 25:
                        reader.readMessage(message.updatedUser, () => message.updatedUser = dependency_2.User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Endpoint {
            return Endpoint.deserialize(bytes);
        }
    }
    export class CreateEndpointProviderModelRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointId?: string;
            endpointProviderModelAttribute?: EndpointProviderModelAttribute;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("endpointProviderModelAttribute" in data && data.endpointProviderModelAttribute != undefined) {
                    this.endpointProviderModelAttribute = data.endpointProviderModelAttribute;
                }
            }
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get endpointProviderModelAttribute() {
            return pb_1.Message.getWrapperField(this, EndpointProviderModelAttribute, 2) as EndpointProviderModelAttribute;
        }
        set endpointProviderModelAttribute(value: EndpointProviderModelAttribute) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_endpointProviderModelAttribute() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            endpointId?: string;
            endpointProviderModelAttribute?: ReturnType<typeof EndpointProviderModelAttribute.prototype.toObject>;
        }): CreateEndpointProviderModelRequest {
            const message = new CreateEndpointProviderModelRequest({});
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.endpointProviderModelAttribute != null) {
                message.endpointProviderModelAttribute = EndpointProviderModelAttribute.fromObject(data.endpointProviderModelAttribute);
            }
            return message;
        }
        toObject() {
            const data: {
                endpointId?: string;
                endpointProviderModelAttribute?: ReturnType<typeof EndpointProviderModelAttribute.prototype.toObject>;
            } = {};
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.endpointProviderModelAttribute != null) {
                data.endpointProviderModelAttribute = this.endpointProviderModelAttribute.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpointId != "0")
                writer.writeUint64String(1, this.endpointId);
            if (this.has_endpointProviderModelAttribute)
                writer.writeMessage(2, this.endpointProviderModelAttribute, () => this.endpointProviderModelAttribute.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEndpointProviderModelRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEndpointProviderModelRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.endpointProviderModelAttribute, () => message.endpointProviderModelAttribute = EndpointProviderModelAttribute.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEndpointProviderModelRequest {
            return CreateEndpointProviderModelRequest.deserialize(bytes);
        }
    }
    export class CreateEndpointProviderModelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: EndpointProviderModel;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, EndpointProviderModel, 3) as EndpointProviderModel;
        }
        set data(value: EndpointProviderModel) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof EndpointProviderModel.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): CreateEndpointProviderModelResponse {
            const message = new CreateEndpointProviderModelResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = EndpointProviderModel.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof EndpointProviderModel.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEndpointProviderModelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEndpointProviderModelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = EndpointProviderModel.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEndpointProviderModelResponse {
            return CreateEndpointProviderModelResponse.deserialize(bytes);
        }
    }
    export class GetEndpointRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            id?: string;
        } & (({
            endpointProviderModelId?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("endpointProviderModelId" in data && data.endpointProviderModelId != undefined) {
                    this.endpointProviderModelId = data.endpointProviderModelId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get endpointProviderModelId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set endpointProviderModelId(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_endpointProviderModelId() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _endpointProviderModelId() {
            const cases: {
                [index: number]: "none" | "endpointProviderModelId";
            } = {
                0: "none",
                4: "endpointProviderModelId"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            id?: string;
            endpointProviderModelId?: string;
        }): GetEndpointRequest {
            const message = new GetEndpointRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.endpointProviderModelId != null) {
                message.endpointProviderModelId = data.endpointProviderModelId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                endpointProviderModelId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.endpointProviderModelId != null) {
                data.endpointProviderModelId = this.endpointProviderModelId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.has_endpointProviderModelId)
                writer.writeUint64String(4, this.endpointProviderModelId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEndpointRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEndpointRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 4:
                        message.endpointProviderModelId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEndpointRequest {
            return GetEndpointRequest.deserialize(bytes);
        }
    }
    export class GetEndpointResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: Endpoint;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, Endpoint, 3) as Endpoint;
        }
        set data(value: Endpoint) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Endpoint.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetEndpointResponse {
            const message = new GetEndpointResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = Endpoint.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Endpoint.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEndpointResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEndpointResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = Endpoint.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEndpointResponse {
            return GetEndpointResponse.deserialize(bytes);
        }
    }
    export class GetAllEndpointRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 1) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 2) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
        }): GetAllEndpointRequest {
            const message = new GetAllEndpointRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllEndpointRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllEndpointRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllEndpointRequest {
            return GetAllEndpointRequest.deserialize(bytes);
        }
    }
    export class GetAllEndpointResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: Endpoint[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, Endpoint, 3) as Endpoint[];
        }
        set data(value: Endpoint[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Endpoint.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllEndpointResponse {
            const message = new GetAllEndpointResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => Endpoint.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Endpoint.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: Endpoint) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: Endpoint) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllEndpointResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllEndpointResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Endpoint.deserialize(reader), Endpoint));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllEndpointResponse {
            return GetAllEndpointResponse.deserialize(bytes);
        }
    }
    export class GetAllEndpointProviderModelRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
            endpointId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 1) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 2) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            endpointId?: string;
        }): GetAllEndpointProviderModelRequest {
            const message = new GetAllEndpointProviderModelRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
                endpointId?: string;
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (this.endpointId != "0")
                writer.writeUint64String(5, this.endpointId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllEndpointProviderModelRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllEndpointProviderModelRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    case 5:
                        message.endpointId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllEndpointProviderModelRequest {
            return GetAllEndpointProviderModelRequest.deserialize(bytes);
        }
    }
    export class GetAllEndpointProviderModelResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: EndpointProviderModel[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, EndpointProviderModel, 3) as EndpointProviderModel[];
        }
        set data(value: EndpointProviderModel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof EndpointProviderModel.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllEndpointProviderModelResponse {
            const message = new GetAllEndpointProviderModelResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => EndpointProviderModel.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof EndpointProviderModel.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: EndpointProviderModel) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: EndpointProviderModel) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllEndpointProviderModelResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllEndpointProviderModelResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, EndpointProviderModel.deserialize(reader), EndpointProviderModel));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllEndpointProviderModelResponse {
            return GetAllEndpointProviderModelResponse.deserialize(bytes);
        }
    }
    export class UpdateEndpointVersionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointId?: string;
            endpointProviderModelId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("endpointProviderModelId" in data && data.endpointProviderModelId != undefined) {
                    this.endpointProviderModelId = data.endpointProviderModelId;
                }
            }
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get endpointProviderModelId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set endpointProviderModelId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            endpointId?: string;
            endpointProviderModelId?: string;
        }): UpdateEndpointVersionRequest {
            const message = new UpdateEndpointVersionRequest({});
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.endpointProviderModelId != null) {
                message.endpointProviderModelId = data.endpointProviderModelId;
            }
            return message;
        }
        toObject() {
            const data: {
                endpointId?: string;
                endpointProviderModelId?: string;
            } = {};
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.endpointProviderModelId != null) {
                data.endpointProviderModelId = this.endpointProviderModelId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpointId != "0")
                writer.writeUint64String(1, this.endpointId);
            if (this.endpointProviderModelId != "0")
                writer.writeUint64String(2, this.endpointProviderModelId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEndpointVersionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEndpointVersionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 2:
                        message.endpointProviderModelId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateEndpointVersionRequest {
            return UpdateEndpointVersionRequest.deserialize(bytes);
        }
    }
    export class UpdateEndpointVersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: Endpoint;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, Endpoint, 3) as Endpoint;
        }
        set data(value: Endpoint) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof Endpoint.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): UpdateEndpointVersionResponse {
            const message = new UpdateEndpointVersionResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = Endpoint.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof Endpoint.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEndpointVersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEndpointVersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = Endpoint.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateEndpointVersionResponse {
            return UpdateEndpointVersionResponse.deserialize(bytes);
        }
    }
    export class EndpointRetryConfiguration extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            retryType?: string;
            maxAttempts?: string;
            delaySeconds?: string;
            exponentialBackoff?: boolean;
            retryables?: string[];
            createdBy?: string;
            updatedBy?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("retryType" in data && data.retryType != undefined) {
                    this.retryType = data.retryType;
                }
                if ("maxAttempts" in data && data.maxAttempts != undefined) {
                    this.maxAttempts = data.maxAttempts;
                }
                if ("delaySeconds" in data && data.delaySeconds != undefined) {
                    this.delaySeconds = data.delaySeconds;
                }
                if ("exponentialBackoff" in data && data.exponentialBackoff != undefined) {
                    this.exponentialBackoff = data.exponentialBackoff;
                }
                if ("retryables" in data && data.retryables != undefined) {
                    this.retryables = data.retryables;
                }
                if ("createdBy" in data && data.createdBy != undefined) {
                    this.createdBy = data.createdBy;
                }
                if ("updatedBy" in data && data.updatedBy != undefined) {
                    this.updatedBy = data.updatedBy;
                }
            }
        }
        get retryType() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set retryType(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get maxAttempts() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set maxAttempts(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get delaySeconds() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set delaySeconds(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get exponentialBackoff() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set exponentialBackoff(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get retryables() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set retryables(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get createdBy() {
            return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
        }
        set createdBy(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get updatedBy() {
            return pb_1.Message.getFieldWithDefault(this, 9, "0") as string;
        }
        set updatedBy(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            retryType?: string;
            maxAttempts?: string;
            delaySeconds?: string;
            exponentialBackoff?: boolean;
            retryables?: string[];
            createdBy?: string;
            updatedBy?: string;
        }): EndpointRetryConfiguration {
            const message = new EndpointRetryConfiguration({});
            if (data.retryType != null) {
                message.retryType = data.retryType;
            }
            if (data.maxAttempts != null) {
                message.maxAttempts = data.maxAttempts;
            }
            if (data.delaySeconds != null) {
                message.delaySeconds = data.delaySeconds;
            }
            if (data.exponentialBackoff != null) {
                message.exponentialBackoff = data.exponentialBackoff;
            }
            if (data.retryables != null) {
                message.retryables = data.retryables;
            }
            if (data.createdBy != null) {
                message.createdBy = data.createdBy;
            }
            if (data.updatedBy != null) {
                message.updatedBy = data.updatedBy;
            }
            return message;
        }
        toObject() {
            const data: {
                retryType?: string;
                maxAttempts?: string;
                delaySeconds?: string;
                exponentialBackoff?: boolean;
                retryables?: string[];
                createdBy?: string;
                updatedBy?: string;
            } = {};
            if (this.retryType != null) {
                data.retryType = this.retryType;
            }
            if (this.maxAttempts != null) {
                data.maxAttempts = this.maxAttempts;
            }
            if (this.delaySeconds != null) {
                data.delaySeconds = this.delaySeconds;
            }
            if (this.exponentialBackoff != null) {
                data.exponentialBackoff = this.exponentialBackoff;
            }
            if (this.retryables != null) {
                data.retryables = this.retryables;
            }
            if (this.createdBy != null) {
                data.createdBy = this.createdBy;
            }
            if (this.updatedBy != null) {
                data.updatedBy = this.updatedBy;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.retryType.length)
                writer.writeString(2, this.retryType);
            if (this.maxAttempts != "0")
                writer.writeUint64String(3, this.maxAttempts);
            if (this.delaySeconds != "0")
                writer.writeUint64String(4, this.delaySeconds);
            if (this.exponentialBackoff != false)
                writer.writeBool(5, this.exponentialBackoff);
            if (this.retryables.length)
                writer.writeRepeatedString(6, this.retryables);
            if (this.createdBy != "0")
                writer.writeUint64String(8, this.createdBy);
            if (this.updatedBy != "0")
                writer.writeUint64String(9, this.updatedBy);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndpointRetryConfiguration {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndpointRetryConfiguration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.retryType = reader.readString();
                        break;
                    case 3:
                        message.maxAttempts = reader.readUint64String();
                        break;
                    case 4:
                        message.delaySeconds = reader.readUint64String();
                        break;
                    case 5:
                        message.exponentialBackoff = reader.readBool();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 8:
                        message.createdBy = reader.readUint64String();
                        break;
                    case 9:
                        message.updatedBy = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndpointRetryConfiguration {
            return EndpointRetryConfiguration.deserialize(bytes);
        }
    }
    export class EndpointCacheConfiguration extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cacheType?: string;
            expiryInterval?: string;
            matchThreshold?: number;
            createdBy?: string;
            updatedBy?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cacheType" in data && data.cacheType != undefined) {
                    this.cacheType = data.cacheType;
                }
                if ("expiryInterval" in data && data.expiryInterval != undefined) {
                    this.expiryInterval = data.expiryInterval;
                }
                if ("matchThreshold" in data && data.matchThreshold != undefined) {
                    this.matchThreshold = data.matchThreshold;
                }
                if ("createdBy" in data && data.createdBy != undefined) {
                    this.createdBy = data.createdBy;
                }
                if ("updatedBy" in data && data.updatedBy != undefined) {
                    this.updatedBy = data.updatedBy;
                }
            }
        }
        get cacheType() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set cacheType(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get expiryInterval() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set expiryInterval(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get matchThreshold() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set matchThreshold(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get createdBy() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set createdBy(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get updatedBy() {
            return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
        }
        set updatedBy(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            cacheType?: string;
            expiryInterval?: string;
            matchThreshold?: number;
            createdBy?: string;
            updatedBy?: string;
        }): EndpointCacheConfiguration {
            const message = new EndpointCacheConfiguration({});
            if (data.cacheType != null) {
                message.cacheType = data.cacheType;
            }
            if (data.expiryInterval != null) {
                message.expiryInterval = data.expiryInterval;
            }
            if (data.matchThreshold != null) {
                message.matchThreshold = data.matchThreshold;
            }
            if (data.createdBy != null) {
                message.createdBy = data.createdBy;
            }
            if (data.updatedBy != null) {
                message.updatedBy = data.updatedBy;
            }
            return message;
        }
        toObject() {
            const data: {
                cacheType?: string;
                expiryInterval?: string;
                matchThreshold?: number;
                createdBy?: string;
                updatedBy?: string;
            } = {};
            if (this.cacheType != null) {
                data.cacheType = this.cacheType;
            }
            if (this.expiryInterval != null) {
                data.expiryInterval = this.expiryInterval;
            }
            if (this.matchThreshold != null) {
                data.matchThreshold = this.matchThreshold;
            }
            if (this.createdBy != null) {
                data.createdBy = this.createdBy;
            }
            if (this.updatedBy != null) {
                data.updatedBy = this.updatedBy;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cacheType.length)
                writer.writeString(2, this.cacheType);
            if (this.expiryInterval != "0")
                writer.writeUint64String(3, this.expiryInterval);
            if (this.matchThreshold != 0)
                writer.writeFloat(4, this.matchThreshold);
            if (this.createdBy != "0")
                writer.writeUint64String(5, this.createdBy);
            if (this.updatedBy != "0")
                writer.writeUint64String(6, this.updatedBy);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndpointCacheConfiguration {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndpointCacheConfiguration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.cacheType = reader.readString();
                        break;
                    case 3:
                        message.expiryInterval = reader.readUint64String();
                        break;
                    case 4:
                        message.matchThreshold = reader.readFloat();
                        break;
                    case 5:
                        message.createdBy = reader.readUint64String();
                        break;
                    case 6:
                        message.updatedBy = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndpointCacheConfiguration {
            return EndpointCacheConfiguration.deserialize(bytes);
        }
    }
    export class CreateEndpointRetryConfigurationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointId?: string;
            data?: EndpointRetryConfiguration;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, EndpointRetryConfiguration, 2) as EndpointRetryConfiguration;
        }
        set data(value: EndpointRetryConfiguration) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            endpointId?: string;
            data?: ReturnType<typeof EndpointRetryConfiguration.prototype.toObject>;
        }): CreateEndpointRetryConfigurationRequest {
            const message = new CreateEndpointRetryConfigurationRequest({});
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.data != null) {
                message.data = EndpointRetryConfiguration.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                endpointId?: string;
                data?: ReturnType<typeof EndpointRetryConfiguration.prototype.toObject>;
            } = {};
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpointId != "0")
                writer.writeUint64String(1, this.endpointId);
            if (this.has_data)
                writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEndpointRetryConfigurationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEndpointRetryConfigurationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.data, () => message.data = EndpointRetryConfiguration.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEndpointRetryConfigurationRequest {
            return CreateEndpointRetryConfigurationRequest.deserialize(bytes);
        }
    }
    export class CreateEndpointRetryConfigurationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: EndpointRetryConfiguration;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, EndpointRetryConfiguration, 3) as EndpointRetryConfiguration;
        }
        set data(value: EndpointRetryConfiguration) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof EndpointRetryConfiguration.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): CreateEndpointRetryConfigurationResponse {
            const message = new CreateEndpointRetryConfigurationResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = EndpointRetryConfiguration.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof EndpointRetryConfiguration.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEndpointRetryConfigurationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEndpointRetryConfigurationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = EndpointRetryConfiguration.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEndpointRetryConfigurationResponse {
            return CreateEndpointRetryConfigurationResponse.deserialize(bytes);
        }
    }
    export class CreateEndpointCacheConfigurationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointId?: string;
            data?: EndpointCacheConfiguration;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, EndpointCacheConfiguration, 2) as EndpointCacheConfiguration;
        }
        set data(value: EndpointCacheConfiguration) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            endpointId?: string;
            data?: ReturnType<typeof EndpointCacheConfiguration.prototype.toObject>;
        }): CreateEndpointCacheConfigurationRequest {
            const message = new CreateEndpointCacheConfigurationRequest({});
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.data != null) {
                message.data = EndpointCacheConfiguration.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                endpointId?: string;
                data?: ReturnType<typeof EndpointCacheConfiguration.prototype.toObject>;
            } = {};
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpointId != "0")
                writer.writeUint64String(1, this.endpointId);
            if (this.has_data)
                writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEndpointCacheConfigurationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEndpointCacheConfigurationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.data, () => message.data = EndpointCacheConfiguration.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEndpointCacheConfigurationRequest {
            return CreateEndpointCacheConfigurationRequest.deserialize(bytes);
        }
    }
    export class CreateEndpointCacheConfigurationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: EndpointCacheConfiguration;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, EndpointCacheConfiguration, 3) as EndpointCacheConfiguration;
        }
        set data(value: EndpointCacheConfiguration) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof EndpointCacheConfiguration.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): CreateEndpointCacheConfigurationResponse {
            const message = new CreateEndpointCacheConfigurationResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = EndpointCacheConfiguration.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof EndpointCacheConfiguration.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEndpointCacheConfigurationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEndpointCacheConfigurationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = EndpointCacheConfiguration.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEndpointCacheConfigurationResponse {
            return CreateEndpointCacheConfigurationResponse.deserialize(bytes);
        }
    }
    export class CreateEndpointTagRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointId?: string;
            tags?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            endpointId?: string;
            tags?: string[];
        }): CreateEndpointTagRequest {
            const message = new CreateEndpointTagRequest({});
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            return message;
        }
        toObject() {
            const data: {
                endpointId?: string;
                tags?: string[];
            } = {};
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpointId != "0")
                writer.writeUint64String(1, this.endpointId);
            if (this.tags.length)
                writer.writeRepeatedString(2, this.tags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEndpointTagRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEndpointTagRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEndpointTagRequest {
            return CreateEndpointTagRequest.deserialize(bytes);
        }
    }
    export class ForkEndpointRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointId?: string;
            endpointProviderId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("endpointProviderId" in data && data.endpointProviderId != undefined) {
                    this.endpointProviderId = data.endpointProviderId;
                }
            }
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get endpointProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set endpointProviderId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            endpointId?: string;
            endpointProviderId?: string;
        }): ForkEndpointRequest {
            const message = new ForkEndpointRequest({});
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.endpointProviderId != null) {
                message.endpointProviderId = data.endpointProviderId;
            }
            return message;
        }
        toObject() {
            const data: {
                endpointId?: string;
                endpointProviderId?: string;
            } = {};
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.endpointProviderId != null) {
                data.endpointProviderId = this.endpointProviderId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpointId != "0")
                writer.writeUint64String(1, this.endpointId);
            if (this.endpointProviderId != "0")
                writer.writeUint64String(3, this.endpointProviderId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForkEndpointRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForkEndpointRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 3:
                        message.endpointProviderId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ForkEndpointRequest {
            return ForkEndpointRequest.deserialize(bytes);
        }
    }
    export class UpdateEndpointDetailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointId?: string;
            name?: string;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            endpointId?: string;
            name?: string;
            description?: string;
        }): UpdateEndpointDetailRequest {
            const message = new UpdateEndpointDetailRequest({});
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                endpointId?: string;
                name?: string;
                description?: string;
            } = {};
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpointId != "0")
                writer.writeUint64String(1, this.endpointId);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEndpointDetailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEndpointDetailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateEndpointDetailRequest {
            return UpdateEndpointDetailRequest.deserialize(bytes);
        }
    }
    export class EndpointLog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            endpointId?: string;
            source?: string;
            status?: string;
            projectId?: string;
            organizationId?: string;
            endpointProviderModelId?: string;
            timeTaken?: string;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
            metrics?: dependency_2.Metric[];
            metadata?: dependency_2.Metadata[];
            arguments?: dependency_2.Argument[];
            options?: dependency_2.Metadata[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [30, 32, 31, 33], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
                if ("endpointProviderModelId" in data && data.endpointProviderModelId != undefined) {
                    this.endpointProviderModelId = data.endpointProviderModelId;
                }
                if ("timeTaken" in data && data.timeTaken != undefined) {
                    this.timeTaken = data.timeTaken;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("arguments" in data && data.arguments != undefined) {
                    this.arguments = data.arguments;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 16, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 17, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get endpointProviderModelId() {
            return pb_1.Message.getFieldWithDefault(this, 19, "0") as string;
        }
        set endpointProviderModelId(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get timeTaken() {
            return pb_1.Message.getFieldWithDefault(this, 25, "0") as string;
        }
        set timeTaken(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 26) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 26, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 27) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 27, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metric, 30) as dependency_2.Metric[];
        }
        set metrics(value: dependency_2.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 30, value);
        }
        get metadata() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 32) as dependency_2.Metadata[];
        }
        set metadata(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 32, value);
        }
        get arguments() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Argument, 31) as dependency_2.Argument[];
        }
        set arguments(value: dependency_2.Argument[]) {
            pb_1.Message.setRepeatedWrapperField(this, 31, value);
        }
        get options() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 33) as dependency_2.Metadata[];
        }
        set options(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 33, value);
        }
        static fromObject(data: {
            id?: string;
            endpointId?: string;
            source?: string;
            status?: string;
            projectId?: string;
            organizationId?: string;
            endpointProviderModelId?: string;
            timeTaken?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            metrics?: ReturnType<typeof dependency_2.Metric.prototype.toObject>[];
            metadata?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            arguments?: ReturnType<typeof dependency_2.Argument.prototype.toObject>[];
            options?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
        }): EndpointLog {
            const message = new EndpointLog({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            if (data.endpointProviderModelId != null) {
                message.endpointProviderModelId = data.endpointProviderModelId;
            }
            if (data.timeTaken != null) {
                message.timeTaken = data.timeTaken;
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => dependency_2.Metric.fromObject(item));
            }
            if (data.metadata != null) {
                message.metadata = data.metadata.map(item => dependency_2.Metadata.fromObject(item));
            }
            if (data.arguments != null) {
                message.arguments = data.arguments.map(item => dependency_2.Argument.fromObject(item));
            }
            if (data.options != null) {
                message.options = data.options.map(item => dependency_2.Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                endpointId?: string;
                source?: string;
                status?: string;
                projectId?: string;
                organizationId?: string;
                endpointProviderModelId?: string;
                timeTaken?: string;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                metrics?: ReturnType<typeof dependency_2.Metric.prototype.toObject>[];
                metadata?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
                arguments?: ReturnType<typeof dependency_2.Argument.prototype.toObject>[];
                options?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            if (this.endpointProviderModelId != null) {
                data.endpointProviderModelId = this.endpointProviderModelId;
            }
            if (this.timeTaken != null) {
                data.timeTaken = this.timeTaken;
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: dependency_2.Metric) => item.toObject());
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.map((item: dependency_2.Metadata) => item.toObject());
            }
            if (this.arguments != null) {
                data.arguments = this.arguments.map((item: dependency_2.Argument) => item.toObject());
            }
            if (this.options != null) {
                data.options = this.options.map((item: dependency_2.Metadata) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.endpointId != "0")
                writer.writeUint64String(2, this.endpointId);
            if (this.source.length)
                writer.writeString(3, this.source);
            if (this.status.length)
                writer.writeString(15, this.status);
            if (this.projectId != "0")
                writer.writeUint64String(16, this.projectId);
            if (this.organizationId != "0")
                writer.writeUint64String(17, this.organizationId);
            if (this.endpointProviderModelId != "0")
                writer.writeUint64String(19, this.endpointProviderModelId);
            if (this.timeTaken != "0")
                writer.writeUint64String(25, this.timeTaken);
            if (this.has_createdDate)
                writer.writeMessage(26, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(27, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.metrics.length)
                writer.writeRepeatedMessage(30, this.metrics, (item: dependency_2.Metric) => item.serialize(writer));
            if (this.metadata.length)
                writer.writeRepeatedMessage(32, this.metadata, (item: dependency_2.Metadata) => item.serialize(writer));
            if (this.arguments.length)
                writer.writeRepeatedMessage(31, this.arguments, (item: dependency_2.Argument) => item.serialize(writer));
            if (this.options.length)
                writer.writeRepeatedMessage(33, this.options, (item: dependency_2.Metadata) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndpointLog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndpointLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 3:
                        message.source = reader.readString();
                        break;
                    case 15:
                        message.status = reader.readString();
                        break;
                    case 16:
                        message.projectId = reader.readUint64String();
                        break;
                    case 17:
                        message.organizationId = reader.readUint64String();
                        break;
                    case 19:
                        message.endpointProviderModelId = reader.readUint64String();
                        break;
                    case 25:
                        message.timeTaken = reader.readUint64String();
                        break;
                    case 26:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 30, dependency_2.Metric.deserialize(reader), dependency_2.Metric));
                        break;
                    case 32:
                        reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 32, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    case 31:
                        reader.readMessage(message.arguments, () => pb_1.Message.addToRepeatedWrapperField(message, 31, dependency_2.Argument.deserialize(reader), dependency_2.Argument));
                        break;
                    case 33:
                        reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 33, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndpointLog {
            return EndpointLog.deserialize(bytes);
        }
    }
    export class GetAllEndpointLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
            endpointId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 1) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 2) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            endpointId?: string;
        }): GetAllEndpointLogRequest {
            const message = new GetAllEndpointLogRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
                endpointId?: string;
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (this.endpointId != "0")
                writer.writeUint64String(3, this.endpointId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllEndpointLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllEndpointLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    case 3:
                        message.endpointId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllEndpointLogRequest {
            return GetAllEndpointLogRequest.deserialize(bytes);
        }
    }
    export class GetAllEndpointLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: EndpointLog[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, EndpointLog, 3) as EndpointLog[];
        }
        set data(value: EndpointLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof EndpointLog.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllEndpointLogResponse {
            const message = new GetAllEndpointLogResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => EndpointLog.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof EndpointLog.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: EndpointLog) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: EndpointLog) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllEndpointLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllEndpointLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, EndpointLog.deserialize(reader), EndpointLog));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllEndpointLogResponse {
            return GetAllEndpointLogResponse.deserialize(bytes);
        }
    }
    export class GetEndpointLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointId?: string;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            endpointId?: string;
            id?: string;
        }): GetEndpointLogRequest {
            const message = new GetEndpointLogRequest({});
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                endpointId?: string;
                id?: string;
            } = {};
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpointId != "0")
                writer.writeUint64String(1, this.endpointId);
            if (this.id != "0")
                writer.writeUint64String(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEndpointLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEndpointLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 2:
                        message.id = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEndpointLogRequest {
            return GetEndpointLogRequest.deserialize(bytes);
        }
    }
    export class GetEndpointLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: EndpointLog;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, EndpointLog, 3) as EndpointLog;
        }
        set data(value: EndpointLog) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof EndpointLog.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetEndpointLogResponse {
            const message = new GetEndpointLogResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = EndpointLog.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof EndpointLog.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEndpointLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEndpointLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = EndpointLog.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEndpointLogResponse {
            return GetEndpointLogResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedEndpointServiceService {
        static definition = {
            GetEndpoint: {
                path: "/endpoint_api.EndpointService/GetEndpoint",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEndpointRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEndpointRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEndpointResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEndpointResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllEndpoint: {
                path: "/endpoint_api.EndpointService/GetAllEndpoint",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllEndpointRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllEndpointRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllEndpointResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllEndpointResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllEndpointProviderModel: {
                path: "/endpoint_api.EndpointService/GetAllEndpointProviderModel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllEndpointProviderModelRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllEndpointProviderModelRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllEndpointProviderModelResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllEndpointProviderModelResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateEndpointVersion: {
                path: "/endpoint_api.EndpointService/UpdateEndpointVersion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateEndpointVersionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateEndpointVersionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateEndpointVersionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateEndpointVersionResponse.deserialize(new Uint8Array(bytes))
            },
            CreateEndpoint: {
                path: "/endpoint_api.EndpointService/CreateEndpoint",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateEndpointRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateEndpointRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateEndpointResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateEndpointResponse.deserialize(new Uint8Array(bytes))
            },
            CreateEndpointProviderModel: {
                path: "/endpoint_api.EndpointService/CreateEndpointProviderModel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateEndpointProviderModelRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateEndpointProviderModelRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateEndpointProviderModelResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateEndpointProviderModelResponse.deserialize(new Uint8Array(bytes))
            },
            CreateEndpointCacheConfiguration: {
                path: "/endpoint_api.EndpointService/CreateEndpointCacheConfiguration",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateEndpointCacheConfigurationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateEndpointCacheConfigurationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateEndpointCacheConfigurationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateEndpointCacheConfigurationResponse.deserialize(new Uint8Array(bytes))
            },
            CreateEndpointRetryConfiguration: {
                path: "/endpoint_api.EndpointService/CreateEndpointRetryConfiguration",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateEndpointRetryConfigurationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateEndpointRetryConfigurationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateEndpointRetryConfigurationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateEndpointRetryConfigurationResponse.deserialize(new Uint8Array(bytes))
            },
            CreateEndpointTag: {
                path: "/endpoint_api.EndpointService/CreateEndpointTag",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateEndpointTagRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateEndpointTagRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEndpointResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEndpointResponse.deserialize(new Uint8Array(bytes))
            },
            ForkEndpoint: {
                path: "/endpoint_api.EndpointService/ForkEndpoint",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ForkEndpointRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ForkEndpointRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.BaseResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.BaseResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateEndpointDetail: {
                path: "/endpoint_api.EndpointService/UpdateEndpointDetail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateEndpointDetailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateEndpointDetailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEndpointResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEndpointResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllEndpointLog: {
                path: "/endpoint_api.EndpointService/GetAllEndpointLog",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllEndpointLogRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllEndpointLogRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllEndpointLogResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllEndpointLogResponse.deserialize(new Uint8Array(bytes))
            },
            GetEndpointLog: {
                path: "/endpoint_api.EndpointService/GetEndpointLog",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEndpointLogRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEndpointLogRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEndpointLogResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEndpointLogResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetEndpoint(call: grpc_1.ServerUnaryCall<GetEndpointRequest, GetEndpointResponse>, callback: grpc_1.sendUnaryData<GetEndpointResponse>): void;
        abstract GetAllEndpoint(call: grpc_1.ServerUnaryCall<GetAllEndpointRequest, GetAllEndpointResponse>, callback: grpc_1.sendUnaryData<GetAllEndpointResponse>): void;
        abstract GetAllEndpointProviderModel(call: grpc_1.ServerUnaryCall<GetAllEndpointProviderModelRequest, GetAllEndpointProviderModelResponse>, callback: grpc_1.sendUnaryData<GetAllEndpointProviderModelResponse>): void;
        abstract UpdateEndpointVersion(call: grpc_1.ServerUnaryCall<UpdateEndpointVersionRequest, UpdateEndpointVersionResponse>, callback: grpc_1.sendUnaryData<UpdateEndpointVersionResponse>): void;
        abstract CreateEndpoint(call: grpc_1.ServerUnaryCall<CreateEndpointRequest, CreateEndpointResponse>, callback: grpc_1.sendUnaryData<CreateEndpointResponse>): void;
        abstract CreateEndpointProviderModel(call: grpc_1.ServerUnaryCall<CreateEndpointProviderModelRequest, CreateEndpointProviderModelResponse>, callback: grpc_1.sendUnaryData<CreateEndpointProviderModelResponse>): void;
        abstract CreateEndpointCacheConfiguration(call: grpc_1.ServerUnaryCall<CreateEndpointCacheConfigurationRequest, CreateEndpointCacheConfigurationResponse>, callback: grpc_1.sendUnaryData<CreateEndpointCacheConfigurationResponse>): void;
        abstract CreateEndpointRetryConfiguration(call: grpc_1.ServerUnaryCall<CreateEndpointRetryConfigurationRequest, CreateEndpointRetryConfigurationResponse>, callback: grpc_1.sendUnaryData<CreateEndpointRetryConfigurationResponse>): void;
        abstract CreateEndpointTag(call: grpc_1.ServerUnaryCall<CreateEndpointTagRequest, GetEndpointResponse>, callback: grpc_1.sendUnaryData<GetEndpointResponse>): void;
        abstract ForkEndpoint(call: grpc_1.ServerUnaryCall<ForkEndpointRequest, dependency_2.BaseResponse>, callback: grpc_1.sendUnaryData<dependency_2.BaseResponse>): void;
        abstract UpdateEndpointDetail(call: grpc_1.ServerUnaryCall<UpdateEndpointDetailRequest, GetEndpointResponse>, callback: grpc_1.sendUnaryData<GetEndpointResponse>): void;
        abstract GetAllEndpointLog(call: grpc_1.ServerUnaryCall<GetAllEndpointLogRequest, GetAllEndpointLogResponse>, callback: grpc_1.sendUnaryData<GetAllEndpointLogResponse>): void;
        abstract GetEndpointLog(call: grpc_1.ServerUnaryCall<GetEndpointLogRequest, GetEndpointLogResponse>, callback: grpc_1.sendUnaryData<GetEndpointLogResponse>): void;
    }
    export class EndpointServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedEndpointServiceService.definition, "EndpointService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetEndpoint: GrpcUnaryServiceInterface<GetEndpointRequest, GetEndpointResponse> = (message: GetEndpointRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEndpointResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEndpointResponse>, callback?: grpc_1.requestCallback<GetEndpointResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEndpoint(message, metadata, options, callback);
        };
        GetAllEndpoint: GrpcUnaryServiceInterface<GetAllEndpointRequest, GetAllEndpointResponse> = (message: GetAllEndpointRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllEndpointResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllEndpointResponse>, callback?: grpc_1.requestCallback<GetAllEndpointResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllEndpoint(message, metadata, options, callback);
        };
        GetAllEndpointProviderModel: GrpcUnaryServiceInterface<GetAllEndpointProviderModelRequest, GetAllEndpointProviderModelResponse> = (message: GetAllEndpointProviderModelRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllEndpointProviderModelResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllEndpointProviderModelResponse>, callback?: grpc_1.requestCallback<GetAllEndpointProviderModelResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllEndpointProviderModel(message, metadata, options, callback);
        };
        UpdateEndpointVersion: GrpcUnaryServiceInterface<UpdateEndpointVersionRequest, UpdateEndpointVersionResponse> = (message: UpdateEndpointVersionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateEndpointVersionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateEndpointVersionResponse>, callback?: grpc_1.requestCallback<UpdateEndpointVersionResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateEndpointVersion(message, metadata, options, callback);
        };
        CreateEndpoint: GrpcUnaryServiceInterface<CreateEndpointRequest, CreateEndpointResponse> = (message: CreateEndpointRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateEndpointResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateEndpointResponse>, callback?: grpc_1.requestCallback<CreateEndpointResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateEndpoint(message, metadata, options, callback);
        };
        CreateEndpointProviderModel: GrpcUnaryServiceInterface<CreateEndpointProviderModelRequest, CreateEndpointProviderModelResponse> = (message: CreateEndpointProviderModelRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateEndpointProviderModelResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateEndpointProviderModelResponse>, callback?: grpc_1.requestCallback<CreateEndpointProviderModelResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateEndpointProviderModel(message, metadata, options, callback);
        };
        CreateEndpointCacheConfiguration: GrpcUnaryServiceInterface<CreateEndpointCacheConfigurationRequest, CreateEndpointCacheConfigurationResponse> = (message: CreateEndpointCacheConfigurationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateEndpointCacheConfigurationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateEndpointCacheConfigurationResponse>, callback?: grpc_1.requestCallback<CreateEndpointCacheConfigurationResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateEndpointCacheConfiguration(message, metadata, options, callback);
        };
        CreateEndpointRetryConfiguration: GrpcUnaryServiceInterface<CreateEndpointRetryConfigurationRequest, CreateEndpointRetryConfigurationResponse> = (message: CreateEndpointRetryConfigurationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateEndpointRetryConfigurationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateEndpointRetryConfigurationResponse>, callback?: grpc_1.requestCallback<CreateEndpointRetryConfigurationResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateEndpointRetryConfiguration(message, metadata, options, callback);
        };
        CreateEndpointTag: GrpcUnaryServiceInterface<CreateEndpointTagRequest, GetEndpointResponse> = (message: CreateEndpointTagRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEndpointResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEndpointResponse>, callback?: grpc_1.requestCallback<GetEndpointResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateEndpointTag(message, metadata, options, callback);
        };
        ForkEndpoint: GrpcUnaryServiceInterface<ForkEndpointRequest, dependency_2.BaseResponse> = (message: ForkEndpointRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.BaseResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.BaseResponse>, callback?: grpc_1.requestCallback<dependency_2.BaseResponse>): grpc_1.ClientUnaryCall => {
            return super.ForkEndpoint(message, metadata, options, callback);
        };
        UpdateEndpointDetail: GrpcUnaryServiceInterface<UpdateEndpointDetailRequest, GetEndpointResponse> = (message: UpdateEndpointDetailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEndpointResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEndpointResponse>, callback?: grpc_1.requestCallback<GetEndpointResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateEndpointDetail(message, metadata, options, callback);
        };
        GetAllEndpointLog: GrpcUnaryServiceInterface<GetAllEndpointLogRequest, GetAllEndpointLogResponse> = (message: GetAllEndpointLogRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllEndpointLogResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllEndpointLogResponse>, callback?: grpc_1.requestCallback<GetAllEndpointLogResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllEndpointLog(message, metadata, options, callback);
        };
        GetEndpointLog: GrpcUnaryServiceInterface<GetEndpointLogRequest, GetEndpointLogResponse> = (message: GetEndpointLogRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEndpointLogResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEndpointLogResponse>, callback?: grpc_1.requestCallback<GetEndpointLogResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEndpointLog(message, metadata, options, callback);
        };
    }
}
