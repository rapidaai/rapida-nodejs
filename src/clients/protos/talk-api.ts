// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.19.1
// source: talk-api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientDuplexStream,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleBidiStreamingCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  AssistantConversationMessage,
  Error,
  Event,
  GetAllAssistantConversationRequest,
  GetAllAssistantConversationResponse,
  GetAllConversationMessageRequest,
  GetAllConversationMessageResponse,
  Message,
  Metric,
  Source,
  sourceFromJSON,
  sourceToJSON,
} from "./common";
import { Any } from "./google/protobuf/any";

export const protobufPackage = "talk_api";

export interface AssistantDefinition {
  assistantId: number;
  version: string;
}

export interface AssistantMessagingRequest {
  assistant?: AssistantDefinition | undefined;
  message?: Message | undefined;
  assistantConversationId?: number | undefined;
  metadata: { [key: string]: Any };
  source: Source;
  args: { [key: string]: Any };
  options: { [key: string]: Any };
}

export interface AssistantMessagingRequest_MetadataEntry {
  key: string;
  value?: Any | undefined;
}

export interface AssistantMessagingRequest_ArgsEntry {
  key: string;
  value?: Any | undefined;
}

export interface AssistantMessagingRequest_OptionsEntry {
  key: string;
  value?: Any | undefined;
}

export interface AssistantMessagingResponse {
  code: number;
  success: boolean;
  error?: Error | undefined;
  message?: AssistantConversationMessage | undefined;
  event?: Event | undefined;
}

export interface CreateMessageMetricRequest {
  assistantId: number;
  assistantConversationId: number;
  messageId: string;
  metrics: Metric[];
}

export interface CreateMessageMetricResponse {
  code: number;
  success: boolean;
  data: Metric[];
  error?: Error | undefined;
}

export interface CreateConversationMetricRequest {
  assistantId: number;
  assistantConversationId: number;
  metrics: Metric[];
}

export interface CreateConversationMetricResponse {
  code: number;
  success: boolean;
  data: Metric[];
  error?: Error | undefined;
}

function createBaseAssistantDefinition(): AssistantDefinition {
  return { assistantId: 0, version: "" };
}

export const AssistantDefinition: MessageFns<AssistantDefinition> = {
  encode(message: AssistantDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantDefinition {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: AssistantDefinition): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantDefinition>, I>>(base?: I): AssistantDefinition {
    return AssistantDefinition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantDefinition>, I>>(object: I): AssistantDefinition {
    const message = createBaseAssistantDefinition();
    message.assistantId = object.assistantId ?? 0;
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseAssistantMessagingRequest(): AssistantMessagingRequest {
  return {
    assistant: undefined,
    message: undefined,
    assistantConversationId: undefined,
    metadata: {},
    source: 0,
    args: {},
    options: {},
  };
}

export const AssistantMessagingRequest: MessageFns<AssistantMessagingRequest> = {
  encode(message: AssistantMessagingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistant !== undefined) {
      AssistantDefinition.encode(message.assistant, writer.uint32(18).fork()).join();
    }
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(26).fork()).join();
    }
    if (message.assistantConversationId !== undefined) {
      writer.uint32(32).uint64(message.assistantConversationId);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      AssistantMessagingRequest_MetadataEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.source !== 0) {
      writer.uint32(56).int32(message.source);
    }
    Object.entries(message.args).forEach(([key, value]) => {
      AssistantMessagingRequest_ArgsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    Object.entries(message.options).forEach(([key, value]) => {
      AssistantMessagingRequest_OptionsEntry.encode({ key: key as any, value }, writer.uint32(90).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantMessagingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantMessagingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.assistant = AssistantDefinition.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.assistantConversationId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = AssistantMessagingRequest_MetadataEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.metadata[entry6.key] = entry6.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.source = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = AssistantMessagingRequest_ArgsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.args[entry10.key] = entry10.value;
          }
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          const entry11 = AssistantMessagingRequest_OptionsEntry.decode(reader, reader.uint32());
          if (entry11.value !== undefined) {
            message.options[entry11.key] = entry11.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantMessagingRequest {
    return {
      assistant: isSet(object.assistant) ? AssistantDefinition.fromJSON(object.assistant) : undefined,
      message: isSet(object.message) ? Message.fromJSON(object.message) : undefined,
      assistantConversationId: isSet(object.assistantConversationId)
        ? globalThis.Number(object.assistantConversationId)
        : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: Any }>((acc, [key, value]) => {
          acc[key] = Any.fromJSON(value);
          return acc;
        }, {})
        : {},
      source: isSet(object.source) ? sourceFromJSON(object.source) : 0,
      args: isObject(object.args)
        ? Object.entries(object.args).reduce<{ [key: string]: Any }>((acc, [key, value]) => {
          acc[key] = Any.fromJSON(value);
          return acc;
        }, {})
        : {},
      options: isObject(object.options)
        ? Object.entries(object.options).reduce<{ [key: string]: Any }>((acc, [key, value]) => {
          acc[key] = Any.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: AssistantMessagingRequest): unknown {
    const obj: any = {};
    if (message.assistant !== undefined) {
      obj.assistant = AssistantDefinition.toJSON(message.assistant);
    }
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    if (message.assistantConversationId !== undefined) {
      obj.assistantConversationId = Math.round(message.assistantConversationId);
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = Any.toJSON(v);
        });
      }
    }
    if (message.source !== 0) {
      obj.source = sourceToJSON(message.source);
    }
    if (message.args) {
      const entries = Object.entries(message.args);
      if (entries.length > 0) {
        obj.args = {};
        entries.forEach(([k, v]) => {
          obj.args[k] = Any.toJSON(v);
        });
      }
    }
    if (message.options) {
      const entries = Object.entries(message.options);
      if (entries.length > 0) {
        obj.options = {};
        entries.forEach(([k, v]) => {
          obj.options[k] = Any.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantMessagingRequest>, I>>(base?: I): AssistantMessagingRequest {
    return AssistantMessagingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantMessagingRequest>, I>>(object: I): AssistantMessagingRequest {
    const message = createBaseAssistantMessagingRequest();
    message.assistant = (object.assistant !== undefined && object.assistant !== null)
      ? AssistantDefinition.fromPartial(object.assistant)
      : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    message.assistantConversationId = object.assistantConversationId ?? undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: Any }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Any.fromPartial(value);
      }
      return acc;
    }, {});
    message.source = object.source ?? 0;
    message.args = Object.entries(object.args ?? {}).reduce<{ [key: string]: Any }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Any.fromPartial(value);
      }
      return acc;
    }, {});
    message.options = Object.entries(object.options ?? {}).reduce<{ [key: string]: Any }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Any.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseAssistantMessagingRequest_MetadataEntry(): AssistantMessagingRequest_MetadataEntry {
  return { key: "", value: undefined };
}

export const AssistantMessagingRequest_MetadataEntry: MessageFns<AssistantMessagingRequest_MetadataEntry> = {
  encode(message: AssistantMessagingRequest_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Any.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantMessagingRequest_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantMessagingRequest_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantMessagingRequest_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Any.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: AssistantMessagingRequest_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Any.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantMessagingRequest_MetadataEntry>, I>>(
    base?: I,
  ): AssistantMessagingRequest_MetadataEntry {
    return AssistantMessagingRequest_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantMessagingRequest_MetadataEntry>, I>>(
    object: I,
  ): AssistantMessagingRequest_MetadataEntry {
    const message = createBaseAssistantMessagingRequest_MetadataEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Any.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseAssistantMessagingRequest_ArgsEntry(): AssistantMessagingRequest_ArgsEntry {
  return { key: "", value: undefined };
}

export const AssistantMessagingRequest_ArgsEntry: MessageFns<AssistantMessagingRequest_ArgsEntry> = {
  encode(message: AssistantMessagingRequest_ArgsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Any.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantMessagingRequest_ArgsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantMessagingRequest_ArgsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantMessagingRequest_ArgsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Any.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: AssistantMessagingRequest_ArgsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Any.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantMessagingRequest_ArgsEntry>, I>>(
    base?: I,
  ): AssistantMessagingRequest_ArgsEntry {
    return AssistantMessagingRequest_ArgsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantMessagingRequest_ArgsEntry>, I>>(
    object: I,
  ): AssistantMessagingRequest_ArgsEntry {
    const message = createBaseAssistantMessagingRequest_ArgsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Any.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseAssistantMessagingRequest_OptionsEntry(): AssistantMessagingRequest_OptionsEntry {
  return { key: "", value: undefined };
}

export const AssistantMessagingRequest_OptionsEntry: MessageFns<AssistantMessagingRequest_OptionsEntry> = {
  encode(message: AssistantMessagingRequest_OptionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Any.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantMessagingRequest_OptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantMessagingRequest_OptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantMessagingRequest_OptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Any.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: AssistantMessagingRequest_OptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Any.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantMessagingRequest_OptionsEntry>, I>>(
    base?: I,
  ): AssistantMessagingRequest_OptionsEntry {
    return AssistantMessagingRequest_OptionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantMessagingRequest_OptionsEntry>, I>>(
    object: I,
  ): AssistantMessagingRequest_OptionsEntry {
    const message = createBaseAssistantMessagingRequest_OptionsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Any.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseAssistantMessagingResponse(): AssistantMessagingResponse {
  return { code: 0, success: false, error: undefined, message: undefined, event: undefined };
}

export const AssistantMessagingResponse: MessageFns<AssistantMessagingResponse> = {
  encode(message: AssistantMessagingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    if (message.message !== undefined) {
      AssistantConversationMessage.encode(message.message, writer.uint32(26).fork()).join();
    }
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantMessagingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantMessagingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = AssistantConversationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantMessagingResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
      message: isSet(object.message) ? AssistantConversationMessage.fromJSON(object.message) : undefined,
      event: isSet(object.event) ? Event.fromJSON(object.event) : undefined,
    };
  },

  toJSON(message: AssistantMessagingResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    if (message.message !== undefined) {
      obj.message = AssistantConversationMessage.toJSON(message.message);
    }
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantMessagingResponse>, I>>(base?: I): AssistantMessagingResponse {
    return AssistantMessagingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantMessagingResponse>, I>>(object: I): AssistantMessagingResponse {
    const message = createBaseAssistantMessagingResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? AssistantConversationMessage.fromPartial(object.message)
      : undefined;
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    return message;
  },
};

function createBaseCreateMessageMetricRequest(): CreateMessageMetricRequest {
  return { assistantId: 0, assistantConversationId: 0, messageId: "", metrics: [] };
}

export const CreateMessageMetricRequest: MessageFns<CreateMessageMetricRequest> = {
  encode(message: CreateMessageMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    if (message.assistantConversationId !== 0) {
      writer.uint32(16).uint64(message.assistantConversationId);
    }
    if (message.messageId !== "") {
      writer.uint32(26).string(message.messageId);
    }
    for (const v of message.metrics) {
      Metric.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMessageMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMessageMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.assistantConversationId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metrics.push(Metric.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMessageMetricRequest {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      assistantConversationId: isSet(object.assistantConversationId)
        ? globalThis.Number(object.assistantConversationId)
        : 0,
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      metrics: globalThis.Array.isArray(object?.metrics) ? object.metrics.map((e: any) => Metric.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreateMessageMetricRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.assistantConversationId !== 0) {
      obj.assistantConversationId = Math.round(message.assistantConversationId);
    }
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.metrics?.length) {
      obj.metrics = message.metrics.map((e) => Metric.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMessageMetricRequest>, I>>(base?: I): CreateMessageMetricRequest {
    return CreateMessageMetricRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMessageMetricRequest>, I>>(object: I): CreateMessageMetricRequest {
    const message = createBaseCreateMessageMetricRequest();
    message.assistantId = object.assistantId ?? 0;
    message.assistantConversationId = object.assistantConversationId ?? 0;
    message.messageId = object.messageId ?? "";
    message.metrics = object.metrics?.map((e) => Metric.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateMessageMetricResponse(): CreateMessageMetricResponse {
  return { code: 0, success: false, data: [], error: undefined };
}

export const CreateMessageMetricResponse: MessageFns<CreateMessageMetricResponse> = {
  encode(message: CreateMessageMetricResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    for (const v of message.data) {
      Metric.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMessageMetricResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMessageMetricResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(Metric.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMessageMetricResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Metric.fromJSON(e)) : [],
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: CreateMessageMetricResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Metric.toJSON(e));
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMessageMetricResponse>, I>>(base?: I): CreateMessageMetricResponse {
    return CreateMessageMetricResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMessageMetricResponse>, I>>(object: I): CreateMessageMetricResponse {
    const message = createBaseCreateMessageMetricResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = object.data?.map((e) => Metric.fromPartial(e)) || [];
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseCreateConversationMetricRequest(): CreateConversationMetricRequest {
  return { assistantId: 0, assistantConversationId: 0, metrics: [] };
}

export const CreateConversationMetricRequest: MessageFns<CreateConversationMetricRequest> = {
  encode(message: CreateConversationMetricRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    if (message.assistantConversationId !== 0) {
      writer.uint32(16).uint64(message.assistantConversationId);
    }
    for (const v of message.metrics) {
      Metric.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversationMetricRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversationMetricRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.assistantConversationId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metrics.push(Metric.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConversationMetricRequest {
    return {
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      assistantConversationId: isSet(object.assistantConversationId)
        ? globalThis.Number(object.assistantConversationId)
        : 0,
      metrics: globalThis.Array.isArray(object?.metrics) ? object.metrics.map((e: any) => Metric.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreateConversationMetricRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.assistantConversationId !== 0) {
      obj.assistantConversationId = Math.round(message.assistantConversationId);
    }
    if (message.metrics?.length) {
      obj.metrics = message.metrics.map((e) => Metric.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateConversationMetricRequest>, I>>(base?: I): CreateConversationMetricRequest {
    return CreateConversationMetricRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateConversationMetricRequest>, I>>(
    object: I,
  ): CreateConversationMetricRequest {
    const message = createBaseCreateConversationMetricRequest();
    message.assistantId = object.assistantId ?? 0;
    message.assistantConversationId = object.assistantConversationId ?? 0;
    message.metrics = object.metrics?.map((e) => Metric.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateConversationMetricResponse(): CreateConversationMetricResponse {
  return { code: 0, success: false, data: [], error: undefined };
}

export const CreateConversationMetricResponse: MessageFns<CreateConversationMetricResponse> = {
  encode(message: CreateConversationMetricResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    for (const v of message.data) {
      Metric.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversationMetricResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversationMetricResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(Metric.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConversationMetricResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Metric.fromJSON(e)) : [],
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: CreateConversationMetricResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Metric.toJSON(e));
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateConversationMetricResponse>, I>>(
    base?: I,
  ): CreateConversationMetricResponse {
    return CreateConversationMetricResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateConversationMetricResponse>, I>>(
    object: I,
  ): CreateConversationMetricResponse {
    const message = createBaseCreateConversationMetricResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = object.data?.map((e) => Metric.fromPartial(e)) || [];
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

export type TalkServiceService = typeof TalkServiceService;
export const TalkServiceService = {
  assistantMessaging: {
    path: "/talk_api.TalkService/AssistantMessaging",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: AssistantMessagingRequest): Buffer =>
      Buffer.from(AssistantMessagingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AssistantMessagingRequest => AssistantMessagingRequest.decode(value),
    responseSerialize: (value: AssistantMessagingResponse): Buffer =>
      Buffer.from(AssistantMessagingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantMessagingResponse => AssistantMessagingResponse.decode(value),
  },
  assistantTalk: {
    path: "/talk_api.TalkService/AssistantTalk",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: AssistantMessagingRequest): Buffer =>
      Buffer.from(AssistantMessagingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AssistantMessagingRequest => AssistantMessagingRequest.decode(value),
    responseSerialize: (value: AssistantMessagingResponse): Buffer =>
      Buffer.from(AssistantMessagingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantMessagingResponse => AssistantMessagingResponse.decode(value),
  },
  getAllAssistantConversation: {
    path: "/talk_api.TalkService/GetAllAssistantConversation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllAssistantConversationRequest): Buffer =>
      Buffer.from(GetAllAssistantConversationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAllAssistantConversationRequest =>
      GetAllAssistantConversationRequest.decode(value),
    responseSerialize: (value: GetAllAssistantConversationResponse): Buffer =>
      Buffer.from(GetAllAssistantConversationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAllAssistantConversationResponse =>
      GetAllAssistantConversationResponse.decode(value),
  },
  getAllConversationMessage: {
    path: "/talk_api.TalkService/GetAllConversationMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllConversationMessageRequest): Buffer =>
      Buffer.from(GetAllConversationMessageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAllConversationMessageRequest =>
      GetAllConversationMessageRequest.decode(value),
    responseSerialize: (value: GetAllConversationMessageResponse): Buffer =>
      Buffer.from(GetAllConversationMessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAllConversationMessageResponse =>
      GetAllConversationMessageResponse.decode(value),
  },
  createMessageMetric: {
    path: "/talk_api.TalkService/CreateMessageMetric",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateMessageMetricRequest): Buffer =>
      Buffer.from(CreateMessageMetricRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateMessageMetricRequest => CreateMessageMetricRequest.decode(value),
    responseSerialize: (value: CreateMessageMetricResponse): Buffer =>
      Buffer.from(CreateMessageMetricResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateMessageMetricResponse => CreateMessageMetricResponse.decode(value),
  },
  createConversationMetric: {
    path: "/talk_api.TalkService/CreateConversationMetric",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateConversationMetricRequest): Buffer =>
      Buffer.from(CreateConversationMetricRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateConversationMetricRequest =>
      CreateConversationMetricRequest.decode(value),
    responseSerialize: (value: CreateConversationMetricResponse): Buffer =>
      Buffer.from(CreateConversationMetricResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateConversationMetricResponse =>
      CreateConversationMetricResponse.decode(value),
  },
} as const;

export interface TalkServiceServer extends UntypedServiceImplementation {
  assistantMessaging: handleServerStreamingCall<AssistantMessagingRequest, AssistantMessagingResponse>;
  assistantTalk: handleBidiStreamingCall<AssistantMessagingRequest, AssistantMessagingResponse>;
  getAllAssistantConversation: handleUnaryCall<GetAllAssistantConversationRequest, GetAllAssistantConversationResponse>;
  getAllConversationMessage: handleUnaryCall<GetAllConversationMessageRequest, GetAllConversationMessageResponse>;
  createMessageMetric: handleUnaryCall<CreateMessageMetricRequest, CreateMessageMetricResponse>;
  createConversationMetric: handleUnaryCall<CreateConversationMetricRequest, CreateConversationMetricResponse>;
}

export interface TalkServiceClient extends Client {
  assistantMessaging(
    request: AssistantMessagingRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<AssistantMessagingResponse>;
  assistantMessaging(
    request: AssistantMessagingRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<AssistantMessagingResponse>;
  assistantTalk(): ClientDuplexStream<AssistantMessagingRequest, AssistantMessagingResponse>;
  assistantTalk(
    options: Partial<CallOptions>,
  ): ClientDuplexStream<AssistantMessagingRequest, AssistantMessagingResponse>;
  assistantTalk(
    metadata: Metadata,
    options?: Partial<CallOptions>,
  ): ClientDuplexStream<AssistantMessagingRequest, AssistantMessagingResponse>;
  getAllAssistantConversation(
    request: GetAllAssistantConversationRequest,
    callback: (error: ServiceError | null, response: GetAllAssistantConversationResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantConversation(
    request: GetAllAssistantConversationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllAssistantConversationResponse) => void,
  ): ClientUnaryCall;
  getAllAssistantConversation(
    request: GetAllAssistantConversationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllAssistantConversationResponse) => void,
  ): ClientUnaryCall;
  getAllConversationMessage(
    request: GetAllConversationMessageRequest,
    callback: (error: ServiceError | null, response: GetAllConversationMessageResponse) => void,
  ): ClientUnaryCall;
  getAllConversationMessage(
    request: GetAllConversationMessageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAllConversationMessageResponse) => void,
  ): ClientUnaryCall;
  getAllConversationMessage(
    request: GetAllConversationMessageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAllConversationMessageResponse) => void,
  ): ClientUnaryCall;
  createMessageMetric(
    request: CreateMessageMetricRequest,
    callback: (error: ServiceError | null, response: CreateMessageMetricResponse) => void,
  ): ClientUnaryCall;
  createMessageMetric(
    request: CreateMessageMetricRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateMessageMetricResponse) => void,
  ): ClientUnaryCall;
  createMessageMetric(
    request: CreateMessageMetricRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateMessageMetricResponse) => void,
  ): ClientUnaryCall;
  createConversationMetric(
    request: CreateConversationMetricRequest,
    callback: (error: ServiceError | null, response: CreateConversationMetricResponse) => void,
  ): ClientUnaryCall;
  createConversationMetric(
    request: CreateConversationMetricRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateConversationMetricResponse) => void,
  ): ClientUnaryCall;
  createConversationMetric(
    request: CreateConversationMetricRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateConversationMetricResponse) => void,
  ): ClientUnaryCall;
}

export const TalkServiceClient = makeGenericClientConstructor(
  TalkServiceService,
  "talk_api.TalkService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TalkServiceClient;
  service: typeof TalkServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
