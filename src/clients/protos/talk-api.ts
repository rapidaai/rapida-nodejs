/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: talk-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/any";
import * as dependency_2 from "./google/protobuf/timestamp";
import * as dependency_3 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace talk_api {
    export class AssistantDefinition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistantId?: string;
            version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            assistantId?: string;
            version?: string;
        }): AssistantDefinition {
            const message = new AssistantDefinition({});
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            return message;
        }
        toObject() {
            const data: {
                assistantId?: string;
                version?: string;
            } = {};
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assistantId != "0")
                writer.writeUint64String(1, this.assistantId);
            if (this.version.length)
                writer.writeString(2, this.version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantDefinition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantDefinition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantDefinition {
            return AssistantDefinition.deserialize(bytes);
        }
    }
    export class AssistantConversationConfiguration extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistantConversationId?: string;
            assistant?: AssistantDefinition;
            time?: dependency_2.google.protobuf.Timestamp;
            metadata?: Map<string, dependency_1.google.protobuf.Any>;
            args?: Map<string, dependency_1.google.protobuf.Any>;
            options?: Map<string, dependency_1.google.protobuf.Any>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistantConversationId" in data && data.assistantConversationId != undefined) {
                    this.assistantConversationId = data.assistantConversationId;
                }
                if ("assistant" in data && data.assistant != undefined) {
                    this.assistant = data.assistant;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("args" in data && data.args != undefined) {
                    this.args = data.args;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
            if (!this.args)
                this.args = new Map();
            if (!this.options)
                this.options = new Map();
        }
        get assistantConversationId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set assistantConversationId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistant() {
            return pb_1.Message.getWrapperField(this, AssistantDefinition, 2) as AssistantDefinition;
        }
        set assistant(value: AssistantDefinition) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_assistant() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 3) as dependency_2.google.protobuf.Timestamp;
        }
        set time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get metadata() {
            return pb_1.Message.getField(this, 4) as any as Map<string, dependency_1.google.protobuf.Any>;
        }
        set metadata(value: Map<string, dependency_1.google.protobuf.Any>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get args() {
            return pb_1.Message.getField(this, 5) as any as Map<string, dependency_1.google.protobuf.Any>;
        }
        set args(value: Map<string, dependency_1.google.protobuf.Any>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get options() {
            return pb_1.Message.getField(this, 6) as any as Map<string, dependency_1.google.protobuf.Any>;
        }
        set options(value: Map<string, dependency_1.google.protobuf.Any>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        static fromObject(data: {
            assistantConversationId?: string;
            assistant?: ReturnType<typeof AssistantDefinition.prototype.toObject>;
            time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            metadata?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            };
            args?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            };
            options?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            };
        }): AssistantConversationConfiguration {
            const message = new AssistantConversationConfiguration({});
            if (data.assistantConversationId != null) {
                message.assistantConversationId = data.assistantConversationId;
            }
            if (data.assistant != null) {
                message.assistant = AssistantDefinition.fromObject(data.assistant);
            }
            if (data.time != null) {
                message.time = dependency_2.google.protobuf.Timestamp.fromObject(data.time);
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata).map(([key, value]) => [key, dependency_1.google.protobuf.Any.fromObject(value)]));
            }
            if (typeof data.args == "object") {
                message.args = new Map(Object.entries(data.args).map(([key, value]) => [key, dependency_1.google.protobuf.Any.fromObject(value)]));
            }
            if (typeof data.options == "object") {
                message.options = new Map(Object.entries(data.options).map(([key, value]) => [key, dependency_1.google.protobuf.Any.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                assistantConversationId?: string;
                assistant?: ReturnType<typeof AssistantDefinition.prototype.toObject>;
                time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                metadata?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                };
                args?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                };
                options?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                };
            } = {};
            if (this.assistantConversationId != null) {
                data.assistantConversationId = this.assistantConversationId;
            }
            if (this.assistant != null) {
                data.assistant = this.assistant.toObject();
            }
            if (this.time != null) {
                data.time = this.time.toObject();
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)((Array.from)(this.metadata).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.args != null) {
                data.args = (Object.fromEntries)((Array.from)(this.args).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.options != null) {
                data.options = (Object.fromEntries)((Array.from)(this.options).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assistantConversationId != "0")
                writer.writeUint64String(1, this.assistantConversationId);
            if (this.has_assistant)
                writer.writeMessage(2, this.assistant, () => this.assistant.serialize(writer));
            if (this.has_time)
                writer.writeMessage(3, this.time, () => this.time.serialize(writer));
            for (const [key, value] of this.metadata) {
                writer.writeMessage(4, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.args) {
                writer.writeMessage(5, this.args, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.options) {
                writer.writeMessage(6, this.options, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantConversationConfiguration {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantConversationConfiguration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assistantConversationId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.assistant, () => message.assistant = AssistantDefinition.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.time, () => message.time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.args as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.options as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantConversationConfiguration {
            return AssistantConversationConfiguration.deserialize(bytes);
        }
    }
    export class AssistantConversationInterruption extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            type?: AssistantConversationInterruption.InterruptionType;
            time?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, AssistantConversationInterruption.InterruptionType.INTERRUPTION_TYPE_UNSPECIFIED) as AssistantConversationInterruption.InterruptionType;
        }
        set type(value: AssistantConversationInterruption.InterruptionType) {
            pb_1.Message.setField(this, 2, value);
        }
        get time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 3) as dependency_2.google.protobuf.Timestamp;
        }
        set time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            id?: string;
            type?: AssistantConversationInterruption.InterruptionType;
            time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): AssistantConversationInterruption {
            const message = new AssistantConversationInterruption({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.time != null) {
                message.time = dependency_2.google.protobuf.Timestamp.fromObject(data.time);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                type?: AssistantConversationInterruption.InterruptionType;
                time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.time != null) {
                data.time = this.time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.type != AssistantConversationInterruption.InterruptionType.INTERRUPTION_TYPE_UNSPECIFIED)
                writer.writeEnum(2, this.type);
            if (this.has_time)
                writer.writeMessage(3, this.time, () => this.time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantConversationInterruption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantConversationInterruption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.time, () => message.time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantConversationInterruption {
            return AssistantConversationInterruption.deserialize(bytes);
        }
    }
    export namespace AssistantConversationInterruption {
        export enum InterruptionType {
            INTERRUPTION_TYPE_UNSPECIFIED = 0,
            INTERRUPTION_TYPE_VAD = 1,
            INTERRUPTION_TYPE_WORD = 2
        }
    }
    export class AssistantConversationUserMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: dependency_3.Message;
            id?: string;
            completed?: boolean;
            time?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("completed" in data && data.completed != undefined) {
                    this.completed = data.completed;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
            }
        }
        get message() {
            return pb_1.Message.getWrapperField(this, dependency_3.Message, 1) as dependency_3.Message;
        }
        set message(value: dependency_3.Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get completed() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set completed(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 4) as dependency_2.google.protobuf.Timestamp;
        }
        set time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            message?: ReturnType<typeof dependency_3.Message.prototype.toObject>;
            id?: string;
            completed?: boolean;
            time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): AssistantConversationUserMessage {
            const message = new AssistantConversationUserMessage({});
            if (data.message != null) {
                message.message = dependency_3.Message.fromObject(data.message);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.completed != null) {
                message.completed = data.completed;
            }
            if (data.time != null) {
                message.time = dependency_2.google.protobuf.Timestamp.fromObject(data.time);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: ReturnType<typeof dependency_3.Message.prototype.toObject>;
                id?: string;
                completed?: boolean;
                time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.completed != null) {
                data.completed = this.completed;
            }
            if (this.time != null) {
                data.time = this.time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_message)
                writer.writeMessage(1, this.message, () => this.message.serialize(writer));
            if (this.id.length)
                writer.writeString(2, this.id);
            if (this.completed != false)
                writer.writeBool(3, this.completed);
            if (this.has_time)
                writer.writeMessage(4, this.time, () => this.time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantConversationUserMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantConversationUserMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.message, () => message.message = dependency_3.Message.deserialize(reader));
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    case 3:
                        message.completed = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.time, () => message.time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantConversationUserMessage {
            return AssistantConversationUserMessage.deserialize(bytes);
        }
    }
    export class AssistantConversationAssistantMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: dependency_3.Message;
            id?: string;
            completed?: boolean;
            time?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("completed" in data && data.completed != undefined) {
                    this.completed = data.completed;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
            }
        }
        get message() {
            return pb_1.Message.getWrapperField(this, dependency_3.Message, 1) as dependency_3.Message;
        }
        set message(value: dependency_3.Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get completed() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set completed(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 4) as dependency_2.google.protobuf.Timestamp;
        }
        set time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            message?: ReturnType<typeof dependency_3.Message.prototype.toObject>;
            id?: string;
            completed?: boolean;
            time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): AssistantConversationAssistantMessage {
            const message = new AssistantConversationAssistantMessage({});
            if (data.message != null) {
                message.message = dependency_3.Message.fromObject(data.message);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.completed != null) {
                message.completed = data.completed;
            }
            if (data.time != null) {
                message.time = dependency_2.google.protobuf.Timestamp.fromObject(data.time);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: ReturnType<typeof dependency_3.Message.prototype.toObject>;
                id?: string;
                completed?: boolean;
                time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.completed != null) {
                data.completed = this.completed;
            }
            if (this.time != null) {
                data.time = this.time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_message)
                writer.writeMessage(1, this.message, () => this.message.serialize(writer));
            if (this.id.length)
                writer.writeString(2, this.id);
            if (this.completed != false)
                writer.writeBool(3, this.completed);
            if (this.has_time)
                writer.writeMessage(4, this.time, () => this.time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantConversationAssistantMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantConversationAssistantMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.message, () => message.message = dependency_3.Message.deserialize(reader));
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    case 3:
                        message.completed = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.time, () => message.time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantConversationAssistantMessage {
            return AssistantConversationAssistantMessage.deserialize(bytes);
        }
    }
    export class AssistantMessagingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({} & (({
            configuration?: AssistantConversationConfiguration;
            message?: never;
        } | {
            configuration?: never;
            message?: AssistantConversationUserMessage;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("configuration" in data && data.configuration != undefined) {
                    this.configuration = data.configuration;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get configuration() {
            return pb_1.Message.getWrapperField(this, AssistantConversationConfiguration, 2) as AssistantConversationConfiguration;
        }
        set configuration(value: AssistantConversationConfiguration) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_configuration() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get message() {
            return pb_1.Message.getWrapperField(this, AssistantConversationUserMessage, 3) as AssistantConversationUserMessage;
        }
        set message(value: AssistantConversationUserMessage) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get request() {
            const cases: {
                [index: number]: "none" | "configuration" | "message";
            } = {
                0: "none",
                2: "configuration",
                3: "message"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            configuration?: ReturnType<typeof AssistantConversationConfiguration.prototype.toObject>;
            message?: ReturnType<typeof AssistantConversationUserMessage.prototype.toObject>;
        }): AssistantMessagingRequest {
            const message = new AssistantMessagingRequest({});
            if (data.configuration != null) {
                message.configuration = AssistantConversationConfiguration.fromObject(data.configuration);
            }
            if (data.message != null) {
                message.message = AssistantConversationUserMessage.fromObject(data.message);
            }
            return message;
        }
        toObject() {
            const data: {
                configuration?: ReturnType<typeof AssistantConversationConfiguration.prototype.toObject>;
                message?: ReturnType<typeof AssistantConversationUserMessage.prototype.toObject>;
            } = {};
            if (this.configuration != null) {
                data.configuration = this.configuration.toObject();
            }
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_configuration)
                writer.writeMessage(2, this.configuration, () => this.configuration.serialize(writer));
            if (this.has_message)
                writer.writeMessage(3, this.message, () => this.message.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantMessagingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantMessagingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.configuration, () => message.configuration = AssistantConversationConfiguration.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.message, () => message.message = AssistantConversationUserMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantMessagingRequest {
            return AssistantMessagingRequest.deserialize(bytes);
        }
    }
    export class AssistantMessagingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[9, 10, 11, 12, 13]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
            error?: dependency_3.Error;
        } & (({
            configuration?: AssistantConversationConfiguration;
            interruption?: never;
            user?: never;
            assistant?: never;
            message?: never;
        } | {
            configuration?: never;
            interruption?: AssistantConversationInterruption;
            user?: never;
            assistant?: never;
            message?: never;
        } | {
            configuration?: never;
            interruption?: never;
            user?: AssistantConversationUserMessage;
            assistant?: never;
            message?: never;
        } | {
            configuration?: never;
            interruption?: never;
            user?: never;
            assistant?: AssistantConversationAssistantMessage;
            message?: never;
        } | {
            configuration?: never;
            interruption?: never;
            user?: never;
            assistant?: never;
            message?: dependency_3.AssistantConversationMessage;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("configuration" in data && data.configuration != undefined) {
                    this.configuration = data.configuration;
                }
                if ("interruption" in data && data.interruption != undefined) {
                    this.interruption = data.interruption;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("assistant" in data && data.assistant != undefined) {
                    this.assistant = data.assistant;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get configuration() {
            return pb_1.Message.getWrapperField(this, AssistantConversationConfiguration, 9) as AssistantConversationConfiguration;
        }
        set configuration(value: AssistantConversationConfiguration) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_configuration() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get interruption() {
            return pb_1.Message.getWrapperField(this, AssistantConversationInterruption, 10) as AssistantConversationInterruption;
        }
        set interruption(value: AssistantConversationInterruption) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_interruption() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get user() {
            return pb_1.Message.getWrapperField(this, AssistantConversationUserMessage, 11) as AssistantConversationUserMessage;
        }
        set user(value: AssistantConversationUserMessage) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get assistant() {
            return pb_1.Message.getWrapperField(this, AssistantConversationAssistantMessage, 12) as AssistantConversationAssistantMessage;
        }
        set assistant(value: AssistantConversationAssistantMessage) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_assistant() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get message() {
            return pb_1.Message.getWrapperField(this, dependency_3.AssistantConversationMessage, 13) as dependency_3.AssistantConversationMessage;
        }
        set message(value: dependency_3.AssistantConversationMessage) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get data() {
            const cases: {
                [index: number]: "none" | "configuration" | "interruption" | "user" | "assistant" | "message";
            } = {
                0: "none",
                9: "configuration",
                10: "interruption",
                11: "user",
                12: "assistant",
                13: "message"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9, 10, 11, 12, 13])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            configuration?: ReturnType<typeof AssistantConversationConfiguration.prototype.toObject>;
            interruption?: ReturnType<typeof AssistantConversationInterruption.prototype.toObject>;
            user?: ReturnType<typeof AssistantConversationUserMessage.prototype.toObject>;
            assistant?: ReturnType<typeof AssistantConversationAssistantMessage.prototype.toObject>;
            message?: ReturnType<typeof dependency_3.AssistantConversationMessage.prototype.toObject>;
        }): AssistantMessagingResponse {
            const message = new AssistantMessagingResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            if (data.configuration != null) {
                message.configuration = AssistantConversationConfiguration.fromObject(data.configuration);
            }
            if (data.interruption != null) {
                message.interruption = AssistantConversationInterruption.fromObject(data.interruption);
            }
            if (data.user != null) {
                message.user = AssistantConversationUserMessage.fromObject(data.user);
            }
            if (data.assistant != null) {
                message.assistant = AssistantConversationAssistantMessage.fromObject(data.assistant);
            }
            if (data.message != null) {
                message.message = dependency_3.AssistantConversationMessage.fromObject(data.message);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
                configuration?: ReturnType<typeof AssistantConversationConfiguration.prototype.toObject>;
                interruption?: ReturnType<typeof AssistantConversationInterruption.prototype.toObject>;
                user?: ReturnType<typeof AssistantConversationUserMessage.prototype.toObject>;
                assistant?: ReturnType<typeof AssistantConversationAssistantMessage.prototype.toObject>;
                message?: ReturnType<typeof dependency_3.AssistantConversationMessage.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.configuration != null) {
                data.configuration = this.configuration.toObject();
            }
            if (this.interruption != null) {
                data.interruption = this.interruption.toObject();
            }
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.assistant != null) {
                data.assistant = this.assistant.toObject();
            }
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_configuration)
                writer.writeMessage(9, this.configuration, () => this.configuration.serialize(writer));
            if (this.has_interruption)
                writer.writeMessage(10, this.interruption, () => this.interruption.serialize(writer));
            if (this.has_user)
                writer.writeMessage(11, this.user, () => this.user.serialize(writer));
            if (this.has_assistant)
                writer.writeMessage(12, this.assistant, () => this.assistant.serialize(writer));
            if (this.has_message)
                writer.writeMessage(13, this.message, () => this.message.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantMessagingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantMessagingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.configuration, () => message.configuration = AssistantConversationConfiguration.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.interruption, () => message.interruption = AssistantConversationInterruption.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.user, () => message.user = AssistantConversationUserMessage.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.assistant, () => message.assistant = AssistantConversationAssistantMessage.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.message, () => message.message = dependency_3.AssistantConversationMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantMessagingResponse {
            return AssistantMessagingResponse.deserialize(bytes);
        }
    }
    export class CreateMessageMetricRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistantId?: string;
            assistantConversationId?: string;
            messageId?: string;
            metrics?: dependency_3.Metric[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("assistantConversationId" in data && data.assistantConversationId != undefined) {
                    this.assistantConversationId = data.assistantConversationId;
                }
                if ("messageId" in data && data.messageId != undefined) {
                    this.messageId = data.messageId;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
            }
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantConversationId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantConversationId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get messageId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set messageId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Metric, 4) as dependency_3.Metric[];
        }
        set metrics(value: dependency_3.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            assistantId?: string;
            assistantConversationId?: string;
            messageId?: string;
            metrics?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
        }): CreateMessageMetricRequest {
            const message = new CreateMessageMetricRequest({});
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.assistantConversationId != null) {
                message.assistantConversationId = data.assistantConversationId;
            }
            if (data.messageId != null) {
                message.messageId = data.messageId;
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => dependency_3.Metric.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                assistantId?: string;
                assistantConversationId?: string;
                messageId?: string;
                metrics?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
            } = {};
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.assistantConversationId != null) {
                data.assistantConversationId = this.assistantConversationId;
            }
            if (this.messageId != null) {
                data.messageId = this.messageId;
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: dependency_3.Metric) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assistantId != "0")
                writer.writeUint64String(1, this.assistantId);
            if (this.assistantConversationId != "0")
                writer.writeUint64String(2, this.assistantConversationId);
            if (this.messageId.length)
                writer.writeString(3, this.messageId);
            if (this.metrics.length)
                writer.writeRepeatedMessage(4, this.metrics, (item: dependency_3.Metric) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateMessageMetricRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateMessageMetricRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantConversationId = reader.readUint64String();
                        break;
                    case 3:
                        message.messageId = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_3.Metric.deserialize(reader), dependency_3.Metric));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateMessageMetricRequest {
            return CreateMessageMetricRequest.deserialize(bytes);
        }
    }
    export class CreateMessageMetricResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_3.Metric[];
            error?: dependency_3.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Metric, 3) as dependency_3.Metric[];
        }
        set data(value: dependency_3.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
        }): CreateMessageMetricResponse {
            const message = new CreateMessageMetricResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => dependency_3.Metric.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: dependency_3.Metric) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: dependency_3.Metric) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateMessageMetricResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateMessageMetricResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.Metric.deserialize(reader), dependency_3.Metric));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateMessageMetricResponse {
            return CreateMessageMetricResponse.deserialize(bytes);
        }
    }
    export class CreateConversationMetricRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistantId?: string;
            assistantConversationId?: string;
            metrics?: dependency_3.Metric[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("assistantConversationId" in data && data.assistantConversationId != undefined) {
                    this.assistantConversationId = data.assistantConversationId;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
            }
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantConversationId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantConversationId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Metric, 3) as dependency_3.Metric[];
        }
        set metrics(value: dependency_3.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            assistantId?: string;
            assistantConversationId?: string;
            metrics?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
        }): CreateConversationMetricRequest {
            const message = new CreateConversationMetricRequest({});
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.assistantConversationId != null) {
                message.assistantConversationId = data.assistantConversationId;
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => dependency_3.Metric.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                assistantId?: string;
                assistantConversationId?: string;
                metrics?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
            } = {};
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.assistantConversationId != null) {
                data.assistantConversationId = this.assistantConversationId;
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: dependency_3.Metric) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assistantId != "0")
                writer.writeUint64String(1, this.assistantId);
            if (this.assistantConversationId != "0")
                writer.writeUint64String(2, this.assistantConversationId);
            if (this.metrics.length)
                writer.writeRepeatedMessage(3, this.metrics, (item: dependency_3.Metric) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateConversationMetricRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateConversationMetricRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantConversationId = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.Metric.deserialize(reader), dependency_3.Metric));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateConversationMetricRequest {
            return CreateConversationMetricRequest.deserialize(bytes);
        }
    }
    export class CreateConversationMetricResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_3.Metric[];
            error?: dependency_3.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Metric, 3) as dependency_3.Metric[];
        }
        set data(value: dependency_3.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
        }): CreateConversationMetricResponse {
            const message = new CreateConversationMetricResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => dependency_3.Metric.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: dependency_3.Metric) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: dependency_3.Metric) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateConversationMetricResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateConversationMetricResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.Metric.deserialize(reader), dependency_3.Metric));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateConversationMetricResponse {
            return CreateConversationMetricResponse.deserialize(bytes);
        }
    }
    export class CreatePhoneCallRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistant?: AssistantDefinition;
            metadata?: Map<string, dependency_1.google.protobuf.Any>;
            args?: Map<string, dependency_1.google.protobuf.Any>;
            options?: Map<string, dependency_1.google.protobuf.Any>;
            fromNumber?: string;
            toNumber?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistant" in data && data.assistant != undefined) {
                    this.assistant = data.assistant;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("args" in data && data.args != undefined) {
                    this.args = data.args;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("fromNumber" in data && data.fromNumber != undefined) {
                    this.fromNumber = data.fromNumber;
                }
                if ("toNumber" in data && data.toNumber != undefined) {
                    this.toNumber = data.toNumber;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
            if (!this.args)
                this.args = new Map();
            if (!this.options)
                this.options = new Map();
        }
        get assistant() {
            return pb_1.Message.getWrapperField(this, AssistantDefinition, 1) as AssistantDefinition;
        }
        set assistant(value: AssistantDefinition) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_assistant() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get metadata() {
            return pb_1.Message.getField(this, 3) as any as Map<string, dependency_1.google.protobuf.Any>;
        }
        set metadata(value: Map<string, dependency_1.google.protobuf.Any>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get args() {
            return pb_1.Message.getField(this, 4) as any as Map<string, dependency_1.google.protobuf.Any>;
        }
        set args(value: Map<string, dependency_1.google.protobuf.Any>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get options() {
            return pb_1.Message.getField(this, 5) as any as Map<string, dependency_1.google.protobuf.Any>;
        }
        set options(value: Map<string, dependency_1.google.protobuf.Any>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get fromNumber() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set fromNumber(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get toNumber() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set toNumber(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            assistant?: ReturnType<typeof AssistantDefinition.prototype.toObject>;
            metadata?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            };
            args?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            };
            options?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            };
            fromNumber?: string;
            toNumber?: string;
        }): CreatePhoneCallRequest {
            const message = new CreatePhoneCallRequest({});
            if (data.assistant != null) {
                message.assistant = AssistantDefinition.fromObject(data.assistant);
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata).map(([key, value]) => [key, dependency_1.google.protobuf.Any.fromObject(value)]));
            }
            if (typeof data.args == "object") {
                message.args = new Map(Object.entries(data.args).map(([key, value]) => [key, dependency_1.google.protobuf.Any.fromObject(value)]));
            }
            if (typeof data.options == "object") {
                message.options = new Map(Object.entries(data.options).map(([key, value]) => [key, dependency_1.google.protobuf.Any.fromObject(value)]));
            }
            if (data.fromNumber != null) {
                message.fromNumber = data.fromNumber;
            }
            if (data.toNumber != null) {
                message.toNumber = data.toNumber;
            }
            return message;
        }
        toObject() {
            const data: {
                assistant?: ReturnType<typeof AssistantDefinition.prototype.toObject>;
                metadata?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                };
                args?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                };
                options?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                };
                fromNumber?: string;
                toNumber?: string;
            } = {};
            if (this.assistant != null) {
                data.assistant = this.assistant.toObject();
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)((Array.from)(this.metadata).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.args != null) {
                data.args = (Object.fromEntries)((Array.from)(this.args).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.options != null) {
                data.options = (Object.fromEntries)((Array.from)(this.options).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.fromNumber != null) {
                data.fromNumber = this.fromNumber;
            }
            if (this.toNumber != null) {
                data.toNumber = this.toNumber;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_assistant)
                writer.writeMessage(1, this.assistant, () => this.assistant.serialize(writer));
            for (const [key, value] of this.metadata) {
                writer.writeMessage(3, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.args) {
                writer.writeMessage(4, this.args, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.options) {
                writer.writeMessage(5, this.options, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.fromNumber.length)
                writer.writeString(6, this.fromNumber);
            if (this.toNumber.length)
                writer.writeString(7, this.toNumber);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePhoneCallRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePhoneCallRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.assistant, () => message.assistant = AssistantDefinition.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.args as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.options as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 6:
                        message.fromNumber = reader.readString();
                        break;
                    case 7:
                        message.toNumber = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePhoneCallRequest {
            return CreatePhoneCallRequest.deserialize(bytes);
        }
    }
    export class CreatePhoneCallResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_3.AssistantConversation;
            error?: dependency_3.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_3.AssistantConversation, 3) as dependency_3.AssistantConversation;
        }
        set data(value: dependency_3.AssistantConversation) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_3.AssistantConversation.prototype.toObject>;
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
        }): CreatePhoneCallResponse {
            const message = new CreatePhoneCallResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = dependency_3.AssistantConversation.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_3.AssistantConversation.prototype.toObject>;
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePhoneCallResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePhoneCallResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = dependency_3.AssistantConversation.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePhoneCallResponse {
            return CreatePhoneCallResponse.deserialize(bytes);
        }
    }
    export class CreateBulkPhoneCallRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            phoneCalls?: CreatePhoneCallRequest[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phoneCalls" in data && data.phoneCalls != undefined) {
                    this.phoneCalls = data.phoneCalls;
                }
            }
        }
        get phoneCalls() {
            return pb_1.Message.getRepeatedWrapperField(this, CreatePhoneCallRequest, 6) as CreatePhoneCallRequest[];
        }
        set phoneCalls(value: CreatePhoneCallRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            phoneCalls?: ReturnType<typeof CreatePhoneCallRequest.prototype.toObject>[];
        }): CreateBulkPhoneCallRequest {
            const message = new CreateBulkPhoneCallRequest({});
            if (data.phoneCalls != null) {
                message.phoneCalls = data.phoneCalls.map(item => CreatePhoneCallRequest.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                phoneCalls?: ReturnType<typeof CreatePhoneCallRequest.prototype.toObject>[];
            } = {};
            if (this.phoneCalls != null) {
                data.phoneCalls = this.phoneCalls.map((item: CreatePhoneCallRequest) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.phoneCalls.length)
                writer.writeRepeatedMessage(6, this.phoneCalls, (item: CreatePhoneCallRequest) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBulkPhoneCallRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateBulkPhoneCallRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 6:
                        reader.readMessage(message.phoneCalls, () => pb_1.Message.addToRepeatedWrapperField(message, 6, CreatePhoneCallRequest.deserialize(reader), CreatePhoneCallRequest));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateBulkPhoneCallRequest {
            return CreateBulkPhoneCallRequest.deserialize(bytes);
        }
    }
    export class CreateBulkPhoneCallResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_3.AssistantConversation[];
            error?: dependency_3.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.AssistantConversation, 3) as dependency_3.AssistantConversation[];
        }
        set data(value: dependency_3.AssistantConversation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_3.AssistantConversation.prototype.toObject>[];
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
        }): CreateBulkPhoneCallResponse {
            const message = new CreateBulkPhoneCallResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => dependency_3.AssistantConversation.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_3.AssistantConversation.prototype.toObject>[];
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: dependency_3.AssistantConversation) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: dependency_3.AssistantConversation) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBulkPhoneCallResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateBulkPhoneCallResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.AssistantConversation.deserialize(reader), dependency_3.AssistantConversation));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateBulkPhoneCallResponse {
            return CreateBulkPhoneCallResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTalkServiceService {
        static definition = {
            AssistantTalk: {
                path: "/talk_api.TalkService/AssistantTalk",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: AssistantMessagingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AssistantMessagingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssistantMessagingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssistantMessagingResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllAssistantConversation: {
                path: "/talk_api.TalkService/GetAllAssistantConversation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.GetAllAssistantConversationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.GetAllAssistantConversationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.GetAllAssistantConversationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.GetAllAssistantConversationResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllConversationMessage: {
                path: "/talk_api.TalkService/GetAllConversationMessage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.GetAllConversationMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.GetAllConversationMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.GetAllConversationMessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.GetAllConversationMessageResponse.deserialize(new Uint8Array(bytes))
            },
            CreateMessageMetric: {
                path: "/talk_api.TalkService/CreateMessageMetric",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateMessageMetricRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateMessageMetricRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateMessageMetricResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateMessageMetricResponse.deserialize(new Uint8Array(bytes))
            },
            CreateConversationMetric: {
                path: "/talk_api.TalkService/CreateConversationMetric",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateConversationMetricRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateConversationMetricRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateConversationMetricResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateConversationMetricResponse.deserialize(new Uint8Array(bytes))
            },
            CreatePhoneCall: {
                path: "/talk_api.TalkService/CreatePhoneCall",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreatePhoneCallRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreatePhoneCallRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreatePhoneCallResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreatePhoneCallResponse.deserialize(new Uint8Array(bytes))
            },
            CreateBulkPhoneCall: {
                path: "/talk_api.TalkService/CreateBulkPhoneCall",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateBulkPhoneCallRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateBulkPhoneCallRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateBulkPhoneCallResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateBulkPhoneCallResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract AssistantTalk(call: grpc_1.ServerDuplexStream<AssistantMessagingRequest, AssistantMessagingResponse>): void;
        abstract GetAllAssistantConversation(call: grpc_1.ServerUnaryCall<dependency_3.GetAllAssistantConversationRequest, dependency_3.GetAllAssistantConversationResponse>, callback: grpc_1.sendUnaryData<dependency_3.GetAllAssistantConversationResponse>): void;
        abstract GetAllConversationMessage(call: grpc_1.ServerUnaryCall<dependency_3.GetAllConversationMessageRequest, dependency_3.GetAllConversationMessageResponse>, callback: grpc_1.sendUnaryData<dependency_3.GetAllConversationMessageResponse>): void;
        abstract CreateMessageMetric(call: grpc_1.ServerUnaryCall<CreateMessageMetricRequest, CreateMessageMetricResponse>, callback: grpc_1.sendUnaryData<CreateMessageMetricResponse>): void;
        abstract CreateConversationMetric(call: grpc_1.ServerUnaryCall<CreateConversationMetricRequest, CreateConversationMetricResponse>, callback: grpc_1.sendUnaryData<CreateConversationMetricResponse>): void;
        abstract CreatePhoneCall(call: grpc_1.ServerUnaryCall<CreatePhoneCallRequest, CreatePhoneCallResponse>, callback: grpc_1.sendUnaryData<CreatePhoneCallResponse>): void;
        abstract CreateBulkPhoneCall(call: grpc_1.ServerUnaryCall<CreateBulkPhoneCallRequest, CreateBulkPhoneCallResponse>, callback: grpc_1.sendUnaryData<CreateBulkPhoneCallResponse>): void;
    }
    export class TalkServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTalkServiceService.definition, "TalkService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        AssistantTalk: GrpcChunkServiceInterface<AssistantMessagingRequest, AssistantMessagingResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<AssistantMessagingRequest, AssistantMessagingResponse> => {
            return super.AssistantTalk(metadata, options);
        };
        GetAllAssistantConversation: GrpcUnaryServiceInterface<dependency_3.GetAllAssistantConversationRequest, dependency_3.GetAllAssistantConversationResponse> = (message: dependency_3.GetAllAssistantConversationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.GetAllAssistantConversationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.GetAllAssistantConversationResponse>, callback?: grpc_1.requestCallback<dependency_3.GetAllAssistantConversationResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllAssistantConversation(message, metadata, options, callback);
        };
        GetAllConversationMessage: GrpcUnaryServiceInterface<dependency_3.GetAllConversationMessageRequest, dependency_3.GetAllConversationMessageResponse> = (message: dependency_3.GetAllConversationMessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.GetAllConversationMessageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.GetAllConversationMessageResponse>, callback?: grpc_1.requestCallback<dependency_3.GetAllConversationMessageResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllConversationMessage(message, metadata, options, callback);
        };
        CreateMessageMetric: GrpcUnaryServiceInterface<CreateMessageMetricRequest, CreateMessageMetricResponse> = (message: CreateMessageMetricRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateMessageMetricResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateMessageMetricResponse>, callback?: grpc_1.requestCallback<CreateMessageMetricResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateMessageMetric(message, metadata, options, callback);
        };
        CreateConversationMetric: GrpcUnaryServiceInterface<CreateConversationMetricRequest, CreateConversationMetricResponse> = (message: CreateConversationMetricRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateConversationMetricResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateConversationMetricResponse>, callback?: grpc_1.requestCallback<CreateConversationMetricResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateConversationMetric(message, metadata, options, callback);
        };
        CreatePhoneCall: GrpcUnaryServiceInterface<CreatePhoneCallRequest, CreatePhoneCallResponse> = (message: CreatePhoneCallRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreatePhoneCallResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreatePhoneCallResponse>, callback?: grpc_1.requestCallback<CreatePhoneCallResponse>): grpc_1.ClientUnaryCall => {
            return super.CreatePhoneCall(message, metadata, options, callback);
        };
        CreateBulkPhoneCall: GrpcUnaryServiceInterface<CreateBulkPhoneCallRequest, CreateBulkPhoneCallResponse> = (message: CreateBulkPhoneCallRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateBulkPhoneCallResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateBulkPhoneCallResponse>, callback?: grpc_1.requestCallback<CreateBulkPhoneCallResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateBulkPhoneCall(message, metadata, options, callback);
        };
    }
}
