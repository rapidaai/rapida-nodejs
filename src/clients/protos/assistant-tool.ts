/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: assistant-tool.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./common";
import * as dependency_3 from "./google/protobuf/struct";
import * as pb_1 from "google-protobuf";
export namespace assistant_api {
    export class AssistantTool extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantId?: string;
            name?: string;
            description?: string;
            fields?: dependency_3.google.protobuf.Struct;
            executionMethod?: string;
            executionOptions?: dependency_2.Metadata[];
            status?: string;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
                if ("executionMethod" in data && data.executionMethod != undefined) {
                    this.executionMethod = data.executionMethod;
                }
                if ("executionOptions" in data && data.executionOptions != undefined) {
                    this.executionOptions = data.executionOptions;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get fields() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 5) as dependency_3.google.protobuf.Struct;
        }
        set fields(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_fields() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get executionMethod() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set executionMethod(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get executionOptions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 7) as dependency_2.Metadata[];
        }
        set executionOptions(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 26) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 26, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 27) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 27, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 27) != null;
        }
        static fromObject(data: {
            id?: string;
            assistantId?: string;
            name?: string;
            description?: string;
            fields?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            executionMethod?: string;
            executionOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            status?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): AssistantTool {
            const message = new AssistantTool({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.fields != null) {
                message.fields = dependency_3.google.protobuf.Struct.fromObject(data.fields);
            }
            if (data.executionMethod != null) {
                message.executionMethod = data.executionMethod;
            }
            if (data.executionOptions != null) {
                message.executionOptions = data.executionOptions.map(item => dependency_2.Metadata.fromObject(item));
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantId?: string;
                name?: string;
                description?: string;
                fields?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                executionMethod?: string;
                executionOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
                status?: string;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.fields != null) {
                data.fields = this.fields.toObject();
            }
            if (this.executionMethod != null) {
                data.executionMethod = this.executionMethod;
            }
            if (this.executionOptions != null) {
                data.executionOptions = this.executionOptions.map((item: dependency_2.Metadata) => item.toObject());
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.description.length)
                writer.writeString(4, this.description);
            if (this.has_fields)
                writer.writeMessage(5, this.fields, () => this.fields.serialize(writer));
            if (this.executionMethod.length)
                writer.writeString(6, this.executionMethod);
            if (this.executionOptions.length)
                writer.writeRepeatedMessage(7, this.executionOptions, (item: dependency_2.Metadata) => item.serialize(writer));
            if (this.status.length)
                writer.writeString(25, this.status);
            if (this.has_createdDate)
                writer.writeMessage(26, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(27, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantTool {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantTool();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.description = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.fields, () => message.fields = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 6:
                        message.executionMethod = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.executionOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    case 25:
                        message.status = reader.readString();
                        break;
                    case 26:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantTool {
            return AssistantTool.deserialize(bytes);
        }
    }
    export class CreateAssistantToolRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistantId?: string;
            name?: string;
            description?: string;
            fields?: dependency_3.google.protobuf.Struct;
            executionMethod?: string;
            executionOptions?: dependency_2.Metadata[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
                if ("executionMethod" in data && data.executionMethod != undefined) {
                    this.executionMethod = data.executionMethod;
                }
                if ("executionOptions" in data && data.executionOptions != undefined) {
                    this.executionOptions = data.executionOptions;
                }
            }
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get fields() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 5) as dependency_3.google.protobuf.Struct;
        }
        set fields(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_fields() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get executionMethod() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set executionMethod(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get executionOptions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 7) as dependency_2.Metadata[];
        }
        set executionOptions(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            assistantId?: string;
            name?: string;
            description?: string;
            fields?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            executionMethod?: string;
            executionOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
        }): CreateAssistantToolRequest {
            const message = new CreateAssistantToolRequest({});
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.fields != null) {
                message.fields = dependency_3.google.protobuf.Struct.fromObject(data.fields);
            }
            if (data.executionMethod != null) {
                message.executionMethod = data.executionMethod;
            }
            if (data.executionOptions != null) {
                message.executionOptions = data.executionOptions.map(item => dependency_2.Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                assistantId?: string;
                name?: string;
                description?: string;
                fields?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                executionMethod?: string;
                executionOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            } = {};
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.fields != null) {
                data.fields = this.fields.toObject();
            }
            if (this.executionMethod != null) {
                data.executionMethod = this.executionMethod;
            }
            if (this.executionOptions != null) {
                data.executionOptions = this.executionOptions.map((item: dependency_2.Metadata) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assistantId != "0")
                writer.writeUint64String(1, this.assistantId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.description.length)
                writer.writeString(4, this.description);
            if (this.has_fields)
                writer.writeMessage(5, this.fields, () => this.fields.serialize(writer));
            if (this.executionMethod.length)
                writer.writeString(6, this.executionMethod);
            if (this.executionOptions.length)
                writer.writeRepeatedMessage(7, this.executionOptions, (item: dependency_2.Metadata) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAssistantToolRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAssistantToolRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.description = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.fields, () => message.fields = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 6:
                        message.executionMethod = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.executionOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAssistantToolRequest {
            return CreateAssistantToolRequest.deserialize(bytes);
        }
    }
    export class UpdateAssistantToolRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantId?: string;
            name?: string;
            description?: string;
            fields?: dependency_3.google.protobuf.Struct;
            executionMethod?: string;
            executionOptions?: dependency_2.Metadata[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
                if ("executionMethod" in data && data.executionMethod != undefined) {
                    this.executionMethod = data.executionMethod;
                }
                if ("executionOptions" in data && data.executionOptions != undefined) {
                    this.executionOptions = data.executionOptions;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get fields() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 5) as dependency_3.google.protobuf.Struct;
        }
        set fields(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_fields() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get executionMethod() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set executionMethod(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get executionOptions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 7) as dependency_2.Metadata[];
        }
        set executionOptions(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            assistantId?: string;
            name?: string;
            description?: string;
            fields?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            executionMethod?: string;
            executionOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
        }): UpdateAssistantToolRequest {
            const message = new UpdateAssistantToolRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.fields != null) {
                message.fields = dependency_3.google.protobuf.Struct.fromObject(data.fields);
            }
            if (data.executionMethod != null) {
                message.executionMethod = data.executionMethod;
            }
            if (data.executionOptions != null) {
                message.executionOptions = data.executionOptions.map(item => dependency_2.Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantId?: string;
                name?: string;
                description?: string;
                fields?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                executionMethod?: string;
                executionOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.fields != null) {
                data.fields = this.fields.toObject();
            }
            if (this.executionMethod != null) {
                data.executionMethod = this.executionMethod;
            }
            if (this.executionOptions != null) {
                data.executionOptions = this.executionOptions.map((item: dependency_2.Metadata) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.description.length)
                writer.writeString(4, this.description);
            if (this.has_fields)
                writer.writeMessage(5, this.fields, () => this.fields.serialize(writer));
            if (this.executionMethod.length)
                writer.writeString(6, this.executionMethod);
            if (this.executionOptions.length)
                writer.writeRepeatedMessage(7, this.executionOptions, (item: dependency_2.Metadata) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAssistantToolRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAssistantToolRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.description = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.fields, () => message.fields = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 6:
                        message.executionMethod = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.executionOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAssistantToolRequest {
            return UpdateAssistantToolRequest.deserialize(bytes);
        }
    }
    export class GetAssistantToolRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            assistantId?: string;
        }): GetAssistantToolRequest {
            const message = new GetAssistantToolRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantToolRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantToolRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantToolRequest {
            return GetAssistantToolRequest.deserialize(bytes);
        }
    }
    export class DeleteAssistantToolRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            assistantId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            assistantId?: string;
        }): DeleteAssistantToolRequest {
            const message = new DeleteAssistantToolRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                assistantId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.assistantId != "0")
                writer.writeUint64String(2, this.assistantId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAssistantToolRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAssistantToolRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.assistantId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAssistantToolRequest {
            return DeleteAssistantToolRequest.deserialize(bytes);
        }
    }
    export class GetAssistantToolResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantTool;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, AssistantTool, 3) as AssistantTool;
        }
        set data(value: AssistantTool) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantTool.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetAssistantToolResponse {
            const message = new GetAssistantToolResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = AssistantTool.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantTool.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantToolResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantToolResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = AssistantTool.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantToolResponse {
            return GetAssistantToolResponse.deserialize(bytes);
        }
    }
    export class GetAllAssistantToolRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assistantId?: string;
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 2) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 3) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            assistantId?: string;
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
        }): GetAllAssistantToolRequest {
            const message = new GetAllAssistantToolRequest({});
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                assistantId?: string;
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            } = {};
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assistantId != "0")
                writer.writeUint64String(1, this.assistantId);
            if (this.has_paginate)
                writer.writeMessage(2, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(3, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantToolRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantToolRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantToolRequest {
            return GetAllAssistantToolRequest.deserialize(bytes);
        }
    }
    export class GetAllAssistantToolResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantTool[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, AssistantTool, 3) as AssistantTool[];
        }
        set data(value: AssistantTool[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantTool.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllAssistantToolResponse {
            const message = new GetAllAssistantToolResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => AssistantTool.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantTool.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: AssistantTool) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: AssistantTool) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantToolResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantToolResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AssistantTool.deserialize(reader), AssistantTool));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantToolResponse {
            return GetAllAssistantToolResponse.deserialize(bytes);
        }
    }
    export class GetAllAssistantToolLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projectId?: string;
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
            order?: dependency_2.Ordering;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
            }
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 3) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 4) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get order() {
            return pb_1.Message.getWrapperField(this, dependency_2.Ordering, 5) as dependency_2.Ordering;
        }
        set order(value: dependency_2.Ordering) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_order() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            projectId?: string;
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            order?: ReturnType<typeof dependency_2.Ordering.prototype.toObject>;
        }): GetAllAssistantToolLogRequest {
            const message = new GetAllAssistantToolLogRequest({});
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            if (data.order != null) {
                message.order = dependency_2.Ordering.fromObject(data.order);
            }
            return message;
        }
        toObject() {
            const data: {
                projectId?: string;
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
                order?: ReturnType<typeof dependency_2.Ordering.prototype.toObject>;
            } = {};
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            if (this.order != null) {
                data.order = this.order.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectId != "0")
                writer.writeUint64String(2, this.projectId);
            if (this.has_paginate)
                writer.writeMessage(3, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(4, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (this.has_order)
                writer.writeMessage(5, this.order, () => this.order.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantToolLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantToolLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.projectId = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    case 5:
                        reader.readMessage(message.order, () => message.order = dependency_2.Ordering.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantToolLogRequest {
            return GetAllAssistantToolLogRequest.deserialize(bytes);
        }
    }
    export class GetAssistantToolLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projectId?: string;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            projectId?: string;
            id?: string;
        }): GetAssistantToolLogRequest {
            const message = new GetAssistantToolLogRequest({});
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                projectId?: string;
                id?: string;
            } = {};
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectId != "0")
                writer.writeUint64String(2, this.projectId);
            if (this.id != "0")
                writer.writeUint64String(3, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantToolLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantToolLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.projectId = reader.readUint64String();
                        break;
                    case 3:
                        message.id = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantToolLogRequest {
            return GetAssistantToolLogRequest.deserialize(bytes);
        }
    }
    export class GetAssistantToolLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantToolLog;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, AssistantToolLog, 3) as AssistantToolLog;
        }
        set data(value: AssistantToolLog) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantToolLog.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetAssistantToolLogResponse {
            const message = new GetAssistantToolLogResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = AssistantToolLog.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantToolLog.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAssistantToolLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAssistantToolLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = AssistantToolLog.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAssistantToolLogResponse {
            return GetAssistantToolLogResponse.deserialize(bytes);
        }
    }
    export class GetAllAssistantToolLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: AssistantToolLog[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, AssistantToolLog, 3) as AssistantToolLog[];
        }
        set data(value: AssistantToolLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof AssistantToolLog.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllAssistantToolLogResponse {
            const message = new GetAllAssistantToolLogResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => AssistantToolLog.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof AssistantToolLog.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: AssistantToolLog) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: AssistantToolLog) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllAssistantToolLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllAssistantToolLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AssistantToolLog.deserialize(reader), AssistantToolLog));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllAssistantToolLogResponse {
            return GetAllAssistantToolLogResponse.deserialize(bytes);
        }
    }
    export class AssistantToolLog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            action?: dependency_3.google.protobuf.Struct;
            request?: dependency_3.google.protobuf.Struct;
            response?: dependency_3.google.protobuf.Struct;
            status?: string;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
            assistantId?: string;
            projectId?: string;
            organizationId?: string;
            assistantConversationId?: string;
            assistantConversationMessageId?: string;
            assetPrefix?: string;
            executionMethod?: string;
            timeTaken?: string;
            assistantToolId?: string;
            assistantToolName?: string;
            assistantTool?: AssistantTool;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("assistantId" in data && data.assistantId != undefined) {
                    this.assistantId = data.assistantId;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
                if ("assistantConversationId" in data && data.assistantConversationId != undefined) {
                    this.assistantConversationId = data.assistantConversationId;
                }
                if ("assistantConversationMessageId" in data && data.assistantConversationMessageId != undefined) {
                    this.assistantConversationMessageId = data.assistantConversationMessageId;
                }
                if ("assetPrefix" in data && data.assetPrefix != undefined) {
                    this.assetPrefix = data.assetPrefix;
                }
                if ("executionMethod" in data && data.executionMethod != undefined) {
                    this.executionMethod = data.executionMethod;
                }
                if ("timeTaken" in data && data.timeTaken != undefined) {
                    this.timeTaken = data.timeTaken;
                }
                if ("assistantToolId" in data && data.assistantToolId != undefined) {
                    this.assistantToolId = data.assistantToolId;
                }
                if ("assistantToolName" in data && data.assistantToolName != undefined) {
                    this.assistantToolName = data.assistantToolName;
                }
                if ("assistantTool" in data && data.assistantTool != undefined) {
                    this.assistantTool = data.assistantTool;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get action() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 2) as dependency_3.google.protobuf.Struct;
        }
        set action(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_action() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get request() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 3) as dependency_3.google.protobuf.Struct;
        }
        set request(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get response() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 4) as dependency_3.google.protobuf.Struct;
        }
        set response(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get assistantId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
        }
        set assistantId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get assistantConversationId() {
            return pb_1.Message.getFieldWithDefault(this, 11, "0") as string;
        }
        set assistantConversationId(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get assistantConversationMessageId() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set assistantConversationMessageId(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get assetPrefix() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set assetPrefix(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get executionMethod() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set executionMethod(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get timeTaken() {
            return pb_1.Message.getFieldWithDefault(this, 16, "0") as string;
        }
        set timeTaken(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get assistantToolId() {
            return pb_1.Message.getFieldWithDefault(this, 13, "0") as string;
        }
        set assistantToolId(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get assistantToolName() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set assistantToolName(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get assistantTool() {
            return pb_1.Message.getWrapperField(this, AssistantTool, 18) as AssistantTool;
        }
        set assistantTool(value: AssistantTool) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get has_assistantTool() {
            return pb_1.Message.getField(this, 18) != null;
        }
        static fromObject(data: {
            id?: string;
            action?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            request?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            response?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            status?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            assistantId?: string;
            projectId?: string;
            organizationId?: string;
            assistantConversationId?: string;
            assistantConversationMessageId?: string;
            assetPrefix?: string;
            executionMethod?: string;
            timeTaken?: string;
            assistantToolId?: string;
            assistantToolName?: string;
            assistantTool?: ReturnType<typeof AssistantTool.prototype.toObject>;
        }): AssistantToolLog {
            const message = new AssistantToolLog({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.action != null) {
                message.action = dependency_3.google.protobuf.Struct.fromObject(data.action);
            }
            if (data.request != null) {
                message.request = dependency_3.google.protobuf.Struct.fromObject(data.request);
            }
            if (data.response != null) {
                message.response = dependency_3.google.protobuf.Struct.fromObject(data.response);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.assistantId != null) {
                message.assistantId = data.assistantId;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            if (data.assistantConversationId != null) {
                message.assistantConversationId = data.assistantConversationId;
            }
            if (data.assistantConversationMessageId != null) {
                message.assistantConversationMessageId = data.assistantConversationMessageId;
            }
            if (data.assetPrefix != null) {
                message.assetPrefix = data.assetPrefix;
            }
            if (data.executionMethod != null) {
                message.executionMethod = data.executionMethod;
            }
            if (data.timeTaken != null) {
                message.timeTaken = data.timeTaken;
            }
            if (data.assistantToolId != null) {
                message.assistantToolId = data.assistantToolId;
            }
            if (data.assistantToolName != null) {
                message.assistantToolName = data.assistantToolName;
            }
            if (data.assistantTool != null) {
                message.assistantTool = AssistantTool.fromObject(data.assistantTool);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                action?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                request?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                response?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                status?: string;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                assistantId?: string;
                projectId?: string;
                organizationId?: string;
                assistantConversationId?: string;
                assistantConversationMessageId?: string;
                assetPrefix?: string;
                executionMethod?: string;
                timeTaken?: string;
                assistantToolId?: string;
                assistantToolName?: string;
                assistantTool?: ReturnType<typeof AssistantTool.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.action != null) {
                data.action = this.action.toObject();
            }
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.assistantId != null) {
                data.assistantId = this.assistantId;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            if (this.assistantConversationId != null) {
                data.assistantConversationId = this.assistantConversationId;
            }
            if (this.assistantConversationMessageId != null) {
                data.assistantConversationMessageId = this.assistantConversationMessageId;
            }
            if (this.assetPrefix != null) {
                data.assetPrefix = this.assetPrefix;
            }
            if (this.executionMethod != null) {
                data.executionMethod = this.executionMethod;
            }
            if (this.timeTaken != null) {
                data.timeTaken = this.timeTaken;
            }
            if (this.assistantToolId != null) {
                data.assistantToolId = this.assistantToolId;
            }
            if (this.assistantToolName != null) {
                data.assistantToolName = this.assistantToolName;
            }
            if (this.assistantTool != null) {
                data.assistantTool = this.assistantTool.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.has_action)
                writer.writeMessage(2, this.action, () => this.action.serialize(writer));
            if (this.has_request)
                writer.writeMessage(3, this.request, () => this.request.serialize(writer));
            if (this.has_response)
                writer.writeMessage(4, this.response, () => this.response.serialize(writer));
            if (this.status.length)
                writer.writeString(5, this.status);
            if (this.has_createdDate)
                writer.writeMessage(6, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(7, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.assistantId != "0")
                writer.writeUint64String(8, this.assistantId);
            if (this.projectId != "0")
                writer.writeUint64String(9, this.projectId);
            if (this.organizationId != "0")
                writer.writeUint64String(10, this.organizationId);
            if (this.assistantConversationId != "0")
                writer.writeUint64String(11, this.assistantConversationId);
            if (this.assistantConversationMessageId.length)
                writer.writeString(12, this.assistantConversationMessageId);
            if (this.assetPrefix.length)
                writer.writeString(14, this.assetPrefix);
            if (this.executionMethod.length)
                writer.writeString(15, this.executionMethod);
            if (this.timeTaken != "0")
                writer.writeUint64String(16, this.timeTaken);
            if (this.assistantToolId != "0")
                writer.writeUint64String(13, this.assistantToolId);
            if (this.assistantToolName.length)
                writer.writeString(17, this.assistantToolName);
            if (this.has_assistantTool)
                writer.writeMessage(18, this.assistantTool, () => this.assistantTool.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssistantToolLog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssistantToolLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.action, () => message.action = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.request, () => message.request = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.response, () => message.response = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 5:
                        message.status = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        message.assistantId = reader.readUint64String();
                        break;
                    case 9:
                        message.projectId = reader.readUint64String();
                        break;
                    case 10:
                        message.organizationId = reader.readUint64String();
                        break;
                    case 11:
                        message.assistantConversationId = reader.readUint64String();
                        break;
                    case 12:
                        message.assistantConversationMessageId = reader.readString();
                        break;
                    case 14:
                        message.assetPrefix = reader.readString();
                        break;
                    case 15:
                        message.executionMethod = reader.readString();
                        break;
                    case 16:
                        message.timeTaken = reader.readUint64String();
                        break;
                    case 13:
                        message.assistantToolId = reader.readUint64String();
                        break;
                    case 17:
                        message.assistantToolName = reader.readString();
                        break;
                    case 18:
                        reader.readMessage(message.assistantTool, () => message.assistantTool = AssistantTool.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssistantToolLog {
            return AssistantToolLog.deserialize(bytes);
        }
    }
}
