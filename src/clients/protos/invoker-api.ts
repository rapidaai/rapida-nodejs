/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: invoker-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/struct";
import * as dependency_2 from "./google/protobuf/any";
import * as dependency_3 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace endpoint_api {
    export class EndpointDefinition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointId?: string;
            version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointId" in data && data.endpointId != undefined) {
                    this.endpointId = data.endpointId;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get endpointId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set endpointId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            endpointId?: string;
            version?: string;
        }): EndpointDefinition {
            const message = new EndpointDefinition({});
            if (data.endpointId != null) {
                message.endpointId = data.endpointId;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            return message;
        }
        toObject() {
            const data: {
                endpointId?: string;
                version?: string;
            } = {};
            if (this.endpointId != null) {
                data.endpointId = this.endpointId;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpointId != "0")
                writer.writeUint64String(1, this.endpointId);
            if (this.version.length)
                writer.writeString(2, this.version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndpointDefinition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndpointDefinition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpointId = reader.readUint64String();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndpointDefinition {
            return EndpointDefinition.deserialize(bytes);
        }
    }
    export class InvokeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpoint?: EndpointDefinition;
            args?: Map<string, dependency_2.google.protobuf.Any>;
            metadata?: Map<string, dependency_2.google.protobuf.Any>;
            options?: Map<string, dependency_2.google.protobuf.Any>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("args" in data && data.args != undefined) {
                    this.args = data.args;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
            }
            if (!this.args)
                this.args = new Map();
            if (!this.metadata)
                this.metadata = new Map();
            if (!this.options)
                this.options = new Map();
        }
        get endpoint() {
            return pb_1.Message.getWrapperField(this, EndpointDefinition, 1) as EndpointDefinition;
        }
        set endpoint(value: EndpointDefinition) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_endpoint() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get args() {
            return pb_1.Message.getField(this, 5) as any as Map<string, dependency_2.google.protobuf.Any>;
        }
        set args(value: Map<string, dependency_2.google.protobuf.Any>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get metadata() {
            return pb_1.Message.getField(this, 6) as any as Map<string, dependency_2.google.protobuf.Any>;
        }
        set metadata(value: Map<string, dependency_2.google.protobuf.Any>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get options() {
            return pb_1.Message.getField(this, 7) as any as Map<string, dependency_2.google.protobuf.Any>;
        }
        set options(value: Map<string, dependency_2.google.protobuf.Any>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        static fromObject(data: {
            endpoint?: ReturnType<typeof EndpointDefinition.prototype.toObject>;
            args?: {
                [key: string]: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
            };
            metadata?: {
                [key: string]: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
            };
            options?: {
                [key: string]: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
            };
        }): InvokeRequest {
            const message = new InvokeRequest({});
            if (data.endpoint != null) {
                message.endpoint = EndpointDefinition.fromObject(data.endpoint);
            }
            if (typeof data.args == "object") {
                message.args = new Map(Object.entries(data.args).map(([key, value]) => [key, dependency_2.google.protobuf.Any.fromObject(value)]));
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata).map(([key, value]) => [key, dependency_2.google.protobuf.Any.fromObject(value)]));
            }
            if (typeof data.options == "object") {
                message.options = new Map(Object.entries(data.options).map(([key, value]) => [key, dependency_2.google.protobuf.Any.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                endpoint?: ReturnType<typeof EndpointDefinition.prototype.toObject>;
                args?: {
                    [key: string]: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
                };
                metadata?: {
                    [key: string]: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
                };
                options?: {
                    [key: string]: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
                };
            } = {};
            if (this.endpoint != null) {
                data.endpoint = this.endpoint.toObject();
            }
            if (this.args != null) {
                data.args = (Object.fromEntries)((Array.from)(this.args).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)((Array.from)(this.metadata).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.options != null) {
                data.options = (Object.fromEntries)((Array.from)(this.options).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_endpoint)
                writer.writeMessage(1, this.endpoint, () => this.endpoint.serialize(writer));
            for (const [key, value] of this.args) {
                writer.writeMessage(5, this.args, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.metadata) {
                writer.writeMessage(6, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.options) {
                writer.writeMessage(7, this.options, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.endpoint, () => message.endpoint = EndpointDefinition.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.args as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_2.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_2.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.options as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_2.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvokeRequest {
            return InvokeRequest.deserialize(bytes);
        }
    }
    export class InvokeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
            data?: dependency_3.Content[];
            requestId?: number;
            timeTaken?: number;
            metrics?: dependency_3.Metric[];
            meta?: dependency_1.google.protobuf.Struct;
        } & (({
            error?: dependency_3.Error;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("timeTaken" in data && data.timeTaken != undefined) {
                    this.timeTaken = data.timeTaken;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
                if ("meta" in data && data.meta != undefined) {
                    this.meta = data.meta;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Content, 3) as dependency_3.Content[];
        }
        set data(value: dependency_3.Content[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set requestId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get timeTaken() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set timeTaken(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get metrics() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Metric, 7) as dependency_3.Metric[];
        }
        set metrics(value: dependency_3.Metric[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get meta() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 8) as dependency_1.google.protobuf.Struct;
        }
        set meta(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_meta() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                4: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_3.Content.prototype.toObject>[];
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            requestId?: number;
            timeTaken?: number;
            metrics?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
            meta?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): InvokeResponse {
            const message = new InvokeResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => dependency_3.Content.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.timeTaken != null) {
                message.timeTaken = data.timeTaken;
            }
            if (data.metrics != null) {
                message.metrics = data.metrics.map(item => dependency_3.Metric.fromObject(item));
            }
            if (data.meta != null) {
                message.meta = dependency_1.google.protobuf.Struct.fromObject(data.meta);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_3.Content.prototype.toObject>[];
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
                requestId?: number;
                timeTaken?: number;
                metrics?: ReturnType<typeof dependency_3.Metric.prototype.toObject>[];
                meta?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: dependency_3.Content) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.timeTaken != null) {
                data.timeTaken = this.timeTaken;
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.map((item: dependency_3.Metric) => item.toObject());
            }
            if (this.meta != null) {
                data.meta = this.meta.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: dependency_3.Content) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.requestId != 0)
                writer.writeUint64(5, this.requestId);
            if (this.timeTaken != 0)
                writer.writeUint64(6, this.timeTaken);
            if (this.metrics.length)
                writer.writeRepeatedMessage(7, this.metrics, (item: dependency_3.Metric) => item.serialize(writer));
            if (this.has_meta)
                writer.writeMessage(8, this.meta, () => this.meta.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.Content.deserialize(reader), dependency_3.Content));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    case 5:
                        message.requestId = reader.readUint64();
                        break;
                    case 6:
                        message.timeTaken = reader.readUint64();
                        break;
                    case 7:
                        reader.readMessage(message.metrics, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_3.Metric.deserialize(reader), dependency_3.Metric));
                        break;
                    case 8:
                        reader.readMessage(message.meta, () => message.meta = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvokeResponse {
            return InvokeResponse.deserialize(bytes);
        }
    }
    export class UpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requestId?: string;
            metadata?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set requestId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 2) as dependency_1.google.protobuf.Struct;
        }
        set metadata(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            requestId?: string;
            metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): UpdateRequest {
            const message = new UpdateRequest({});
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.metadata != null) {
                message.metadata = dependency_1.google.protobuf.Struct.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                requestId?: string;
                metadata?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requestId != "0")
                writer.writeUint64String(1, this.requestId);
            if (this.has_metadata)
                writer.writeMessage(2, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requestId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRequest {
            return UpdateRequest.deserialize(bytes);
        }
    }
    export class UpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
        } & (({
            error?: dependency_3.Error;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 3) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                3: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
        }): UpdateResponse {
            const message = new UpdateResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_error)
                writer.writeMessage(3, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateResponse {
            return UpdateResponse.deserialize(bytes);
        }
    }
    export class ProbeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requestId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
            }
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set requestId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            requestId?: string;
        }): ProbeRequest {
            const message = new ProbeRequest({});
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            return message;
        }
        toObject() {
            const data: {
                requestId?: string;
            } = {};
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requestId != "0")
                writer.writeUint64String(1, this.requestId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProbeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProbeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requestId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProbeRequest {
            return ProbeRequest.deserialize(bytes);
        }
    }
    export class ProbeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            code?: number;
            success?: boolean;
            data?: dependency_1.google.protobuf.Struct;
        } & (({
            error?: dependency_3.Error;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 3) as dependency_1.google.protobuf.Struct;
        }
        set data(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_3.Error, 4) as dependency_3.Error;
        }
        set error(value: dependency_3.Error) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _error() {
            const cases: {
                [index: number]: "none" | "error";
            } = {
                0: "none",
                4: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
        }): ProbeResponse {
            const message = new ProbeResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = dependency_1.google.protobuf.Struct.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_3.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
                error?: ReturnType<typeof dependency_3.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProbeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProbeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_3.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProbeResponse {
            return ProbeResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDeploymentService {
        static definition = {
            Invoke: {
                path: "/endpoint_api.Deployment/Invoke",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InvokeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InvokeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InvokeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InvokeResponse.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/endpoint_api.Deployment/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateResponse.deserialize(new Uint8Array(bytes))
            },
            Probe: {
                path: "/endpoint_api.Deployment/Probe",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ProbeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ProbeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProbeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProbeResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Invoke(call: grpc_1.ServerUnaryCall<InvokeRequest, InvokeResponse>, callback: grpc_1.sendUnaryData<InvokeResponse>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<UpdateRequest, UpdateResponse>, callback: grpc_1.sendUnaryData<UpdateResponse>): void;
        abstract Probe(call: grpc_1.ServerUnaryCall<ProbeRequest, ProbeResponse>, callback: grpc_1.sendUnaryData<ProbeResponse>): void;
    }
    export class DeploymentClient extends grpc_1.makeGenericClientConstructor(UnimplementedDeploymentService.definition, "Deployment", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Invoke: GrpcUnaryServiceInterface<InvokeRequest, InvokeResponse> = (message: InvokeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InvokeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InvokeResponse>, callback?: grpc_1.requestCallback<InvokeResponse>): grpc_1.ClientUnaryCall => {
            return super.Invoke(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<UpdateRequest, UpdateResponse> = (message: UpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateResponse>, callback?: grpc_1.requestCallback<UpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        Probe: GrpcUnaryServiceInterface<ProbeRequest, ProbeResponse> = (message: ProbeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProbeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProbeResponse>, callback?: grpc_1.requestCallback<ProbeResponse>): grpc_1.ClientUnaryCall => {
            return super.Probe(message, metadata, options, callback);
        };
    }
}
