/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: knowledge-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./common";
import * as dependency_3 from "./google/protobuf/struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace knowledge_api {
    export class CreateKnowledgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            tags?: string[];
            visibility?: string;
            embeddingModelProviderId?: string;
            embeddingModelProviderName?: string;
            knowledgeEmbeddingModelOptions?: dependency_2.Metadata[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("visibility" in data && data.visibility != undefined) {
                    this.visibility = data.visibility;
                }
                if ("embeddingModelProviderId" in data && data.embeddingModelProviderId != undefined) {
                    this.embeddingModelProviderId = data.embeddingModelProviderId;
                }
                if ("embeddingModelProviderName" in data && data.embeddingModelProviderName != undefined) {
                    this.embeddingModelProviderName = data.embeddingModelProviderName;
                }
                if ("knowledgeEmbeddingModelOptions" in data && data.knowledgeEmbeddingModelOptions != undefined) {
                    this.knowledgeEmbeddingModelOptions = data.knowledgeEmbeddingModelOptions;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get visibility() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set visibility(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get embeddingModelProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
        }
        set embeddingModelProviderId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get embeddingModelProviderName() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set embeddingModelProviderName(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get knowledgeEmbeddingModelOptions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Metadata, 8) as dependency_2.Metadata[];
        }
        set knowledgeEmbeddingModelOptions(value: dependency_2.Metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            tags?: string[];
            visibility?: string;
            embeddingModelProviderId?: string;
            embeddingModelProviderName?: string;
            knowledgeEmbeddingModelOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
        }): CreateKnowledgeRequest {
            const message = new CreateKnowledgeRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.visibility != null) {
                message.visibility = data.visibility;
            }
            if (data.embeddingModelProviderId != null) {
                message.embeddingModelProviderId = data.embeddingModelProviderId;
            }
            if (data.embeddingModelProviderName != null) {
                message.embeddingModelProviderName = data.embeddingModelProviderName;
            }
            if (data.knowledgeEmbeddingModelOptions != null) {
                message.knowledgeEmbeddingModelOptions = data.knowledgeEmbeddingModelOptions.map(item => dependency_2.Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                tags?: string[];
                visibility?: string;
                embeddingModelProviderId?: string;
                embeddingModelProviderName?: string;
                knowledgeEmbeddingModelOptions?: ReturnType<typeof dependency_2.Metadata.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.visibility != null) {
                data.visibility = this.visibility;
            }
            if (this.embeddingModelProviderId != null) {
                data.embeddingModelProviderId = this.embeddingModelProviderId;
            }
            if (this.embeddingModelProviderName != null) {
                data.embeddingModelProviderName = this.embeddingModelProviderName;
            }
            if (this.knowledgeEmbeddingModelOptions != null) {
                data.knowledgeEmbeddingModelOptions = this.knowledgeEmbeddingModelOptions.map((item: dependency_2.Metadata) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.tags.length)
                writer.writeRepeatedString(4, this.tags);
            if (this.visibility.length)
                writer.writeString(5, this.visibility);
            if (this.embeddingModelProviderId != "0")
                writer.writeUint64String(6, this.embeddingModelProviderId);
            if (this.embeddingModelProviderName.length)
                writer.writeString(7, this.embeddingModelProviderName);
            if (this.knowledgeEmbeddingModelOptions.length)
                writer.writeRepeatedMessage(8, this.knowledgeEmbeddingModelOptions, (item: dependency_2.Metadata) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateKnowledgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateKnowledgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.visibility = reader.readString();
                        break;
                    case 6:
                        message.embeddingModelProviderId = reader.readUint64String();
                        break;
                    case 7:
                        message.embeddingModelProviderName = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.knowledgeEmbeddingModelOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_2.Metadata.deserialize(reader), dependency_2.Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateKnowledgeRequest {
            return CreateKnowledgeRequest.deserialize(bytes);
        }
    }
    export class CreateKnowledgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_2.Knowledge;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_2.Knowledge, 3) as dependency_2.Knowledge;
        }
        set data(value: dependency_2.Knowledge) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_2.Knowledge.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): CreateKnowledgeResponse {
            const message = new CreateKnowledgeResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = dependency_2.Knowledge.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_2.Knowledge.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateKnowledgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateKnowledgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = dependency_2.Knowledge.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateKnowledgeResponse {
            return CreateKnowledgeResponse.deserialize(bytes);
        }
    }
    export class GetAllKnowledgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 1) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 2) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
        }): GetAllKnowledgeRequest {
            const message = new GetAllKnowledgeRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllKnowledgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllKnowledgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllKnowledgeRequest {
            return GetAllKnowledgeRequest.deserialize(bytes);
        }
    }
    export class GetAllKnowledgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_2.Knowledge[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Knowledge, 3) as dependency_2.Knowledge[];
        }
        set data(value: dependency_2.Knowledge[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_2.Knowledge.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllKnowledgeResponse {
            const message = new GetAllKnowledgeResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => dependency_2.Knowledge.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_2.Knowledge.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: dependency_2.Knowledge) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: dependency_2.Knowledge) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllKnowledgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllKnowledgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.Knowledge.deserialize(reader), dependency_2.Knowledge));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllKnowledgeResponse {
            return GetAllKnowledgeResponse.deserialize(bytes);
        }
    }
    export class GetKnowledgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): GetKnowledgeRequest {
            const message = new GetKnowledgeRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKnowledgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKnowledgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKnowledgeRequest {
            return GetKnowledgeRequest.deserialize(bytes);
        }
    }
    export class GetKnowledgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_2.Knowledge;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, dependency_2.Knowledge, 3) as dependency_2.Knowledge;
        }
        set data(value: dependency_2.Knowledge) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_2.Knowledge.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetKnowledgeResponse {
            const message = new GetKnowledgeResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = dependency_2.Knowledge.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_2.Knowledge.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKnowledgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKnowledgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = dependency_2.Knowledge.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKnowledgeResponse {
            return GetKnowledgeResponse.deserialize(bytes);
        }
    }
    export class CreateKnowledgeTagRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            knowledgeId?: string;
            tags?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            knowledgeId?: string;
            tags?: string[];
        }): CreateKnowledgeTagRequest {
            const message = new CreateKnowledgeTagRequest({});
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            return message;
        }
        toObject() {
            const data: {
                knowledgeId?: string;
                tags?: string[];
            } = {};
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.knowledgeId != "0")
                writer.writeUint64String(1, this.knowledgeId);
            if (this.tags.length)
                writer.writeRepeatedString(2, this.tags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateKnowledgeTagRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateKnowledgeTagRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateKnowledgeTagRequest {
            return CreateKnowledgeTagRequest.deserialize(bytes);
        }
    }
    export class KnowledgeDocument extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            knowledgeId?: string;
            language?: string;
            name?: string;
            description?: string;
            documentSource?: dependency_3.google.protobuf.Struct;
            documentType?: string;
            documentSize?: number;
            documentPath?: string;
            indexStatus?: string;
            retrievalCount?: number;
            tokenCount?: number;
            wordCount?: number;
            DisplayStatus?: string;
            status?: string;
            createdBy?: string;
            createdUser?: dependency_2.User;
            updatedBy?: string;
            updatedUser?: dependency_2.User;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("documentSource" in data && data.documentSource != undefined) {
                    this.documentSource = data.documentSource;
                }
                if ("documentType" in data && data.documentType != undefined) {
                    this.documentType = data.documentType;
                }
                if ("documentSize" in data && data.documentSize != undefined) {
                    this.documentSize = data.documentSize;
                }
                if ("documentPath" in data && data.documentPath != undefined) {
                    this.documentPath = data.documentPath;
                }
                if ("indexStatus" in data && data.indexStatus != undefined) {
                    this.indexStatus = data.indexStatus;
                }
                if ("retrievalCount" in data && data.retrievalCount != undefined) {
                    this.retrievalCount = data.retrievalCount;
                }
                if ("tokenCount" in data && data.tokenCount != undefined) {
                    this.tokenCount = data.tokenCount;
                }
                if ("wordCount" in data && data.wordCount != undefined) {
                    this.wordCount = data.wordCount;
                }
                if ("DisplayStatus" in data && data.DisplayStatus != undefined) {
                    this.DisplayStatus = data.DisplayStatus;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdBy" in data && data.createdBy != undefined) {
                    this.createdBy = data.createdBy;
                }
                if ("createdUser" in data && data.createdUser != undefined) {
                    this.createdUser = data.createdUser;
                }
                if ("updatedBy" in data && data.updatedBy != undefined) {
                    this.updatedBy = data.updatedBy;
                }
                if ("updatedUser" in data && data.updatedUser != undefined) {
                    this.updatedUser = data.updatedUser;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get language() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set language(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get documentSource() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 6) as dependency_3.google.protobuf.Struct;
        }
        set documentSource(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_documentSource() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get documentType() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set documentType(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get documentSize() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set documentSize(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get documentPath() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set documentPath(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get indexStatus() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set indexStatus(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get retrievalCount() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set retrievalCount(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get tokenCount() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set tokenCount(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get wordCount() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set wordCount(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get DisplayStatus() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set DisplayStatus(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get createdBy() {
            return pb_1.Message.getFieldWithDefault(this, 22, "0") as string;
        }
        set createdBy(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get createdUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 23) as dependency_2.User;
        }
        set createdUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get has_createdUser() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get updatedBy() {
            return pb_1.Message.getFieldWithDefault(this, 24, "0") as string;
        }
        set updatedBy(value: string) {
            pb_1.Message.setField(this, 24, value);
        }
        get updatedUser() {
            return pb_1.Message.getWrapperField(this, dependency_2.User, 25) as dependency_2.User;
        }
        set updatedUser(value: dependency_2.User) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get has_updatedUser() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 26) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 26, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 27) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 27, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 27) != null;
        }
        static fromObject(data: {
            id?: string;
            knowledgeId?: string;
            language?: string;
            name?: string;
            description?: string;
            documentSource?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            documentType?: string;
            documentSize?: number;
            documentPath?: string;
            indexStatus?: string;
            retrievalCount?: number;
            tokenCount?: number;
            wordCount?: number;
            DisplayStatus?: string;
            status?: string;
            createdBy?: string;
            createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            updatedBy?: string;
            updatedUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): KnowledgeDocument {
            const message = new KnowledgeDocument({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.language != null) {
                message.language = data.language;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.documentSource != null) {
                message.documentSource = dependency_3.google.protobuf.Struct.fromObject(data.documentSource);
            }
            if (data.documentType != null) {
                message.documentType = data.documentType;
            }
            if (data.documentSize != null) {
                message.documentSize = data.documentSize;
            }
            if (data.documentPath != null) {
                message.documentPath = data.documentPath;
            }
            if (data.indexStatus != null) {
                message.indexStatus = data.indexStatus;
            }
            if (data.retrievalCount != null) {
                message.retrievalCount = data.retrievalCount;
            }
            if (data.tokenCount != null) {
                message.tokenCount = data.tokenCount;
            }
            if (data.wordCount != null) {
                message.wordCount = data.wordCount;
            }
            if (data.DisplayStatus != null) {
                message.DisplayStatus = data.DisplayStatus;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdBy != null) {
                message.createdBy = data.createdBy;
            }
            if (data.createdUser != null) {
                message.createdUser = dependency_2.User.fromObject(data.createdUser);
            }
            if (data.updatedBy != null) {
                message.updatedBy = data.updatedBy;
            }
            if (data.updatedUser != null) {
                message.updatedUser = dependency_2.User.fromObject(data.updatedUser);
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                knowledgeId?: string;
                language?: string;
                name?: string;
                description?: string;
                documentSource?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                documentType?: string;
                documentSize?: number;
                documentPath?: string;
                indexStatus?: string;
                retrievalCount?: number;
                tokenCount?: number;
                wordCount?: number;
                DisplayStatus?: string;
                status?: string;
                createdBy?: string;
                createdUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
                updatedBy?: string;
                updatedUser?: ReturnType<typeof dependency_2.User.prototype.toObject>;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.language != null) {
                data.language = this.language;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.documentSource != null) {
                data.documentSource = this.documentSource.toObject();
            }
            if (this.documentType != null) {
                data.documentType = this.documentType;
            }
            if (this.documentSize != null) {
                data.documentSize = this.documentSize;
            }
            if (this.documentPath != null) {
                data.documentPath = this.documentPath;
            }
            if (this.indexStatus != null) {
                data.indexStatus = this.indexStatus;
            }
            if (this.retrievalCount != null) {
                data.retrievalCount = this.retrievalCount;
            }
            if (this.tokenCount != null) {
                data.tokenCount = this.tokenCount;
            }
            if (this.wordCount != null) {
                data.wordCount = this.wordCount;
            }
            if (this.DisplayStatus != null) {
                data.DisplayStatus = this.DisplayStatus;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdBy != null) {
                data.createdBy = this.createdBy;
            }
            if (this.createdUser != null) {
                data.createdUser = this.createdUser.toObject();
            }
            if (this.updatedBy != null) {
                data.updatedBy = this.updatedBy;
            }
            if (this.updatedUser != null) {
                data.updatedUser = this.updatedUser.toObject();
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.knowledgeId != "0")
                writer.writeUint64String(2, this.knowledgeId);
            if (this.language.length)
                writer.writeString(3, this.language);
            if (this.name.length)
                writer.writeString(4, this.name);
            if (this.description.length)
                writer.writeString(5, this.description);
            if (this.has_documentSource)
                writer.writeMessage(6, this.documentSource, () => this.documentSource.serialize(writer));
            if (this.documentType.length)
                writer.writeString(7, this.documentType);
            if (this.documentSize != 0)
                writer.writeUint64(8, this.documentSize);
            if (this.documentPath.length)
                writer.writeString(9, this.documentPath);
            if (this.indexStatus.length)
                writer.writeString(10, this.indexStatus);
            if (this.retrievalCount != 0)
                writer.writeUint64(12, this.retrievalCount);
            if (this.tokenCount != 0)
                writer.writeUint64(13, this.tokenCount);
            if (this.wordCount != 0)
                writer.writeUint64(14, this.wordCount);
            if (this.DisplayStatus.length)
                writer.writeString(19, this.DisplayStatus);
            if (this.status.length)
                writer.writeString(21, this.status);
            if (this.createdBy != "0")
                writer.writeUint64String(22, this.createdBy);
            if (this.has_createdUser)
                writer.writeMessage(23, this.createdUser, () => this.createdUser.serialize(writer));
            if (this.updatedBy != "0")
                writer.writeUint64String(24, this.updatedBy);
            if (this.has_updatedUser)
                writer.writeMessage(25, this.updatedUser, () => this.updatedUser.serialize(writer));
            if (this.has_createdDate)
                writer.writeMessage(26, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(27, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KnowledgeDocument {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KnowledgeDocument();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 3:
                        message.language = reader.readString();
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.description = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.documentSource, () => message.documentSource = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 7:
                        message.documentType = reader.readString();
                        break;
                    case 8:
                        message.documentSize = reader.readUint64();
                        break;
                    case 9:
                        message.documentPath = reader.readString();
                        break;
                    case 10:
                        message.indexStatus = reader.readString();
                        break;
                    case 12:
                        message.retrievalCount = reader.readUint64();
                        break;
                    case 13:
                        message.tokenCount = reader.readUint64();
                        break;
                    case 14:
                        message.wordCount = reader.readUint64();
                        break;
                    case 19:
                        message.DisplayStatus = reader.readString();
                        break;
                    case 21:
                        message.status = reader.readString();
                        break;
                    case 22:
                        message.createdBy = reader.readUint64String();
                        break;
                    case 23:
                        reader.readMessage(message.createdUser, () => message.createdUser = dependency_2.User.deserialize(reader));
                        break;
                    case 24:
                        message.updatedBy = reader.readUint64String();
                        break;
                    case 25:
                        reader.readMessage(message.updatedUser, () => message.updatedUser = dependency_2.User.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KnowledgeDocument {
            return KnowledgeDocument.deserialize(bytes);
        }
    }
    export class GetAllKnowledgeDocumentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            knowledgeId?: string;
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 2) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 3) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            knowledgeId?: string;
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
        }): GetAllKnowledgeDocumentRequest {
            const message = new GetAllKnowledgeDocumentRequest({});
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                knowledgeId?: string;
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            } = {};
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.knowledgeId != "0")
                writer.writeUint64String(1, this.knowledgeId);
            if (this.has_paginate)
                writer.writeMessage(2, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(3, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllKnowledgeDocumentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllKnowledgeDocumentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllKnowledgeDocumentRequest {
            return GetAllKnowledgeDocumentRequest.deserialize(bytes);
        }
    }
    export class GetAllKnowledgeDocumentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: KnowledgeDocument[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, KnowledgeDocument, 3) as KnowledgeDocument[];
        }
        set data(value: KnowledgeDocument[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof KnowledgeDocument.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllKnowledgeDocumentResponse {
            const message = new GetAllKnowledgeDocumentResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => KnowledgeDocument.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof KnowledgeDocument.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: KnowledgeDocument) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: KnowledgeDocument) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllKnowledgeDocumentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllKnowledgeDocumentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, KnowledgeDocument.deserialize(reader), KnowledgeDocument));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllKnowledgeDocumentResponse {
            return GetAllKnowledgeDocumentResponse.deserialize(bytes);
        }
    }
    export class CreateKnowledgeDocumentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            knowledgeId?: string;
            documentSource?: CreateKnowledgeDocumentRequest.DOCUMENT_SOURCE;
            dataSource?: string;
            contents?: dependency_2.Content[];
            preProcess?: CreateKnowledgeDocumentRequest.PRE_PROCESS;
            separator?: string;
            maxChunkSize?: number;
            chunkOverlap?: number;
            name?: string;
            description?: string;
            documentStructure?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("documentSource" in data && data.documentSource != undefined) {
                    this.documentSource = data.documentSource;
                }
                if ("dataSource" in data && data.dataSource != undefined) {
                    this.dataSource = data.dataSource;
                }
                if ("contents" in data && data.contents != undefined) {
                    this.contents = data.contents;
                }
                if ("preProcess" in data && data.preProcess != undefined) {
                    this.preProcess = data.preProcess;
                }
                if ("separator" in data && data.separator != undefined) {
                    this.separator = data.separator;
                }
                if ("maxChunkSize" in data && data.maxChunkSize != undefined) {
                    this.maxChunkSize = data.maxChunkSize;
                }
                if ("chunkOverlap" in data && data.chunkOverlap != undefined) {
                    this.chunkOverlap = data.chunkOverlap;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("documentStructure" in data && data.documentStructure != undefined) {
                    this.documentStructure = data.documentStructure;
                }
            }
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get documentSource() {
            return pb_1.Message.getFieldWithDefault(this, 2, CreateKnowledgeDocumentRequest.DOCUMENT_SOURCE.DOCUMENT_SOURCE_MANUAL) as CreateKnowledgeDocumentRequest.DOCUMENT_SOURCE;
        }
        set documentSource(value: CreateKnowledgeDocumentRequest.DOCUMENT_SOURCE) {
            pb_1.Message.setField(this, 2, value);
        }
        get dataSource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set dataSource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get contents() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Content, 5) as dependency_2.Content[];
        }
        set contents(value: dependency_2.Content[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get preProcess() {
            return pb_1.Message.getFieldWithDefault(this, 6, CreateKnowledgeDocumentRequest.PRE_PROCESS.AUTOMATIC) as CreateKnowledgeDocumentRequest.PRE_PROCESS;
        }
        set preProcess(value: CreateKnowledgeDocumentRequest.PRE_PROCESS) {
            pb_1.Message.setField(this, 6, value);
        }
        get separator() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set separator(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get maxChunkSize() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set maxChunkSize(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get chunkOverlap() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set chunkOverlap(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get documentStructure() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set documentStructure(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            knowledgeId?: string;
            documentSource?: CreateKnowledgeDocumentRequest.DOCUMENT_SOURCE;
            dataSource?: string;
            contents?: ReturnType<typeof dependency_2.Content.prototype.toObject>[];
            preProcess?: CreateKnowledgeDocumentRequest.PRE_PROCESS;
            separator?: string;
            maxChunkSize?: number;
            chunkOverlap?: number;
            name?: string;
            description?: string;
            documentStructure?: string;
        }): CreateKnowledgeDocumentRequest {
            const message = new CreateKnowledgeDocumentRequest({});
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.documentSource != null) {
                message.documentSource = data.documentSource;
            }
            if (data.dataSource != null) {
                message.dataSource = data.dataSource;
            }
            if (data.contents != null) {
                message.contents = data.contents.map(item => dependency_2.Content.fromObject(item));
            }
            if (data.preProcess != null) {
                message.preProcess = data.preProcess;
            }
            if (data.separator != null) {
                message.separator = data.separator;
            }
            if (data.maxChunkSize != null) {
                message.maxChunkSize = data.maxChunkSize;
            }
            if (data.chunkOverlap != null) {
                message.chunkOverlap = data.chunkOverlap;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.documentStructure != null) {
                message.documentStructure = data.documentStructure;
            }
            return message;
        }
        toObject() {
            const data: {
                knowledgeId?: string;
                documentSource?: CreateKnowledgeDocumentRequest.DOCUMENT_SOURCE;
                dataSource?: string;
                contents?: ReturnType<typeof dependency_2.Content.prototype.toObject>[];
                preProcess?: CreateKnowledgeDocumentRequest.PRE_PROCESS;
                separator?: string;
                maxChunkSize?: number;
                chunkOverlap?: number;
                name?: string;
                description?: string;
                documentStructure?: string;
            } = {};
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.documentSource != null) {
                data.documentSource = this.documentSource;
            }
            if (this.dataSource != null) {
                data.dataSource = this.dataSource;
            }
            if (this.contents != null) {
                data.contents = this.contents.map((item: dependency_2.Content) => item.toObject());
            }
            if (this.preProcess != null) {
                data.preProcess = this.preProcess;
            }
            if (this.separator != null) {
                data.separator = this.separator;
            }
            if (this.maxChunkSize != null) {
                data.maxChunkSize = this.maxChunkSize;
            }
            if (this.chunkOverlap != null) {
                data.chunkOverlap = this.chunkOverlap;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.documentStructure != null) {
                data.documentStructure = this.documentStructure;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.knowledgeId != "0")
                writer.writeUint64String(1, this.knowledgeId);
            if (this.documentSource != CreateKnowledgeDocumentRequest.DOCUMENT_SOURCE.DOCUMENT_SOURCE_MANUAL)
                writer.writeEnum(2, this.documentSource);
            if (this.dataSource.length)
                writer.writeString(3, this.dataSource);
            if (this.contents.length)
                writer.writeRepeatedMessage(5, this.contents, (item: dependency_2.Content) => item.serialize(writer));
            if (this.preProcess != CreateKnowledgeDocumentRequest.PRE_PROCESS.AUTOMATIC)
                writer.writeEnum(6, this.preProcess);
            if (this.separator.length)
                writer.writeString(7, this.separator);
            if (this.maxChunkSize != 0)
                writer.writeUint32(8, this.maxChunkSize);
            if (this.chunkOverlap != 0)
                writer.writeUint32(9, this.chunkOverlap);
            if (this.name.length)
                writer.writeString(10, this.name);
            if (this.description.length)
                writer.writeString(11, this.description);
            if (this.documentStructure.length)
                writer.writeString(12, this.documentStructure);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateKnowledgeDocumentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateKnowledgeDocumentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 2:
                        message.documentSource = reader.readEnum();
                        break;
                    case 3:
                        message.dataSource = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.contents, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.Content.deserialize(reader), dependency_2.Content));
                        break;
                    case 6:
                        message.preProcess = reader.readEnum();
                        break;
                    case 7:
                        message.separator = reader.readString();
                        break;
                    case 8:
                        message.maxChunkSize = reader.readUint32();
                        break;
                    case 9:
                        message.chunkOverlap = reader.readUint32();
                        break;
                    case 10:
                        message.name = reader.readString();
                        break;
                    case 11:
                        message.description = reader.readString();
                        break;
                    case 12:
                        message.documentStructure = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateKnowledgeDocumentRequest {
            return CreateKnowledgeDocumentRequest.deserialize(bytes);
        }
    }
    export namespace CreateKnowledgeDocumentRequest {
        export enum PRE_PROCESS {
            AUTOMATIC = 0,
            CUSTOM = 1
        }
        export enum DOCUMENT_SOURCE {
            DOCUMENT_SOURCE_MANUAL = 0,
            DOCUMENT_SOURCE_TOOL = 1
        }
    }
    export class CreateKnowledgeDocumentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: KnowledgeDocument[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, KnowledgeDocument, 3) as KnowledgeDocument[];
        }
        set data(value: KnowledgeDocument[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof KnowledgeDocument.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): CreateKnowledgeDocumentResponse {
            const message = new CreateKnowledgeDocumentResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => KnowledgeDocument.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof KnowledgeDocument.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: KnowledgeDocument) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: KnowledgeDocument) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateKnowledgeDocumentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateKnowledgeDocumentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, KnowledgeDocument.deserialize(reader), KnowledgeDocument));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateKnowledgeDocumentResponse {
            return CreateKnowledgeDocumentResponse.deserialize(bytes);
        }
    }
    export class KnowledgeDocumentSegment extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            index?: string;
            document_hash?: string;
            document_id?: string;
            text?: string;
            metadata?: KnowledgeDocumentSegment.Metadata;
            entities?: KnowledgeDocumentSegment.Entities;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("document_hash" in data && data.document_hash != undefined) {
                    this.document_hash = data.document_hash;
                }
                if ("document_id" in data && data.document_id != undefined) {
                    this.document_id = data.document_id;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("entities" in data && data.entities != undefined) {
                    this.entities = data.entities;
                }
            }
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get document_hash() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set document_hash(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get document_id() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set document_id(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, KnowledgeDocumentSegment.Metadata, 22) as KnowledgeDocumentSegment.Metadata;
        }
        set metadata(value: KnowledgeDocumentSegment.Metadata) {
            pb_1.Message.setWrapperField(this, 22, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get entities() {
            return pb_1.Message.getWrapperField(this, KnowledgeDocumentSegment.Entities, 23) as KnowledgeDocumentSegment.Entities;
        }
        set entities(value: KnowledgeDocumentSegment.Entities) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get has_entities() {
            return pb_1.Message.getField(this, 23) != null;
        }
        static fromObject(data: {
            index?: string;
            document_hash?: string;
            document_id?: string;
            text?: string;
            metadata?: ReturnType<typeof KnowledgeDocumentSegment.Metadata.prototype.toObject>;
            entities?: ReturnType<typeof KnowledgeDocumentSegment.Entities.prototype.toObject>;
        }): KnowledgeDocumentSegment {
            const message = new KnowledgeDocumentSegment({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.document_hash != null) {
                message.document_hash = data.document_hash;
            }
            if (data.document_id != null) {
                message.document_id = data.document_id;
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.metadata != null) {
                message.metadata = KnowledgeDocumentSegment.Metadata.fromObject(data.metadata);
            }
            if (data.entities != null) {
                message.entities = KnowledgeDocumentSegment.Entities.fromObject(data.entities);
            }
            return message;
        }
        toObject() {
            const data: {
                index?: string;
                document_hash?: string;
                document_id?: string;
                text?: string;
                metadata?: ReturnType<typeof KnowledgeDocumentSegment.Metadata.prototype.toObject>;
                entities?: ReturnType<typeof KnowledgeDocumentSegment.Entities.prototype.toObject>;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.document_hash != null) {
                data.document_hash = this.document_hash;
            }
            if (this.document_id != null) {
                data.document_id = this.document_id;
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.entities != null) {
                data.entities = this.entities.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index.length)
                writer.writeString(1, this.index);
            if (this.document_hash.length)
                writer.writeString(19, this.document_hash);
            if (this.document_id.length)
                writer.writeString(20, this.document_id);
            if (this.text.length)
                writer.writeString(21, this.text);
            if (this.has_metadata)
                writer.writeMessage(22, this.metadata, () => this.metadata.serialize(writer));
            if (this.has_entities)
                writer.writeMessage(23, this.entities, () => this.entities.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KnowledgeDocumentSegment {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KnowledgeDocumentSegment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readString();
                        break;
                    case 19:
                        message.document_hash = reader.readString();
                        break;
                    case 20:
                        message.document_id = reader.readString();
                        break;
                    case 21:
                        message.text = reader.readString();
                        break;
                    case 22:
                        reader.readMessage(message.metadata, () => message.metadata = KnowledgeDocumentSegment.Metadata.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.entities, () => message.entities = KnowledgeDocumentSegment.Entities.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KnowledgeDocumentSegment {
            return KnowledgeDocumentSegment.deserialize(bytes);
        }
    }
    export namespace KnowledgeDocumentSegment {
        export class Metadata extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                document_hash?: string;
                document_id?: string;
                knowledge_document_id?: string;
                knowledge_id?: string;
                project_id?: string;
                organization_id?: string;
                document_name?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("document_hash" in data && data.document_hash != undefined) {
                        this.document_hash = data.document_hash;
                    }
                    if ("document_id" in data && data.document_id != undefined) {
                        this.document_id = data.document_id;
                    }
                    if ("knowledge_document_id" in data && data.knowledge_document_id != undefined) {
                        this.knowledge_document_id = data.knowledge_document_id;
                    }
                    if ("knowledge_id" in data && data.knowledge_id != undefined) {
                        this.knowledge_id = data.knowledge_id;
                    }
                    if ("project_id" in data && data.project_id != undefined) {
                        this.project_id = data.project_id;
                    }
                    if ("organization_id" in data && data.organization_id != undefined) {
                        this.organization_id = data.organization_id;
                    }
                    if ("document_name" in data && data.document_name != undefined) {
                        this.document_name = data.document_name;
                    }
                }
            }
            get document_hash() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set document_hash(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get document_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set document_id(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get knowledge_document_id() {
                return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
            }
            set knowledge_document_id(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get knowledge_id() {
                return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
            }
            set knowledge_id(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get project_id() {
                return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
            }
            set project_id(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get organization_id() {
                return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
            }
            set organization_id(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            get document_name() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set document_name(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                document_hash?: string;
                document_id?: string;
                knowledge_document_id?: string;
                knowledge_id?: string;
                project_id?: string;
                organization_id?: string;
                document_name?: string;
            }): Metadata {
                const message = new Metadata({});
                if (data.document_hash != null) {
                    message.document_hash = data.document_hash;
                }
                if (data.document_id != null) {
                    message.document_id = data.document_id;
                }
                if (data.knowledge_document_id != null) {
                    message.knowledge_document_id = data.knowledge_document_id;
                }
                if (data.knowledge_id != null) {
                    message.knowledge_id = data.knowledge_id;
                }
                if (data.project_id != null) {
                    message.project_id = data.project_id;
                }
                if (data.organization_id != null) {
                    message.organization_id = data.organization_id;
                }
                if (data.document_name != null) {
                    message.document_name = data.document_name;
                }
                return message;
            }
            toObject() {
                const data: {
                    document_hash?: string;
                    document_id?: string;
                    knowledge_document_id?: string;
                    knowledge_id?: string;
                    project_id?: string;
                    organization_id?: string;
                    document_name?: string;
                } = {};
                if (this.document_hash != null) {
                    data.document_hash = this.document_hash;
                }
                if (this.document_id != null) {
                    data.document_id = this.document_id;
                }
                if (this.knowledge_document_id != null) {
                    data.knowledge_document_id = this.knowledge_document_id;
                }
                if (this.knowledge_id != null) {
                    data.knowledge_id = this.knowledge_id;
                }
                if (this.project_id != null) {
                    data.project_id = this.project_id;
                }
                if (this.organization_id != null) {
                    data.organization_id = this.organization_id;
                }
                if (this.document_name != null) {
                    data.document_name = this.document_name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.document_hash.length)
                    writer.writeString(1, this.document_hash);
                if (this.document_id.length)
                    writer.writeString(2, this.document_id);
                if (this.knowledge_document_id != "0")
                    writer.writeUint64String(3, this.knowledge_document_id);
                if (this.knowledge_id != "0")
                    writer.writeUint64String(4, this.knowledge_id);
                if (this.project_id != "0")
                    writer.writeUint64String(5, this.project_id);
                if (this.organization_id != "0")
                    writer.writeUint64String(6, this.organization_id);
                if (this.document_name.length)
                    writer.writeString(7, this.document_name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metadata {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.document_hash = reader.readString();
                            break;
                        case 2:
                            message.document_id = reader.readString();
                            break;
                        case 3:
                            message.knowledge_document_id = reader.readUint64String();
                            break;
                        case 4:
                            message.knowledge_id = reader.readUint64String();
                            break;
                        case 5:
                            message.project_id = reader.readUint64String();
                            break;
                        case 6:
                            message.organization_id = reader.readUint64String();
                            break;
                        case 7:
                            message.document_name = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Metadata {
                return Metadata.deserialize(bytes);
            }
        }
        export class Entities extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                organizations?: string[];
                dates?: string[];
                products?: string[];
                events?: string[];
                people?: string[];
                times?: string[];
                quantities?: string[];
                locations?: string[];
                industries?: string[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 4, 5, 6, 7, 8, 9], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("organizations" in data && data.organizations != undefined) {
                        this.organizations = data.organizations;
                    }
                    if ("dates" in data && data.dates != undefined) {
                        this.dates = data.dates;
                    }
                    if ("products" in data && data.products != undefined) {
                        this.products = data.products;
                    }
                    if ("events" in data && data.events != undefined) {
                        this.events = data.events;
                    }
                    if ("people" in data && data.people != undefined) {
                        this.people = data.people;
                    }
                    if ("times" in data && data.times != undefined) {
                        this.times = data.times;
                    }
                    if ("quantities" in data && data.quantities != undefined) {
                        this.quantities = data.quantities;
                    }
                    if ("locations" in data && data.locations != undefined) {
                        this.locations = data.locations;
                    }
                    if ("industries" in data && data.industries != undefined) {
                        this.industries = data.industries;
                    }
                }
            }
            get organizations() {
                return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
            }
            set organizations(value: string[]) {
                pb_1.Message.setField(this, 1, value);
            }
            get dates() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
            }
            set dates(value: string[]) {
                pb_1.Message.setField(this, 2, value);
            }
            get products() {
                return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
            }
            set products(value: string[]) {
                pb_1.Message.setField(this, 3, value);
            }
            get events() {
                return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
            }
            set events(value: string[]) {
                pb_1.Message.setField(this, 4, value);
            }
            get people() {
                return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
            }
            set people(value: string[]) {
                pb_1.Message.setField(this, 5, value);
            }
            get times() {
                return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
            }
            set times(value: string[]) {
                pb_1.Message.setField(this, 6, value);
            }
            get quantities() {
                return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
            }
            set quantities(value: string[]) {
                pb_1.Message.setField(this, 7, value);
            }
            get locations() {
                return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
            }
            set locations(value: string[]) {
                pb_1.Message.setField(this, 8, value);
            }
            get industries() {
                return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
            }
            set industries(value: string[]) {
                pb_1.Message.setField(this, 9, value);
            }
            static fromObject(data: {
                organizations?: string[];
                dates?: string[];
                products?: string[];
                events?: string[];
                people?: string[];
                times?: string[];
                quantities?: string[];
                locations?: string[];
                industries?: string[];
            }): Entities {
                const message = new Entities({});
                if (data.organizations != null) {
                    message.organizations = data.organizations;
                }
                if (data.dates != null) {
                    message.dates = data.dates;
                }
                if (data.products != null) {
                    message.products = data.products;
                }
                if (data.events != null) {
                    message.events = data.events;
                }
                if (data.people != null) {
                    message.people = data.people;
                }
                if (data.times != null) {
                    message.times = data.times;
                }
                if (data.quantities != null) {
                    message.quantities = data.quantities;
                }
                if (data.locations != null) {
                    message.locations = data.locations;
                }
                if (data.industries != null) {
                    message.industries = data.industries;
                }
                return message;
            }
            toObject() {
                const data: {
                    organizations?: string[];
                    dates?: string[];
                    products?: string[];
                    events?: string[];
                    people?: string[];
                    times?: string[];
                    quantities?: string[];
                    locations?: string[];
                    industries?: string[];
                } = {};
                if (this.organizations != null) {
                    data.organizations = this.organizations;
                }
                if (this.dates != null) {
                    data.dates = this.dates;
                }
                if (this.products != null) {
                    data.products = this.products;
                }
                if (this.events != null) {
                    data.events = this.events;
                }
                if (this.people != null) {
                    data.people = this.people;
                }
                if (this.times != null) {
                    data.times = this.times;
                }
                if (this.quantities != null) {
                    data.quantities = this.quantities;
                }
                if (this.locations != null) {
                    data.locations = this.locations;
                }
                if (this.industries != null) {
                    data.industries = this.industries;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.organizations.length)
                    writer.writeRepeatedString(1, this.organizations);
                if (this.dates.length)
                    writer.writeRepeatedString(2, this.dates);
                if (this.products.length)
                    writer.writeRepeatedString(3, this.products);
                if (this.events.length)
                    writer.writeRepeatedString(4, this.events);
                if (this.people.length)
                    writer.writeRepeatedString(5, this.people);
                if (this.times.length)
                    writer.writeRepeatedString(6, this.times);
                if (this.quantities.length)
                    writer.writeRepeatedString(7, this.quantities);
                if (this.locations.length)
                    writer.writeRepeatedString(8, this.locations);
                if (this.industries.length)
                    writer.writeRepeatedString(9, this.industries);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Entities {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Entities();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        case 2:
                            pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                            break;
                        case 3:
                            pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                            break;
                        case 4:
                            pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                            break;
                        case 5:
                            pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                            break;
                        case 6:
                            pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                            break;
                        case 7:
                            pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                            break;
                        case 8:
                            pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                            break;
                        case 9:
                            pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Entities {
                return Entities.deserialize(bytes);
            }
        }
    }
    export class GetAllKnowledgeDocumentSegmentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            knowledgeId?: string;
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
            }
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 3) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 4) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            knowledgeId?: string;
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
        }): GetAllKnowledgeDocumentSegmentRequest {
            const message = new GetAllKnowledgeDocumentSegmentRequest({});
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                knowledgeId?: string;
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            } = {};
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.knowledgeId != "0")
                writer.writeUint64String(1, this.knowledgeId);
            if (this.has_paginate)
                writer.writeMessage(3, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(4, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllKnowledgeDocumentSegmentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllKnowledgeDocumentSegmentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllKnowledgeDocumentSegmentRequest {
            return GetAllKnowledgeDocumentSegmentRequest.deserialize(bytes);
        }
    }
    export class GetAllKnowledgeDocumentSegmentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: KnowledgeDocumentSegment[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, KnowledgeDocumentSegment, 3) as KnowledgeDocumentSegment[];
        }
        set data(value: KnowledgeDocumentSegment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof KnowledgeDocumentSegment.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllKnowledgeDocumentSegmentResponse {
            const message = new GetAllKnowledgeDocumentSegmentResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => KnowledgeDocumentSegment.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof KnowledgeDocumentSegment.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: KnowledgeDocumentSegment) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: KnowledgeDocumentSegment) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllKnowledgeDocumentSegmentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllKnowledgeDocumentSegmentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, KnowledgeDocumentSegment.deserialize(reader), KnowledgeDocumentSegment));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllKnowledgeDocumentSegmentResponse {
            return GetAllKnowledgeDocumentSegmentResponse.deserialize(bytes);
        }
    }
    export class UpdateKnowledgeDetailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            knowledgeId?: string;
            name?: string;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            knowledgeId?: string;
            name?: string;
            description?: string;
        }): UpdateKnowledgeDetailRequest {
            const message = new UpdateKnowledgeDetailRequest({});
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                knowledgeId?: string;
                name?: string;
                description?: string;
            } = {};
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.knowledgeId != "0")
                writer.writeUint64String(1, this.knowledgeId);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateKnowledgeDetailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateKnowledgeDetailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateKnowledgeDetailRequest {
            return UpdateKnowledgeDetailRequest.deserialize(bytes);
        }
    }
    export class UpdateKnowledgeDocumentSegmentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            organizations?: string[];
            dates?: string[];
            products?: string[];
            events?: string[];
            people?: string[];
            times?: string[];
            quantities?: string[];
            locations?: string[];
            industries?: string[];
            documentName?: string;
            documentId?: string;
            index?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 4, 5, 6, 7, 8, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("organizations" in data && data.organizations != undefined) {
                    this.organizations = data.organizations;
                }
                if ("dates" in data && data.dates != undefined) {
                    this.dates = data.dates;
                }
                if ("products" in data && data.products != undefined) {
                    this.products = data.products;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("people" in data && data.people != undefined) {
                    this.people = data.people;
                }
                if ("times" in data && data.times != undefined) {
                    this.times = data.times;
                }
                if ("quantities" in data && data.quantities != undefined) {
                    this.quantities = data.quantities;
                }
                if ("locations" in data && data.locations != undefined) {
                    this.locations = data.locations;
                }
                if ("industries" in data && data.industries != undefined) {
                    this.industries = data.industries;
                }
                if ("documentName" in data && data.documentName != undefined) {
                    this.documentName = data.documentName;
                }
                if ("documentId" in data && data.documentId != undefined) {
                    this.documentId = data.documentId;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get organizations() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set organizations(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get dates() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set dates(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get products() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set products(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get events() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set events(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get people() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set people(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get times() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set times(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get quantities() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set quantities(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get locations() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set locations(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get industries() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set industries(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get documentName() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set documentName(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get documentId() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set documentId(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            organizations?: string[];
            dates?: string[];
            products?: string[];
            events?: string[];
            people?: string[];
            times?: string[];
            quantities?: string[];
            locations?: string[];
            industries?: string[];
            documentName?: string;
            documentId?: string;
            index?: string;
        }): UpdateKnowledgeDocumentSegmentRequest {
            const message = new UpdateKnowledgeDocumentSegmentRequest({});
            if (data.organizations != null) {
                message.organizations = data.organizations;
            }
            if (data.dates != null) {
                message.dates = data.dates;
            }
            if (data.products != null) {
                message.products = data.products;
            }
            if (data.events != null) {
                message.events = data.events;
            }
            if (data.people != null) {
                message.people = data.people;
            }
            if (data.times != null) {
                message.times = data.times;
            }
            if (data.quantities != null) {
                message.quantities = data.quantities;
            }
            if (data.locations != null) {
                message.locations = data.locations;
            }
            if (data.industries != null) {
                message.industries = data.industries;
            }
            if (data.documentName != null) {
                message.documentName = data.documentName;
            }
            if (data.documentId != null) {
                message.documentId = data.documentId;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                organizations?: string[];
                dates?: string[];
                products?: string[];
                events?: string[];
                people?: string[];
                times?: string[];
                quantities?: string[];
                locations?: string[];
                industries?: string[];
                documentName?: string;
                documentId?: string;
                index?: string;
            } = {};
            if (this.organizations != null) {
                data.organizations = this.organizations;
            }
            if (this.dates != null) {
                data.dates = this.dates;
            }
            if (this.products != null) {
                data.products = this.products;
            }
            if (this.events != null) {
                data.events = this.events;
            }
            if (this.people != null) {
                data.people = this.people;
            }
            if (this.times != null) {
                data.times = this.times;
            }
            if (this.quantities != null) {
                data.quantities = this.quantities;
            }
            if (this.locations != null) {
                data.locations = this.locations;
            }
            if (this.industries != null) {
                data.industries = this.industries;
            }
            if (this.documentName != null) {
                data.documentName = this.documentName;
            }
            if (this.documentId != null) {
                data.documentId = this.documentId;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.organizations.length)
                writer.writeRepeatedString(1, this.organizations);
            if (this.dates.length)
                writer.writeRepeatedString(2, this.dates);
            if (this.products.length)
                writer.writeRepeatedString(3, this.products);
            if (this.events.length)
                writer.writeRepeatedString(4, this.events);
            if (this.people.length)
                writer.writeRepeatedString(5, this.people);
            if (this.times.length)
                writer.writeRepeatedString(6, this.times);
            if (this.quantities.length)
                writer.writeRepeatedString(7, this.quantities);
            if (this.locations.length)
                writer.writeRepeatedString(8, this.locations);
            if (this.industries.length)
                writer.writeRepeatedString(9, this.industries);
            if (this.documentName.length)
                writer.writeString(10, this.documentName);
            if (this.documentId.length)
                writer.writeString(11, this.documentId);
            if (this.index.length)
                writer.writeString(12, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateKnowledgeDocumentSegmentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateKnowledgeDocumentSegmentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        message.documentName = reader.readString();
                        break;
                    case 11:
                        message.documentId = reader.readString();
                        break;
                    case 12:
                        message.index = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateKnowledgeDocumentSegmentRequest {
            return UpdateKnowledgeDocumentSegmentRequest.deserialize(bytes);
        }
    }
    export class DeleteKnowledgeDocumentSegmentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            documentId?: string;
            index?: string;
            reason?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("documentId" in data && data.documentId != undefined) {
                    this.documentId = data.documentId;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get documentId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set documentId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set index(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            documentId?: string;
            index?: string;
            reason?: string;
        }): DeleteKnowledgeDocumentSegmentRequest {
            const message = new DeleteKnowledgeDocumentSegmentRequest({});
            if (data.documentId != null) {
                message.documentId = data.documentId;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                documentId?: string;
                index?: string;
                reason?: string;
            } = {};
            if (this.documentId != null) {
                data.documentId = this.documentId;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.documentId.length)
                writer.writeString(1, this.documentId);
            if (this.index.length)
                writer.writeString(2, this.index);
            if (this.reason.length)
                writer.writeString(3, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteKnowledgeDocumentSegmentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteKnowledgeDocumentSegmentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.documentId = reader.readString();
                        break;
                    case 2:
                        message.index = reader.readString();
                        break;
                    case 3:
                        message.reason = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteKnowledgeDocumentSegmentRequest {
            return DeleteKnowledgeDocumentSegmentRequest.deserialize(bytes);
        }
    }
    export class GetAllKnowledgeLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projectId?: string;
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
            order?: dependency_2.Ordering;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
            }
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 3) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 4) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get order() {
            return pb_1.Message.getWrapperField(this, dependency_2.Ordering, 5) as dependency_2.Ordering;
        }
        set order(value: dependency_2.Ordering) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_order() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            projectId?: string;
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            order?: ReturnType<typeof dependency_2.Ordering.prototype.toObject>;
        }): GetAllKnowledgeLogRequest {
            const message = new GetAllKnowledgeLogRequest({});
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            if (data.order != null) {
                message.order = dependency_2.Ordering.fromObject(data.order);
            }
            return message;
        }
        toObject() {
            const data: {
                projectId?: string;
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
                order?: ReturnType<typeof dependency_2.Ordering.prototype.toObject>;
            } = {};
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            if (this.order != null) {
                data.order = this.order.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectId != "0")
                writer.writeUint64String(2, this.projectId);
            if (this.has_paginate)
                writer.writeMessage(3, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(4, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (this.has_order)
                writer.writeMessage(5, this.order, () => this.order.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllKnowledgeLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllKnowledgeLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.projectId = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    case 5:
                        reader.readMessage(message.order, () => message.order = dependency_2.Ordering.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllKnowledgeLogRequest {
            return GetAllKnowledgeLogRequest.deserialize(bytes);
        }
    }
    export class GetKnowledgeLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projectId?: string;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            projectId?: string;
            id?: string;
        }): GetKnowledgeLogRequest {
            const message = new GetKnowledgeLogRequest({});
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                projectId?: string;
                id?: string;
            } = {};
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projectId != "0")
                writer.writeUint64String(2, this.projectId);
            if (this.id != "0")
                writer.writeUint64String(3, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKnowledgeLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKnowledgeLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.projectId = reader.readUint64String();
                        break;
                    case 3:
                        message.id = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKnowledgeLogRequest {
            return GetKnowledgeLogRequest.deserialize(bytes);
        }
    }
    export class GetKnowledgeLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: KnowledgeLog;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, KnowledgeLog, 3) as KnowledgeLog;
        }
        set data(value: KnowledgeLog) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof KnowledgeLog.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GetKnowledgeLogResponse {
            const message = new GetKnowledgeLogResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = KnowledgeLog.fromObject(data.data);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof KnowledgeLog.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKnowledgeLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKnowledgeLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = KnowledgeLog.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKnowledgeLogResponse {
            return GetKnowledgeLogResponse.deserialize(bytes);
        }
    }
    export class GetAllKnowledgeLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: KnowledgeLog[];
            error?: dependency_2.Error;
            paginated?: dependency_2.Paginated;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, KnowledgeLog, 3) as KnowledgeLog[];
        }
        set data(value: KnowledgeLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 4) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 5) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof KnowledgeLog.prototype.toObject>[];
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
        }): GetAllKnowledgeLogResponse {
            const message = new GetAllKnowledgeLogResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => KnowledgeLog.fromObject(item));
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof KnowledgeLog.prototype.toObject>[];
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: KnowledgeLog) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: KnowledgeLog) => item.serialize(writer));
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(5, this.paginated, () => this.paginated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllKnowledgeLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllKnowledgeLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, KnowledgeLog.deserialize(reader), KnowledgeLog));
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllKnowledgeLogResponse {
            return GetAllKnowledgeLogResponse.deserialize(bytes);
        }
    }
    export class KnowledgeLog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            action?: dependency_3.google.protobuf.Struct;
            request?: dependency_3.google.protobuf.Struct;
            response?: dependency_3.google.protobuf.Struct;
            status?: string;
            createdDate?: dependency_1.google.protobuf.Timestamp;
            updatedDate?: dependency_1.google.protobuf.Timestamp;
            knowledgeId?: string;
            projectId?: string;
            organizationId?: string;
            topK?: number;
            scoreThreshold?: number;
            documentCount?: number;
            assetPrefix?: string;
            retrievalMethod?: string;
            timeTaken?: string;
            additionalData?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("createdDate" in data && data.createdDate != undefined) {
                    this.createdDate = data.createdDate;
                }
                if ("updatedDate" in data && data.updatedDate != undefined) {
                    this.updatedDate = data.updatedDate;
                }
                if ("knowledgeId" in data && data.knowledgeId != undefined) {
                    this.knowledgeId = data.knowledgeId;
                }
                if ("projectId" in data && data.projectId != undefined) {
                    this.projectId = data.projectId;
                }
                if ("organizationId" in data && data.organizationId != undefined) {
                    this.organizationId = data.organizationId;
                }
                if ("topK" in data && data.topK != undefined) {
                    this.topK = data.topK;
                }
                if ("scoreThreshold" in data && data.scoreThreshold != undefined) {
                    this.scoreThreshold = data.scoreThreshold;
                }
                if ("documentCount" in data && data.documentCount != undefined) {
                    this.documentCount = data.documentCount;
                }
                if ("assetPrefix" in data && data.assetPrefix != undefined) {
                    this.assetPrefix = data.assetPrefix;
                }
                if ("retrievalMethod" in data && data.retrievalMethod != undefined) {
                    this.retrievalMethod = data.retrievalMethod;
                }
                if ("timeTaken" in data && data.timeTaken != undefined) {
                    this.timeTaken = data.timeTaken;
                }
                if ("additionalData" in data && data.additionalData != undefined) {
                    this.additionalData = data.additionalData;
                }
            }
            if (!this.additionalData)
                this.additionalData = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get action() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 2) as dependency_3.google.protobuf.Struct;
        }
        set action(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_action() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get request() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 3) as dependency_3.google.protobuf.Struct;
        }
        set request(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get response() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 4) as dependency_3.google.protobuf.Struct;
        }
        set response(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get createdDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set createdDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_createdDate() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get updatedDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_updatedDate() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get knowledgeId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "0") as string;
        }
        set knowledgeId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get projectId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "0") as string;
        }
        set projectId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get organizationId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "0") as string;
        }
        set organizationId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get topK() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set topK(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get scoreThreshold() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set scoreThreshold(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get documentCount() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set documentCount(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get assetPrefix() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set assetPrefix(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get retrievalMethod() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set retrievalMethod(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get timeTaken() {
            return pb_1.Message.getFieldWithDefault(this, 16, "0") as string;
        }
        set timeTaken(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get additionalData() {
            return pb_1.Message.getField(this, 17) as any as Map<string, string>;
        }
        set additionalData(value: Map<string, string>) {
            pb_1.Message.setField(this, 17, value as any);
        }
        static fromObject(data: {
            id?: string;
            action?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            request?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            response?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            status?: string;
            createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            knowledgeId?: string;
            projectId?: string;
            organizationId?: string;
            topK?: number;
            scoreThreshold?: number;
            documentCount?: number;
            assetPrefix?: string;
            retrievalMethod?: string;
            timeTaken?: string;
            additionalData?: {
                [key: string]: string;
            };
        }): KnowledgeLog {
            const message = new KnowledgeLog({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.action != null) {
                message.action = dependency_3.google.protobuf.Struct.fromObject(data.action);
            }
            if (data.request != null) {
                message.request = dependency_3.google.protobuf.Struct.fromObject(data.request);
            }
            if (data.response != null) {
                message.response = dependency_3.google.protobuf.Struct.fromObject(data.response);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.createdDate != null) {
                message.createdDate = dependency_1.google.protobuf.Timestamp.fromObject(data.createdDate);
            }
            if (data.updatedDate != null) {
                message.updatedDate = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedDate);
            }
            if (data.knowledgeId != null) {
                message.knowledgeId = data.knowledgeId;
            }
            if (data.projectId != null) {
                message.projectId = data.projectId;
            }
            if (data.organizationId != null) {
                message.organizationId = data.organizationId;
            }
            if (data.topK != null) {
                message.topK = data.topK;
            }
            if (data.scoreThreshold != null) {
                message.scoreThreshold = data.scoreThreshold;
            }
            if (data.documentCount != null) {
                message.documentCount = data.documentCount;
            }
            if (data.assetPrefix != null) {
                message.assetPrefix = data.assetPrefix;
            }
            if (data.retrievalMethod != null) {
                message.retrievalMethod = data.retrievalMethod;
            }
            if (data.timeTaken != null) {
                message.timeTaken = data.timeTaken;
            }
            if (typeof data.additionalData == "object") {
                message.additionalData = new Map(Object.entries(data.additionalData));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                action?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                request?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                response?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                status?: string;
                createdDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                knowledgeId?: string;
                projectId?: string;
                organizationId?: string;
                topK?: number;
                scoreThreshold?: number;
                documentCount?: number;
                assetPrefix?: string;
                retrievalMethod?: string;
                timeTaken?: string;
                additionalData?: {
                    [key: string]: string;
                };
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.action != null) {
                data.action = this.action.toObject();
            }
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.createdDate != null) {
                data.createdDate = this.createdDate.toObject();
            }
            if (this.updatedDate != null) {
                data.updatedDate = this.updatedDate.toObject();
            }
            if (this.knowledgeId != null) {
                data.knowledgeId = this.knowledgeId;
            }
            if (this.projectId != null) {
                data.projectId = this.projectId;
            }
            if (this.organizationId != null) {
                data.organizationId = this.organizationId;
            }
            if (this.topK != null) {
                data.topK = this.topK;
            }
            if (this.scoreThreshold != null) {
                data.scoreThreshold = this.scoreThreshold;
            }
            if (this.documentCount != null) {
                data.documentCount = this.documentCount;
            }
            if (this.assetPrefix != null) {
                data.assetPrefix = this.assetPrefix;
            }
            if (this.retrievalMethod != null) {
                data.retrievalMethod = this.retrievalMethod;
            }
            if (this.timeTaken != null) {
                data.timeTaken = this.timeTaken;
            }
            if (this.additionalData != null) {
                data.additionalData = (Object.fromEntries)(this.additionalData);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeUint64String(1, this.id);
            if (this.has_action)
                writer.writeMessage(2, this.action, () => this.action.serialize(writer));
            if (this.has_request)
                writer.writeMessage(3, this.request, () => this.request.serialize(writer));
            if (this.has_response)
                writer.writeMessage(4, this.response, () => this.response.serialize(writer));
            if (this.status.length)
                writer.writeString(5, this.status);
            if (this.has_createdDate)
                writer.writeMessage(6, this.createdDate, () => this.createdDate.serialize(writer));
            if (this.has_updatedDate)
                writer.writeMessage(7, this.updatedDate, () => this.updatedDate.serialize(writer));
            if (this.knowledgeId != "0")
                writer.writeUint64String(8, this.knowledgeId);
            if (this.projectId != "0")
                writer.writeUint64String(9, this.projectId);
            if (this.organizationId != "0")
                writer.writeUint64String(10, this.organizationId);
            if (this.topK != 0)
                writer.writeUint32(11, this.topK);
            if (this.scoreThreshold != 0)
                writer.writeFloat(12, this.scoreThreshold);
            if (this.documentCount != 0)
                writer.writeUint32(13, this.documentCount);
            if (this.assetPrefix.length)
                writer.writeString(14, this.assetPrefix);
            if (this.retrievalMethod.length)
                writer.writeString(15, this.retrievalMethod);
            if (this.timeTaken != "0")
                writer.writeUint64String(16, this.timeTaken);
            for (const [key, value] of this.additionalData) {
                writer.writeMessage(17, this.additionalData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KnowledgeLog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KnowledgeLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.action, () => message.action = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.request, () => message.request = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.response, () => message.response = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 5:
                        message.status = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.createdDate, () => message.createdDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.updatedDate, () => message.updatedDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        message.knowledgeId = reader.readUint64String();
                        break;
                    case 9:
                        message.projectId = reader.readUint64String();
                        break;
                    case 10:
                        message.organizationId = reader.readUint64String();
                        break;
                    case 11:
                        message.topK = reader.readUint32();
                        break;
                    case 12:
                        message.scoreThreshold = reader.readFloat();
                        break;
                    case 13:
                        message.documentCount = reader.readUint32();
                        break;
                    case 14:
                        message.assetPrefix = reader.readString();
                        break;
                    case 15:
                        message.retrievalMethod = reader.readString();
                        break;
                    case 16:
                        message.timeTaken = reader.readUint64String();
                        break;
                    case 17:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.additionalData as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KnowledgeLog {
            return KnowledgeLog.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedKnowledgeServiceService {
        static definition = {
            GetKnowledge: {
                path: "/knowledge_api.KnowledgeService/GetKnowledge",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetKnowledgeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetKnowledgeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetKnowledgeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetKnowledgeResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllKnowledge: {
                path: "/knowledge_api.KnowledgeService/GetAllKnowledge",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllKnowledgeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllKnowledgeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllKnowledgeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllKnowledgeResponse.deserialize(new Uint8Array(bytes))
            },
            CreateKnowledge: {
                path: "/knowledge_api.KnowledgeService/CreateKnowledge",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateKnowledgeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateKnowledgeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateKnowledgeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateKnowledgeResponse.deserialize(new Uint8Array(bytes))
            },
            CreateKnowledgeTag: {
                path: "/knowledge_api.KnowledgeService/CreateKnowledgeTag",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateKnowledgeTagRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateKnowledgeTagRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetKnowledgeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetKnowledgeResponse.deserialize(new Uint8Array(bytes))
            },
            CreateKnowledgeDocument: {
                path: "/knowledge_api.KnowledgeService/CreateKnowledgeDocument",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateKnowledgeDocumentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateKnowledgeDocumentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateKnowledgeDocumentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateKnowledgeDocumentResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllKnowledgeDocument: {
                path: "/knowledge_api.KnowledgeService/GetAllKnowledgeDocument",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllKnowledgeDocumentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllKnowledgeDocumentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllKnowledgeDocumentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllKnowledgeDocumentResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllKnowledgeDocumentSegment: {
                path: "/knowledge_api.KnowledgeService/GetAllKnowledgeDocumentSegment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllKnowledgeDocumentSegmentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllKnowledgeDocumentSegmentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllKnowledgeDocumentSegmentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllKnowledgeDocumentSegmentResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateKnowledgeDetail: {
                path: "/knowledge_api.KnowledgeService/UpdateKnowledgeDetail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateKnowledgeDetailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateKnowledgeDetailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetKnowledgeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetKnowledgeResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateKnowledgeDocumentSegment: {
                path: "/knowledge_api.KnowledgeService/UpdateKnowledgeDocumentSegment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateKnowledgeDocumentSegmentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateKnowledgeDocumentSegmentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.BaseResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.BaseResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteKnowledgeDocumentSegment: {
                path: "/knowledge_api.KnowledgeService/DeleteKnowledgeDocumentSegment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteKnowledgeDocumentSegmentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteKnowledgeDocumentSegmentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.BaseResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.BaseResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllKnowledgeLog: {
                path: "/knowledge_api.KnowledgeService/GetAllKnowledgeLog",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAllKnowledgeLogRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAllKnowledgeLogRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllKnowledgeLogResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllKnowledgeLogResponse.deserialize(new Uint8Array(bytes))
            },
            GetKnowledgeLog: {
                path: "/knowledge_api.KnowledgeService/GetKnowledgeLog",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetKnowledgeLogRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetKnowledgeLogRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetKnowledgeLogResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetKnowledgeLogResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetKnowledge(call: grpc_1.ServerUnaryCall<GetKnowledgeRequest, GetKnowledgeResponse>, callback: grpc_1.sendUnaryData<GetKnowledgeResponse>): void;
        abstract GetAllKnowledge(call: grpc_1.ServerUnaryCall<GetAllKnowledgeRequest, GetAllKnowledgeResponse>, callback: grpc_1.sendUnaryData<GetAllKnowledgeResponse>): void;
        abstract CreateKnowledge(call: grpc_1.ServerUnaryCall<CreateKnowledgeRequest, CreateKnowledgeResponse>, callback: grpc_1.sendUnaryData<CreateKnowledgeResponse>): void;
        abstract CreateKnowledgeTag(call: grpc_1.ServerUnaryCall<CreateKnowledgeTagRequest, GetKnowledgeResponse>, callback: grpc_1.sendUnaryData<GetKnowledgeResponse>): void;
        abstract CreateKnowledgeDocument(call: grpc_1.ServerUnaryCall<CreateKnowledgeDocumentRequest, CreateKnowledgeDocumentResponse>, callback: grpc_1.sendUnaryData<CreateKnowledgeDocumentResponse>): void;
        abstract GetAllKnowledgeDocument(call: grpc_1.ServerUnaryCall<GetAllKnowledgeDocumentRequest, GetAllKnowledgeDocumentResponse>, callback: grpc_1.sendUnaryData<GetAllKnowledgeDocumentResponse>): void;
        abstract GetAllKnowledgeDocumentSegment(call: grpc_1.ServerUnaryCall<GetAllKnowledgeDocumentSegmentRequest, GetAllKnowledgeDocumentSegmentResponse>, callback: grpc_1.sendUnaryData<GetAllKnowledgeDocumentSegmentResponse>): void;
        abstract UpdateKnowledgeDetail(call: grpc_1.ServerUnaryCall<UpdateKnowledgeDetailRequest, GetKnowledgeResponse>, callback: grpc_1.sendUnaryData<GetKnowledgeResponse>): void;
        abstract UpdateKnowledgeDocumentSegment(call: grpc_1.ServerUnaryCall<UpdateKnowledgeDocumentSegmentRequest, dependency_2.BaseResponse>, callback: grpc_1.sendUnaryData<dependency_2.BaseResponse>): void;
        abstract DeleteKnowledgeDocumentSegment(call: grpc_1.ServerUnaryCall<DeleteKnowledgeDocumentSegmentRequest, dependency_2.BaseResponse>, callback: grpc_1.sendUnaryData<dependency_2.BaseResponse>): void;
        abstract GetAllKnowledgeLog(call: grpc_1.ServerUnaryCall<GetAllKnowledgeLogRequest, GetAllKnowledgeLogResponse>, callback: grpc_1.sendUnaryData<GetAllKnowledgeLogResponse>): void;
        abstract GetKnowledgeLog(call: grpc_1.ServerUnaryCall<GetKnowledgeLogRequest, GetKnowledgeLogResponse>, callback: grpc_1.sendUnaryData<GetKnowledgeLogResponse>): void;
    }
    export class KnowledgeServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedKnowledgeServiceService.definition, "KnowledgeService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetKnowledge: GrpcUnaryServiceInterface<GetKnowledgeRequest, GetKnowledgeResponse> = (message: GetKnowledgeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetKnowledgeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetKnowledgeResponse>, callback?: grpc_1.requestCallback<GetKnowledgeResponse>): grpc_1.ClientUnaryCall => {
            return super.GetKnowledge(message, metadata, options, callback);
        };
        GetAllKnowledge: GrpcUnaryServiceInterface<GetAllKnowledgeRequest, GetAllKnowledgeResponse> = (message: GetAllKnowledgeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllKnowledgeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllKnowledgeResponse>, callback?: grpc_1.requestCallback<GetAllKnowledgeResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllKnowledge(message, metadata, options, callback);
        };
        CreateKnowledge: GrpcUnaryServiceInterface<CreateKnowledgeRequest, CreateKnowledgeResponse> = (message: CreateKnowledgeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateKnowledgeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateKnowledgeResponse>, callback?: grpc_1.requestCallback<CreateKnowledgeResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateKnowledge(message, metadata, options, callback);
        };
        CreateKnowledgeTag: GrpcUnaryServiceInterface<CreateKnowledgeTagRequest, GetKnowledgeResponse> = (message: CreateKnowledgeTagRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetKnowledgeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetKnowledgeResponse>, callback?: grpc_1.requestCallback<GetKnowledgeResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateKnowledgeTag(message, metadata, options, callback);
        };
        CreateKnowledgeDocument: GrpcUnaryServiceInterface<CreateKnowledgeDocumentRequest, CreateKnowledgeDocumentResponse> = (message: CreateKnowledgeDocumentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateKnowledgeDocumentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateKnowledgeDocumentResponse>, callback?: grpc_1.requestCallback<CreateKnowledgeDocumentResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateKnowledgeDocument(message, metadata, options, callback);
        };
        GetAllKnowledgeDocument: GrpcUnaryServiceInterface<GetAllKnowledgeDocumentRequest, GetAllKnowledgeDocumentResponse> = (message: GetAllKnowledgeDocumentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllKnowledgeDocumentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllKnowledgeDocumentResponse>, callback?: grpc_1.requestCallback<GetAllKnowledgeDocumentResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllKnowledgeDocument(message, metadata, options, callback);
        };
        GetAllKnowledgeDocumentSegment: GrpcUnaryServiceInterface<GetAllKnowledgeDocumentSegmentRequest, GetAllKnowledgeDocumentSegmentResponse> = (message: GetAllKnowledgeDocumentSegmentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllKnowledgeDocumentSegmentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllKnowledgeDocumentSegmentResponse>, callback?: grpc_1.requestCallback<GetAllKnowledgeDocumentSegmentResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllKnowledgeDocumentSegment(message, metadata, options, callback);
        };
        UpdateKnowledgeDetail: GrpcUnaryServiceInterface<UpdateKnowledgeDetailRequest, GetKnowledgeResponse> = (message: UpdateKnowledgeDetailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetKnowledgeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetKnowledgeResponse>, callback?: grpc_1.requestCallback<GetKnowledgeResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateKnowledgeDetail(message, metadata, options, callback);
        };
        UpdateKnowledgeDocumentSegment: GrpcUnaryServiceInterface<UpdateKnowledgeDocumentSegmentRequest, dependency_2.BaseResponse> = (message: UpdateKnowledgeDocumentSegmentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.BaseResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.BaseResponse>, callback?: grpc_1.requestCallback<dependency_2.BaseResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateKnowledgeDocumentSegment(message, metadata, options, callback);
        };
        DeleteKnowledgeDocumentSegment: GrpcUnaryServiceInterface<DeleteKnowledgeDocumentSegmentRequest, dependency_2.BaseResponse> = (message: DeleteKnowledgeDocumentSegmentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.BaseResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.BaseResponse>, callback?: grpc_1.requestCallback<dependency_2.BaseResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteKnowledgeDocumentSegment(message, metadata, options, callback);
        };
        GetAllKnowledgeLog: GrpcUnaryServiceInterface<GetAllKnowledgeLogRequest, GetAllKnowledgeLogResponse> = (message: GetAllKnowledgeLogRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllKnowledgeLogResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllKnowledgeLogResponse>, callback?: grpc_1.requestCallback<GetAllKnowledgeLogResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllKnowledgeLog(message, metadata, options, callback);
        };
        GetKnowledgeLog: GrpcUnaryServiceInterface<GetKnowledgeLogRequest, GetKnowledgeLogResponse> = (message: GetKnowledgeLogRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetKnowledgeLogResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetKnowledgeLogResponse>, callback?: grpc_1.requestCallback<GetKnowledgeLogResponse>): grpc_1.ClientUnaryCall => {
            return super.GetKnowledgeLog(message, metadata, options, callback);
        };
    }
}
