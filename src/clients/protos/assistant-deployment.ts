// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.19.1
// source: assistant-deployment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Content, Error, Metadata as Metadata1 } from "./common";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "assistant_api";

export interface DeploymentAudioProvider {
  id: number;
  providerName: string;
  options: Metadata1[];
  providerId: number;
  status: string;
  type: string;
}

export interface AssistantDeploymentCapturer {
  id: number;
  assistantDeploymentId: number;
  type: string;
  providerId: number;
  providerName: string;
  options: Metadata1[];
  status: string;
}

export interface AssistantWebpluginDeployment {
  id: number;
  assistantId: number;
  name: string;
  role: string;
  tone: string;
  experties: string;
  greeting?: string | undefined;
  mistake?: string | undefined;
  ending?: string | undefined;
  inputAudio: DeploymentAudioProvider[];
  outputAudio: DeploymentAudioProvider[];
  capturers: AssistantDeploymentCapturer[];
  url?: string | undefined;
  raw?: Content | undefined;
  suggestion: string[];
  helpCenterEnabled: boolean;
  productCatalogEnabled: boolean;
  articleCatalogEnabled: boolean;
  uploadFileEnabled: boolean;
  createdDate?: Date | undefined;
  updatedDate?: Date | undefined;
  status: string;
}

export interface AssistantPhoneDeployment {
  id: number;
  assistantId: number;
  name: string;
  role: string;
  tone: string;
  experties: string;
  greeting?: string | undefined;
  mistake?: string | undefined;
  ending?: string | undefined;
  inputAudio: DeploymentAudioProvider[];
  outputAudio: DeploymentAudioProvider[];
  phoneProviderName: string;
  phoneProviderId: number;
  phoneOptions: Metadata1[];
  capturers: AssistantDeploymentCapturer[];
  createdDate?: Date | undefined;
  updatedDate?: Date | undefined;
  status: string;
}

export interface AssistantWhatsappDeployment {
  id: number;
  assistantId: number;
  name: string;
  role: string;
  tone: string;
  experties: string;
  greeting?: string | undefined;
  mistake?: string | undefined;
  ending?: string | undefined;
  whatsappProviderName: string;
  whatsappProviderId: number;
  whatsappOptions: Metadata1[];
  createdDate?: Date | undefined;
  updatedDate?: Date | undefined;
  status: string;
}

export interface AssistantDebuggerDeployment {
  id: number;
  assistantId: number;
  name: string;
  role: string;
  tone: string;
  experties: string;
  greeting?: string | undefined;
  mistake?: string | undefined;
  ending?: string | undefined;
  inputAudio: DeploymentAudioProvider[];
  outputAudio: DeploymentAudioProvider[];
  capturers: AssistantDeploymentCapturer[];
  url?: string | undefined;
  raw?: Content | undefined;
  suggestion: string[];
  createdDate?: Date | undefined;
  updatedDate?: Date | undefined;
  status: string;
}

export interface AssistantApiDeployment {
  id: number;
  assistantId: number;
  name: string;
  role: string;
  tone: string;
  experties: string;
  greeting?: string | undefined;
  mistake?: string | undefined;
  ending?: string | undefined;
  inputAudio: DeploymentAudioProvider[];
  outputAudio: DeploymentAudioProvider[];
  capturers: AssistantDeploymentCapturer[];
  createdDate?: Date | undefined;
  updatedDate?: Date | undefined;
  status: string;
}

export interface CreateAssistantApiDeploymentRequest {
  deployment?: AssistantApiDeployment | undefined;
}

export interface AssistantApiDeploymentResponse {
  code: number;
  success: boolean;
  data?: AssistantApiDeployment | undefined;
  error?: Error | undefined;
}

export interface CreateAssistantPhoneDeploymentRequest {
  deployment?: AssistantPhoneDeployment | undefined;
}

export interface AssistantPhoneDeploymentResponse {
  code: number;
  success: boolean;
  data?: AssistantPhoneDeployment | undefined;
  error?: Error | undefined;
}

export interface CreateAssistantWhatsappDeploymentRequest {
  deployment?: AssistantWhatsappDeployment | undefined;
}

export interface AssistantWhatsappDeploymentResponse {
  code: number;
  success: boolean;
  data?: AssistantWhatsappDeployment | undefined;
  error?: Error | undefined;
}

export interface CreateAssistantDebuggerDeploymentRequest {
  deployment?: AssistantDebuggerDeployment | undefined;
}

export interface AssistantDebuggerDeploymentResponse {
  code: number;
  success: boolean;
  data?: AssistantDebuggerDeployment | undefined;
  error?: Error | undefined;
}

export interface CreateAssistantWebpluginDeploymentRequest {
  deployment?: AssistantWebpluginDeployment | undefined;
}

export interface AssistantWebpluginDeploymentResponse {
  code: number;
  success: boolean;
  data?: AssistantWebpluginDeployment | undefined;
  error?: Error | undefined;
}

export interface GetAssistantDeploymentRequest {
  assistantId: number;
}

function createBaseDeploymentAudioProvider(): DeploymentAudioProvider {
  return { id: 0, providerName: "", options: [], providerId: 0, status: "", type: "" };
}

export const DeploymentAudioProvider: MessageFns<DeploymentAudioProvider> = {
  encode(message: DeploymentAudioProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.providerName !== "") {
      writer.uint32(18).string(message.providerName);
    }
    for (const v of message.options) {
      Metadata1.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.providerId !== 0) {
      writer.uint32(32).uint64(message.providerId);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.type !== "") {
      writer.uint32(50).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeploymentAudioProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeploymentAudioProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.providerName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.options.push(Metadata1.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.providerId = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeploymentAudioProvider {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      providerName: isSet(object.providerName) ? globalThis.String(object.providerName) : "",
      options: globalThis.Array.isArray(object?.options) ? object.options.map((e: any) => Metadata1.fromJSON(e)) : [],
      providerId: isSet(object.providerId) ? globalThis.Number(object.providerId) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: DeploymentAudioProvider): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.providerName !== "") {
      obj.providerName = message.providerName;
    }
    if (message.options?.length) {
      obj.options = message.options.map((e) => Metadata1.toJSON(e));
    }
    if (message.providerId !== 0) {
      obj.providerId = Math.round(message.providerId);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeploymentAudioProvider>, I>>(base?: I): DeploymentAudioProvider {
    return DeploymentAudioProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeploymentAudioProvider>, I>>(object: I): DeploymentAudioProvider {
    const message = createBaseDeploymentAudioProvider();
    message.id = object.id ?? 0;
    message.providerName = object.providerName ?? "";
    message.options = object.options?.map((e) => Metadata1.fromPartial(e)) || [];
    message.providerId = object.providerId ?? 0;
    message.status = object.status ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseAssistantDeploymentCapturer(): AssistantDeploymentCapturer {
  return { id: 0, assistantDeploymentId: 0, type: "", providerId: 0, providerName: "", options: [], status: "" };
}

export const AssistantDeploymentCapturer: MessageFns<AssistantDeploymentCapturer> = {
  encode(message: AssistantDeploymentCapturer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.assistantDeploymentId !== 0) {
      writer.uint32(16).uint64(message.assistantDeploymentId);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.providerId !== 0) {
      writer.uint32(32).uint64(message.providerId);
    }
    if (message.providerName !== "") {
      writer.uint32(42).string(message.providerName);
    }
    for (const v of message.options) {
      Metadata1.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(58).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantDeploymentCapturer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantDeploymentCapturer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.assistantDeploymentId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.providerId = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.providerName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.options.push(Metadata1.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantDeploymentCapturer {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      assistantDeploymentId: isSet(object.assistantDeploymentId) ? globalThis.Number(object.assistantDeploymentId) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      providerId: isSet(object.providerId) ? globalThis.Number(object.providerId) : 0,
      providerName: isSet(object.providerName) ? globalThis.String(object.providerName) : "",
      options: globalThis.Array.isArray(object?.options) ? object.options.map((e: any) => Metadata1.fromJSON(e)) : [],
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: AssistantDeploymentCapturer): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.assistantDeploymentId !== 0) {
      obj.assistantDeploymentId = Math.round(message.assistantDeploymentId);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.providerId !== 0) {
      obj.providerId = Math.round(message.providerId);
    }
    if (message.providerName !== "") {
      obj.providerName = message.providerName;
    }
    if (message.options?.length) {
      obj.options = message.options.map((e) => Metadata1.toJSON(e));
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantDeploymentCapturer>, I>>(base?: I): AssistantDeploymentCapturer {
    return AssistantDeploymentCapturer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantDeploymentCapturer>, I>>(object: I): AssistantDeploymentCapturer {
    const message = createBaseAssistantDeploymentCapturer();
    message.id = object.id ?? 0;
    message.assistantDeploymentId = object.assistantDeploymentId ?? 0;
    message.type = object.type ?? "";
    message.providerId = object.providerId ?? 0;
    message.providerName = object.providerName ?? "";
    message.options = object.options?.map((e) => Metadata1.fromPartial(e)) || [];
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseAssistantWebpluginDeployment(): AssistantWebpluginDeployment {
  return {
    id: 0,
    assistantId: 0,
    name: "",
    role: "",
    tone: "",
    experties: "",
    greeting: undefined,
    mistake: undefined,
    ending: undefined,
    inputAudio: [],
    outputAudio: [],
    capturers: [],
    url: undefined,
    raw: undefined,
    suggestion: [],
    helpCenterEnabled: false,
    productCatalogEnabled: false,
    articleCatalogEnabled: false,
    uploadFileEnabled: false,
    createdDate: undefined,
    updatedDate: undefined,
    status: "",
  };
}

export const AssistantWebpluginDeployment: MessageFns<AssistantWebpluginDeployment> = {
  encode(message: AssistantWebpluginDeployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.assistantId !== 0) {
      writer.uint32(40).uint64(message.assistantId);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.role !== "") {
      writer.uint32(58).string(message.role);
    }
    if (message.tone !== "") {
      writer.uint32(66).string(message.tone);
    }
    if (message.experties !== "") {
      writer.uint32(74).string(message.experties);
    }
    if (message.greeting !== undefined) {
      writer.uint32(82).string(message.greeting);
    }
    if (message.mistake !== undefined) {
      writer.uint32(90).string(message.mistake);
    }
    if (message.ending !== undefined) {
      writer.uint32(98).string(message.ending);
    }
    for (const v of message.inputAudio) {
      DeploymentAudioProvider.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.outputAudio) {
      DeploymentAudioProvider.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.capturers) {
      AssistantDeploymentCapturer.encode(v!, writer.uint32(138).fork()).join();
    }
    if (message.url !== undefined) {
      writer.uint32(122).string(message.url);
    }
    if (message.raw !== undefined) {
      Content.encode(message.raw, writer.uint32(130).fork()).join();
    }
    for (const v of message.suggestion) {
      writer.uint32(162).string(v!);
    }
    if (message.helpCenterEnabled !== false) {
      writer.uint32(168).bool(message.helpCenterEnabled);
    }
    if (message.productCatalogEnabled !== false) {
      writer.uint32(176).bool(message.productCatalogEnabled);
    }
    if (message.articleCatalogEnabled !== false) {
      writer.uint32(184).bool(message.articleCatalogEnabled);
    }
    if (message.uploadFileEnabled !== false) {
      writer.uint32(192).bool(message.uploadFileEnabled);
    }
    if (message.createdDate !== undefined) {
      Timestamp.encode(toTimestamp(message.createdDate), writer.uint32(210).fork()).join();
    }
    if (message.updatedDate !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedDate), writer.uint32(218).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(226).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantWebpluginDeployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantWebpluginDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tone = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.experties = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.greeting = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.mistake = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.ending = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.inputAudio.push(DeploymentAudioProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.outputAudio.push(DeploymentAudioProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.capturers.push(AssistantDeploymentCapturer.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.raw = Content.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.suggestion.push(reader.string());
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.helpCenterEnabled = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.productCatalogEnabled = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.articleCatalogEnabled = reader.bool();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.uploadFileEnabled = reader.bool();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.createdDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.updatedDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantWebpluginDeployment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      tone: isSet(object.tone) ? globalThis.String(object.tone) : "",
      experties: isSet(object.experties) ? globalThis.String(object.experties) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : undefined,
      mistake: isSet(object.mistake) ? globalThis.String(object.mistake) : undefined,
      ending: isSet(object.ending) ? globalThis.String(object.ending) : undefined,
      inputAudio: globalThis.Array.isArray(object?.inputAudio)
        ? object.inputAudio.map((e: any) => DeploymentAudioProvider.fromJSON(e))
        : [],
      outputAudio: globalThis.Array.isArray(object?.outputAudio)
        ? object.outputAudio.map((e: any) => DeploymentAudioProvider.fromJSON(e))
        : [],
      capturers: globalThis.Array.isArray(object?.capturers)
        ? object.capturers.map((e: any) => AssistantDeploymentCapturer.fromJSON(e))
        : [],
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      raw: isSet(object.raw) ? Content.fromJSON(object.raw) : undefined,
      suggestion: globalThis.Array.isArray(object?.suggestion)
        ? object.suggestion.map((e: any) => globalThis.String(e))
        : [],
      helpCenterEnabled: isSet(object.helpCenterEnabled) ? globalThis.Boolean(object.helpCenterEnabled) : false,
      productCatalogEnabled: isSet(object.productCatalogEnabled)
        ? globalThis.Boolean(object.productCatalogEnabled)
        : false,
      articleCatalogEnabled: isSet(object.articleCatalogEnabled)
        ? globalThis.Boolean(object.articleCatalogEnabled)
        : false,
      uploadFileEnabled: isSet(object.uploadFileEnabled) ? globalThis.Boolean(object.uploadFileEnabled) : false,
      createdDate: isSet(object.createdDate) ? fromJsonTimestamp(object.createdDate) : undefined,
      updatedDate: isSet(object.updatedDate) ? fromJsonTimestamp(object.updatedDate) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: AssistantWebpluginDeployment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.tone !== "") {
      obj.tone = message.tone;
    }
    if (message.experties !== "") {
      obj.experties = message.experties;
    }
    if (message.greeting !== undefined) {
      obj.greeting = message.greeting;
    }
    if (message.mistake !== undefined) {
      obj.mistake = message.mistake;
    }
    if (message.ending !== undefined) {
      obj.ending = message.ending;
    }
    if (message.inputAudio?.length) {
      obj.inputAudio = message.inputAudio.map((e) => DeploymentAudioProvider.toJSON(e));
    }
    if (message.outputAudio?.length) {
      obj.outputAudio = message.outputAudio.map((e) => DeploymentAudioProvider.toJSON(e));
    }
    if (message.capturers?.length) {
      obj.capturers = message.capturers.map((e) => AssistantDeploymentCapturer.toJSON(e));
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.raw !== undefined) {
      obj.raw = Content.toJSON(message.raw);
    }
    if (message.suggestion?.length) {
      obj.suggestion = message.suggestion;
    }
    if (message.helpCenterEnabled !== false) {
      obj.helpCenterEnabled = message.helpCenterEnabled;
    }
    if (message.productCatalogEnabled !== false) {
      obj.productCatalogEnabled = message.productCatalogEnabled;
    }
    if (message.articleCatalogEnabled !== false) {
      obj.articleCatalogEnabled = message.articleCatalogEnabled;
    }
    if (message.uploadFileEnabled !== false) {
      obj.uploadFileEnabled = message.uploadFileEnabled;
    }
    if (message.createdDate !== undefined) {
      obj.createdDate = message.createdDate.toISOString();
    }
    if (message.updatedDate !== undefined) {
      obj.updatedDate = message.updatedDate.toISOString();
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantWebpluginDeployment>, I>>(base?: I): AssistantWebpluginDeployment {
    return AssistantWebpluginDeployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantWebpluginDeployment>, I>>(object: I): AssistantWebpluginDeployment {
    const message = createBaseAssistantWebpluginDeployment();
    message.id = object.id ?? 0;
    message.assistantId = object.assistantId ?? 0;
    message.name = object.name ?? "";
    message.role = object.role ?? "";
    message.tone = object.tone ?? "";
    message.experties = object.experties ?? "";
    message.greeting = object.greeting ?? undefined;
    message.mistake = object.mistake ?? undefined;
    message.ending = object.ending ?? undefined;
    message.inputAudio = object.inputAudio?.map((e) => DeploymentAudioProvider.fromPartial(e)) || [];
    message.outputAudio = object.outputAudio?.map((e) => DeploymentAudioProvider.fromPartial(e)) || [];
    message.capturers = object.capturers?.map((e) => AssistantDeploymentCapturer.fromPartial(e)) || [];
    message.url = object.url ?? undefined;
    message.raw = (object.raw !== undefined && object.raw !== null) ? Content.fromPartial(object.raw) : undefined;
    message.suggestion = object.suggestion?.map((e) => e) || [];
    message.helpCenterEnabled = object.helpCenterEnabled ?? false;
    message.productCatalogEnabled = object.productCatalogEnabled ?? false;
    message.articleCatalogEnabled = object.articleCatalogEnabled ?? false;
    message.uploadFileEnabled = object.uploadFileEnabled ?? false;
    message.createdDate = object.createdDate ?? undefined;
    message.updatedDate = object.updatedDate ?? undefined;
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseAssistantPhoneDeployment(): AssistantPhoneDeployment {
  return {
    id: 0,
    assistantId: 0,
    name: "",
    role: "",
    tone: "",
    experties: "",
    greeting: undefined,
    mistake: undefined,
    ending: undefined,
    inputAudio: [],
    outputAudio: [],
    phoneProviderName: "",
    phoneProviderId: 0,
    phoneOptions: [],
    capturers: [],
    createdDate: undefined,
    updatedDate: undefined,
    status: "",
  };
}

export const AssistantPhoneDeployment: MessageFns<AssistantPhoneDeployment> = {
  encode(message: AssistantPhoneDeployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.assistantId !== 0) {
      writer.uint32(40).uint64(message.assistantId);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.role !== "") {
      writer.uint32(58).string(message.role);
    }
    if (message.tone !== "") {
      writer.uint32(66).string(message.tone);
    }
    if (message.experties !== "") {
      writer.uint32(74).string(message.experties);
    }
    if (message.greeting !== undefined) {
      writer.uint32(82).string(message.greeting);
    }
    if (message.mistake !== undefined) {
      writer.uint32(90).string(message.mistake);
    }
    if (message.ending !== undefined) {
      writer.uint32(98).string(message.ending);
    }
    for (const v of message.inputAudio) {
      DeploymentAudioProvider.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.outputAudio) {
      DeploymentAudioProvider.encode(v!, writer.uint32(114).fork()).join();
    }
    if (message.phoneProviderName !== "") {
      writer.uint32(122).string(message.phoneProviderName);
    }
    if (message.phoneProviderId !== 0) {
      writer.uint32(128).uint64(message.phoneProviderId);
    }
    for (const v of message.phoneOptions) {
      Metadata1.encode(v!, writer.uint32(138).fork()).join();
    }
    for (const v of message.capturers) {
      AssistantDeploymentCapturer.encode(v!, writer.uint32(146).fork()).join();
    }
    if (message.createdDate !== undefined) {
      Timestamp.encode(toTimestamp(message.createdDate), writer.uint32(210).fork()).join();
    }
    if (message.updatedDate !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedDate), writer.uint32(218).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(226).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantPhoneDeployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantPhoneDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tone = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.experties = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.greeting = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.mistake = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.ending = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.inputAudio.push(DeploymentAudioProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.outputAudio.push(DeploymentAudioProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.phoneProviderName = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.phoneProviderId = longToNumber(reader.uint64());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.phoneOptions.push(Metadata1.decode(reader, reader.uint32()));
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.capturers.push(AssistantDeploymentCapturer.decode(reader, reader.uint32()));
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.createdDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.updatedDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantPhoneDeployment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      tone: isSet(object.tone) ? globalThis.String(object.tone) : "",
      experties: isSet(object.experties) ? globalThis.String(object.experties) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : undefined,
      mistake: isSet(object.mistake) ? globalThis.String(object.mistake) : undefined,
      ending: isSet(object.ending) ? globalThis.String(object.ending) : undefined,
      inputAudio: globalThis.Array.isArray(object?.inputAudio)
        ? object.inputAudio.map((e: any) => DeploymentAudioProvider.fromJSON(e))
        : [],
      outputAudio: globalThis.Array.isArray(object?.outputAudio)
        ? object.outputAudio.map((e: any) => DeploymentAudioProvider.fromJSON(e))
        : [],
      phoneProviderName: isSet(object.phoneProviderName) ? globalThis.String(object.phoneProviderName) : "",
      phoneProviderId: isSet(object.phoneProviderId) ? globalThis.Number(object.phoneProviderId) : 0,
      phoneOptions: globalThis.Array.isArray(object?.phoneOptions)
        ? object.phoneOptions.map((e: any) => Metadata1.fromJSON(e))
        : [],
      capturers: globalThis.Array.isArray(object?.capturers)
        ? object.capturers.map((e: any) => AssistantDeploymentCapturer.fromJSON(e))
        : [],
      createdDate: isSet(object.createdDate) ? fromJsonTimestamp(object.createdDate) : undefined,
      updatedDate: isSet(object.updatedDate) ? fromJsonTimestamp(object.updatedDate) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: AssistantPhoneDeployment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.tone !== "") {
      obj.tone = message.tone;
    }
    if (message.experties !== "") {
      obj.experties = message.experties;
    }
    if (message.greeting !== undefined) {
      obj.greeting = message.greeting;
    }
    if (message.mistake !== undefined) {
      obj.mistake = message.mistake;
    }
    if (message.ending !== undefined) {
      obj.ending = message.ending;
    }
    if (message.inputAudio?.length) {
      obj.inputAudio = message.inputAudio.map((e) => DeploymentAudioProvider.toJSON(e));
    }
    if (message.outputAudio?.length) {
      obj.outputAudio = message.outputAudio.map((e) => DeploymentAudioProvider.toJSON(e));
    }
    if (message.phoneProviderName !== "") {
      obj.phoneProviderName = message.phoneProviderName;
    }
    if (message.phoneProviderId !== 0) {
      obj.phoneProviderId = Math.round(message.phoneProviderId);
    }
    if (message.phoneOptions?.length) {
      obj.phoneOptions = message.phoneOptions.map((e) => Metadata1.toJSON(e));
    }
    if (message.capturers?.length) {
      obj.capturers = message.capturers.map((e) => AssistantDeploymentCapturer.toJSON(e));
    }
    if (message.createdDate !== undefined) {
      obj.createdDate = message.createdDate.toISOString();
    }
    if (message.updatedDate !== undefined) {
      obj.updatedDate = message.updatedDate.toISOString();
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantPhoneDeployment>, I>>(base?: I): AssistantPhoneDeployment {
    return AssistantPhoneDeployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantPhoneDeployment>, I>>(object: I): AssistantPhoneDeployment {
    const message = createBaseAssistantPhoneDeployment();
    message.id = object.id ?? 0;
    message.assistantId = object.assistantId ?? 0;
    message.name = object.name ?? "";
    message.role = object.role ?? "";
    message.tone = object.tone ?? "";
    message.experties = object.experties ?? "";
    message.greeting = object.greeting ?? undefined;
    message.mistake = object.mistake ?? undefined;
    message.ending = object.ending ?? undefined;
    message.inputAudio = object.inputAudio?.map((e) => DeploymentAudioProvider.fromPartial(e)) || [];
    message.outputAudio = object.outputAudio?.map((e) => DeploymentAudioProvider.fromPartial(e)) || [];
    message.phoneProviderName = object.phoneProviderName ?? "";
    message.phoneProviderId = object.phoneProviderId ?? 0;
    message.phoneOptions = object.phoneOptions?.map((e) => Metadata1.fromPartial(e)) || [];
    message.capturers = object.capturers?.map((e) => AssistantDeploymentCapturer.fromPartial(e)) || [];
    message.createdDate = object.createdDate ?? undefined;
    message.updatedDate = object.updatedDate ?? undefined;
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseAssistantWhatsappDeployment(): AssistantWhatsappDeployment {
  return {
    id: 0,
    assistantId: 0,
    name: "",
    role: "",
    tone: "",
    experties: "",
    greeting: undefined,
    mistake: undefined,
    ending: undefined,
    whatsappProviderName: "",
    whatsappProviderId: 0,
    whatsappOptions: [],
    createdDate: undefined,
    updatedDate: undefined,
    status: "",
  };
}

export const AssistantWhatsappDeployment: MessageFns<AssistantWhatsappDeployment> = {
  encode(message: AssistantWhatsappDeployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.assistantId !== 0) {
      writer.uint32(40).uint64(message.assistantId);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.role !== "") {
      writer.uint32(58).string(message.role);
    }
    if (message.tone !== "") {
      writer.uint32(66).string(message.tone);
    }
    if (message.experties !== "") {
      writer.uint32(74).string(message.experties);
    }
    if (message.greeting !== undefined) {
      writer.uint32(82).string(message.greeting);
    }
    if (message.mistake !== undefined) {
      writer.uint32(90).string(message.mistake);
    }
    if (message.ending !== undefined) {
      writer.uint32(98).string(message.ending);
    }
    if (message.whatsappProviderName !== "") {
      writer.uint32(122).string(message.whatsappProviderName);
    }
    if (message.whatsappProviderId !== 0) {
      writer.uint32(128).uint64(message.whatsappProviderId);
    }
    for (const v of message.whatsappOptions) {
      Metadata1.encode(v!, writer.uint32(138).fork()).join();
    }
    if (message.createdDate !== undefined) {
      Timestamp.encode(toTimestamp(message.createdDate), writer.uint32(210).fork()).join();
    }
    if (message.updatedDate !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedDate), writer.uint32(218).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(226).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantWhatsappDeployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantWhatsappDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tone = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.experties = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.greeting = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.mistake = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.ending = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.whatsappProviderName = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.whatsappProviderId = longToNumber(reader.uint64());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.whatsappOptions.push(Metadata1.decode(reader, reader.uint32()));
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.createdDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.updatedDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantWhatsappDeployment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      tone: isSet(object.tone) ? globalThis.String(object.tone) : "",
      experties: isSet(object.experties) ? globalThis.String(object.experties) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : undefined,
      mistake: isSet(object.mistake) ? globalThis.String(object.mistake) : undefined,
      ending: isSet(object.ending) ? globalThis.String(object.ending) : undefined,
      whatsappProviderName: isSet(object.whatsappProviderName) ? globalThis.String(object.whatsappProviderName) : "",
      whatsappProviderId: isSet(object.whatsappProviderId) ? globalThis.Number(object.whatsappProviderId) : 0,
      whatsappOptions: globalThis.Array.isArray(object?.whatsappOptions)
        ? object.whatsappOptions.map((e: any) => Metadata1.fromJSON(e))
        : [],
      createdDate: isSet(object.createdDate) ? fromJsonTimestamp(object.createdDate) : undefined,
      updatedDate: isSet(object.updatedDate) ? fromJsonTimestamp(object.updatedDate) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: AssistantWhatsappDeployment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.tone !== "") {
      obj.tone = message.tone;
    }
    if (message.experties !== "") {
      obj.experties = message.experties;
    }
    if (message.greeting !== undefined) {
      obj.greeting = message.greeting;
    }
    if (message.mistake !== undefined) {
      obj.mistake = message.mistake;
    }
    if (message.ending !== undefined) {
      obj.ending = message.ending;
    }
    if (message.whatsappProviderName !== "") {
      obj.whatsappProviderName = message.whatsappProviderName;
    }
    if (message.whatsappProviderId !== 0) {
      obj.whatsappProviderId = Math.round(message.whatsappProviderId);
    }
    if (message.whatsappOptions?.length) {
      obj.whatsappOptions = message.whatsappOptions.map((e) => Metadata1.toJSON(e));
    }
    if (message.createdDate !== undefined) {
      obj.createdDate = message.createdDate.toISOString();
    }
    if (message.updatedDate !== undefined) {
      obj.updatedDate = message.updatedDate.toISOString();
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantWhatsappDeployment>, I>>(base?: I): AssistantWhatsappDeployment {
    return AssistantWhatsappDeployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantWhatsappDeployment>, I>>(object: I): AssistantWhatsappDeployment {
    const message = createBaseAssistantWhatsappDeployment();
    message.id = object.id ?? 0;
    message.assistantId = object.assistantId ?? 0;
    message.name = object.name ?? "";
    message.role = object.role ?? "";
    message.tone = object.tone ?? "";
    message.experties = object.experties ?? "";
    message.greeting = object.greeting ?? undefined;
    message.mistake = object.mistake ?? undefined;
    message.ending = object.ending ?? undefined;
    message.whatsappProviderName = object.whatsappProviderName ?? "";
    message.whatsappProviderId = object.whatsappProviderId ?? 0;
    message.whatsappOptions = object.whatsappOptions?.map((e) => Metadata1.fromPartial(e)) || [];
    message.createdDate = object.createdDate ?? undefined;
    message.updatedDate = object.updatedDate ?? undefined;
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseAssistantDebuggerDeployment(): AssistantDebuggerDeployment {
  return {
    id: 0,
    assistantId: 0,
    name: "",
    role: "",
    tone: "",
    experties: "",
    greeting: undefined,
    mistake: undefined,
    ending: undefined,
    inputAudio: [],
    outputAudio: [],
    capturers: [],
    url: undefined,
    raw: undefined,
    suggestion: [],
    createdDate: undefined,
    updatedDate: undefined,
    status: "",
  };
}

export const AssistantDebuggerDeployment: MessageFns<AssistantDebuggerDeployment> = {
  encode(message: AssistantDebuggerDeployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.assistantId !== 0) {
      writer.uint32(40).uint64(message.assistantId);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.role !== "") {
      writer.uint32(58).string(message.role);
    }
    if (message.tone !== "") {
      writer.uint32(66).string(message.tone);
    }
    if (message.experties !== "") {
      writer.uint32(74).string(message.experties);
    }
    if (message.greeting !== undefined) {
      writer.uint32(82).string(message.greeting);
    }
    if (message.mistake !== undefined) {
      writer.uint32(90).string(message.mistake);
    }
    if (message.ending !== undefined) {
      writer.uint32(98).string(message.ending);
    }
    for (const v of message.inputAudio) {
      DeploymentAudioProvider.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.outputAudio) {
      DeploymentAudioProvider.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.capturers) {
      AssistantDeploymentCapturer.encode(v!, writer.uint32(146).fork()).join();
    }
    if (message.url !== undefined) {
      writer.uint32(122).string(message.url);
    }
    if (message.raw !== undefined) {
      Content.encode(message.raw, writer.uint32(130).fork()).join();
    }
    for (const v of message.suggestion) {
      writer.uint32(162).string(v!);
    }
    if (message.createdDate !== undefined) {
      Timestamp.encode(toTimestamp(message.createdDate), writer.uint32(210).fork()).join();
    }
    if (message.updatedDate !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedDate), writer.uint32(218).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(226).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantDebuggerDeployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantDebuggerDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tone = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.experties = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.greeting = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.mistake = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.ending = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.inputAudio.push(DeploymentAudioProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.outputAudio.push(DeploymentAudioProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.capturers.push(AssistantDeploymentCapturer.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.raw = Content.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.suggestion.push(reader.string());
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.createdDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.updatedDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantDebuggerDeployment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      tone: isSet(object.tone) ? globalThis.String(object.tone) : "",
      experties: isSet(object.experties) ? globalThis.String(object.experties) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : undefined,
      mistake: isSet(object.mistake) ? globalThis.String(object.mistake) : undefined,
      ending: isSet(object.ending) ? globalThis.String(object.ending) : undefined,
      inputAudio: globalThis.Array.isArray(object?.inputAudio)
        ? object.inputAudio.map((e: any) => DeploymentAudioProvider.fromJSON(e))
        : [],
      outputAudio: globalThis.Array.isArray(object?.outputAudio)
        ? object.outputAudio.map((e: any) => DeploymentAudioProvider.fromJSON(e))
        : [],
      capturers: globalThis.Array.isArray(object?.capturers)
        ? object.capturers.map((e: any) => AssistantDeploymentCapturer.fromJSON(e))
        : [],
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      raw: isSet(object.raw) ? Content.fromJSON(object.raw) : undefined,
      suggestion: globalThis.Array.isArray(object?.suggestion)
        ? object.suggestion.map((e: any) => globalThis.String(e))
        : [],
      createdDate: isSet(object.createdDate) ? fromJsonTimestamp(object.createdDate) : undefined,
      updatedDate: isSet(object.updatedDate) ? fromJsonTimestamp(object.updatedDate) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: AssistantDebuggerDeployment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.tone !== "") {
      obj.tone = message.tone;
    }
    if (message.experties !== "") {
      obj.experties = message.experties;
    }
    if (message.greeting !== undefined) {
      obj.greeting = message.greeting;
    }
    if (message.mistake !== undefined) {
      obj.mistake = message.mistake;
    }
    if (message.ending !== undefined) {
      obj.ending = message.ending;
    }
    if (message.inputAudio?.length) {
      obj.inputAudio = message.inputAudio.map((e) => DeploymentAudioProvider.toJSON(e));
    }
    if (message.outputAudio?.length) {
      obj.outputAudio = message.outputAudio.map((e) => DeploymentAudioProvider.toJSON(e));
    }
    if (message.capturers?.length) {
      obj.capturers = message.capturers.map((e) => AssistantDeploymentCapturer.toJSON(e));
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.raw !== undefined) {
      obj.raw = Content.toJSON(message.raw);
    }
    if (message.suggestion?.length) {
      obj.suggestion = message.suggestion;
    }
    if (message.createdDate !== undefined) {
      obj.createdDate = message.createdDate.toISOString();
    }
    if (message.updatedDate !== undefined) {
      obj.updatedDate = message.updatedDate.toISOString();
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantDebuggerDeployment>, I>>(base?: I): AssistantDebuggerDeployment {
    return AssistantDebuggerDeployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantDebuggerDeployment>, I>>(object: I): AssistantDebuggerDeployment {
    const message = createBaseAssistantDebuggerDeployment();
    message.id = object.id ?? 0;
    message.assistantId = object.assistantId ?? 0;
    message.name = object.name ?? "";
    message.role = object.role ?? "";
    message.tone = object.tone ?? "";
    message.experties = object.experties ?? "";
    message.greeting = object.greeting ?? undefined;
    message.mistake = object.mistake ?? undefined;
    message.ending = object.ending ?? undefined;
    message.inputAudio = object.inputAudio?.map((e) => DeploymentAudioProvider.fromPartial(e)) || [];
    message.outputAudio = object.outputAudio?.map((e) => DeploymentAudioProvider.fromPartial(e)) || [];
    message.capturers = object.capturers?.map((e) => AssistantDeploymentCapturer.fromPartial(e)) || [];
    message.url = object.url ?? undefined;
    message.raw = (object.raw !== undefined && object.raw !== null) ? Content.fromPartial(object.raw) : undefined;
    message.suggestion = object.suggestion?.map((e) => e) || [];
    message.createdDate = object.createdDate ?? undefined;
    message.updatedDate = object.updatedDate ?? undefined;
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseAssistantApiDeployment(): AssistantApiDeployment {
  return {
    id: 0,
    assistantId: 0,
    name: "",
    role: "",
    tone: "",
    experties: "",
    greeting: undefined,
    mistake: undefined,
    ending: undefined,
    inputAudio: [],
    outputAudio: [],
    capturers: [],
    createdDate: undefined,
    updatedDate: undefined,
    status: "",
  };
}

export const AssistantApiDeployment: MessageFns<AssistantApiDeployment> = {
  encode(message: AssistantApiDeployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.assistantId !== 0) {
      writer.uint32(40).uint64(message.assistantId);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.role !== "") {
      writer.uint32(58).string(message.role);
    }
    if (message.tone !== "") {
      writer.uint32(66).string(message.tone);
    }
    if (message.experties !== "") {
      writer.uint32(74).string(message.experties);
    }
    if (message.greeting !== undefined) {
      writer.uint32(82).string(message.greeting);
    }
    if (message.mistake !== undefined) {
      writer.uint32(90).string(message.mistake);
    }
    if (message.ending !== undefined) {
      writer.uint32(98).string(message.ending);
    }
    for (const v of message.inputAudio) {
      DeploymentAudioProvider.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.outputAudio) {
      DeploymentAudioProvider.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.capturers) {
      AssistantDeploymentCapturer.encode(v!, writer.uint32(122).fork()).join();
    }
    if (message.createdDate !== undefined) {
      Timestamp.encode(toTimestamp(message.createdDate), writer.uint32(210).fork()).join();
    }
    if (message.updatedDate !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedDate), writer.uint32(218).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(226).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantApiDeployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantApiDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tone = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.experties = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.greeting = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.mistake = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.ending = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.inputAudio.push(DeploymentAudioProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.outputAudio.push(DeploymentAudioProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.capturers.push(AssistantDeploymentCapturer.decode(reader, reader.uint32()));
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.createdDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.updatedDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantApiDeployment {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      tone: isSet(object.tone) ? globalThis.String(object.tone) : "",
      experties: isSet(object.experties) ? globalThis.String(object.experties) : "",
      greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : undefined,
      mistake: isSet(object.mistake) ? globalThis.String(object.mistake) : undefined,
      ending: isSet(object.ending) ? globalThis.String(object.ending) : undefined,
      inputAudio: globalThis.Array.isArray(object?.inputAudio)
        ? object.inputAudio.map((e: any) => DeploymentAudioProvider.fromJSON(e))
        : [],
      outputAudio: globalThis.Array.isArray(object?.outputAudio)
        ? object.outputAudio.map((e: any) => DeploymentAudioProvider.fromJSON(e))
        : [],
      capturers: globalThis.Array.isArray(object?.capturers)
        ? object.capturers.map((e: any) => AssistantDeploymentCapturer.fromJSON(e))
        : [],
      createdDate: isSet(object.createdDate) ? fromJsonTimestamp(object.createdDate) : undefined,
      updatedDate: isSet(object.updatedDate) ? fromJsonTimestamp(object.updatedDate) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: AssistantApiDeployment): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.tone !== "") {
      obj.tone = message.tone;
    }
    if (message.experties !== "") {
      obj.experties = message.experties;
    }
    if (message.greeting !== undefined) {
      obj.greeting = message.greeting;
    }
    if (message.mistake !== undefined) {
      obj.mistake = message.mistake;
    }
    if (message.ending !== undefined) {
      obj.ending = message.ending;
    }
    if (message.inputAudio?.length) {
      obj.inputAudio = message.inputAudio.map((e) => DeploymentAudioProvider.toJSON(e));
    }
    if (message.outputAudio?.length) {
      obj.outputAudio = message.outputAudio.map((e) => DeploymentAudioProvider.toJSON(e));
    }
    if (message.capturers?.length) {
      obj.capturers = message.capturers.map((e) => AssistantDeploymentCapturer.toJSON(e));
    }
    if (message.createdDate !== undefined) {
      obj.createdDate = message.createdDate.toISOString();
    }
    if (message.updatedDate !== undefined) {
      obj.updatedDate = message.updatedDate.toISOString();
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantApiDeployment>, I>>(base?: I): AssistantApiDeployment {
    return AssistantApiDeployment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantApiDeployment>, I>>(object: I): AssistantApiDeployment {
    const message = createBaseAssistantApiDeployment();
    message.id = object.id ?? 0;
    message.assistantId = object.assistantId ?? 0;
    message.name = object.name ?? "";
    message.role = object.role ?? "";
    message.tone = object.tone ?? "";
    message.experties = object.experties ?? "";
    message.greeting = object.greeting ?? undefined;
    message.mistake = object.mistake ?? undefined;
    message.ending = object.ending ?? undefined;
    message.inputAudio = object.inputAudio?.map((e) => DeploymentAudioProvider.fromPartial(e)) || [];
    message.outputAudio = object.outputAudio?.map((e) => DeploymentAudioProvider.fromPartial(e)) || [];
    message.capturers = object.capturers?.map((e) => AssistantDeploymentCapturer.fromPartial(e)) || [];
    message.createdDate = object.createdDate ?? undefined;
    message.updatedDate = object.updatedDate ?? undefined;
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseCreateAssistantApiDeploymentRequest(): CreateAssistantApiDeploymentRequest {
  return { deployment: undefined };
}

export const CreateAssistantApiDeploymentRequest: MessageFns<CreateAssistantApiDeploymentRequest> = {
  encode(message: CreateAssistantApiDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== undefined) {
      AssistantApiDeployment.encode(message.deployment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantApiDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantApiDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployment = AssistantApiDeployment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantApiDeploymentRequest {
    return { deployment: isSet(object.deployment) ? AssistantApiDeployment.fromJSON(object.deployment) : undefined };
  },

  toJSON(message: CreateAssistantApiDeploymentRequest): unknown {
    const obj: any = {};
    if (message.deployment !== undefined) {
      obj.deployment = AssistantApiDeployment.toJSON(message.deployment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantApiDeploymentRequest>, I>>(
    base?: I,
  ): CreateAssistantApiDeploymentRequest {
    return CreateAssistantApiDeploymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantApiDeploymentRequest>, I>>(
    object: I,
  ): CreateAssistantApiDeploymentRequest {
    const message = createBaseCreateAssistantApiDeploymentRequest();
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? AssistantApiDeployment.fromPartial(object.deployment)
      : undefined;
    return message;
  },
};

function createBaseAssistantApiDeploymentResponse(): AssistantApiDeploymentResponse {
  return { code: 0, success: false, data: undefined, error: undefined };
}

export const AssistantApiDeploymentResponse: MessageFns<AssistantApiDeploymentResponse> = {
  encode(message: AssistantApiDeploymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.data !== undefined) {
      AssistantApiDeployment.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantApiDeploymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantApiDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = AssistantApiDeployment.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantApiDeploymentResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: isSet(object.data) ? AssistantApiDeployment.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: AssistantApiDeploymentResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data !== undefined) {
      obj.data = AssistantApiDeployment.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantApiDeploymentResponse>, I>>(base?: I): AssistantApiDeploymentResponse {
    return AssistantApiDeploymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantApiDeploymentResponse>, I>>(
    object: I,
  ): AssistantApiDeploymentResponse {
    const message = createBaseAssistantApiDeploymentResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = (object.data !== undefined && object.data !== null)
      ? AssistantApiDeployment.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseCreateAssistantPhoneDeploymentRequest(): CreateAssistantPhoneDeploymentRequest {
  return { deployment: undefined };
}

export const CreateAssistantPhoneDeploymentRequest: MessageFns<CreateAssistantPhoneDeploymentRequest> = {
  encode(message: CreateAssistantPhoneDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== undefined) {
      AssistantPhoneDeployment.encode(message.deployment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantPhoneDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantPhoneDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployment = AssistantPhoneDeployment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantPhoneDeploymentRequest {
    return { deployment: isSet(object.deployment) ? AssistantPhoneDeployment.fromJSON(object.deployment) : undefined };
  },

  toJSON(message: CreateAssistantPhoneDeploymentRequest): unknown {
    const obj: any = {};
    if (message.deployment !== undefined) {
      obj.deployment = AssistantPhoneDeployment.toJSON(message.deployment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantPhoneDeploymentRequest>, I>>(
    base?: I,
  ): CreateAssistantPhoneDeploymentRequest {
    return CreateAssistantPhoneDeploymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantPhoneDeploymentRequest>, I>>(
    object: I,
  ): CreateAssistantPhoneDeploymentRequest {
    const message = createBaseCreateAssistantPhoneDeploymentRequest();
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? AssistantPhoneDeployment.fromPartial(object.deployment)
      : undefined;
    return message;
  },
};

function createBaseAssistantPhoneDeploymentResponse(): AssistantPhoneDeploymentResponse {
  return { code: 0, success: false, data: undefined, error: undefined };
}

export const AssistantPhoneDeploymentResponse: MessageFns<AssistantPhoneDeploymentResponse> = {
  encode(message: AssistantPhoneDeploymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.data !== undefined) {
      AssistantPhoneDeployment.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantPhoneDeploymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantPhoneDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = AssistantPhoneDeployment.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantPhoneDeploymentResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: isSet(object.data) ? AssistantPhoneDeployment.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: AssistantPhoneDeploymentResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data !== undefined) {
      obj.data = AssistantPhoneDeployment.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantPhoneDeploymentResponse>, I>>(
    base?: I,
  ): AssistantPhoneDeploymentResponse {
    return AssistantPhoneDeploymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantPhoneDeploymentResponse>, I>>(
    object: I,
  ): AssistantPhoneDeploymentResponse {
    const message = createBaseAssistantPhoneDeploymentResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = (object.data !== undefined && object.data !== null)
      ? AssistantPhoneDeployment.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseCreateAssistantWhatsappDeploymentRequest(): CreateAssistantWhatsappDeploymentRequest {
  return { deployment: undefined };
}

export const CreateAssistantWhatsappDeploymentRequest: MessageFns<CreateAssistantWhatsappDeploymentRequest> = {
  encode(message: CreateAssistantWhatsappDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== undefined) {
      AssistantWhatsappDeployment.encode(message.deployment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantWhatsappDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantWhatsappDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployment = AssistantWhatsappDeployment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantWhatsappDeploymentRequest {
    return {
      deployment: isSet(object.deployment) ? AssistantWhatsappDeployment.fromJSON(object.deployment) : undefined,
    };
  },

  toJSON(message: CreateAssistantWhatsappDeploymentRequest): unknown {
    const obj: any = {};
    if (message.deployment !== undefined) {
      obj.deployment = AssistantWhatsappDeployment.toJSON(message.deployment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantWhatsappDeploymentRequest>, I>>(
    base?: I,
  ): CreateAssistantWhatsappDeploymentRequest {
    return CreateAssistantWhatsappDeploymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantWhatsappDeploymentRequest>, I>>(
    object: I,
  ): CreateAssistantWhatsappDeploymentRequest {
    const message = createBaseCreateAssistantWhatsappDeploymentRequest();
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? AssistantWhatsappDeployment.fromPartial(object.deployment)
      : undefined;
    return message;
  },
};

function createBaseAssistantWhatsappDeploymentResponse(): AssistantWhatsappDeploymentResponse {
  return { code: 0, success: false, data: undefined, error: undefined };
}

export const AssistantWhatsappDeploymentResponse: MessageFns<AssistantWhatsappDeploymentResponse> = {
  encode(message: AssistantWhatsappDeploymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.data !== undefined) {
      AssistantWhatsappDeployment.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantWhatsappDeploymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantWhatsappDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = AssistantWhatsappDeployment.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantWhatsappDeploymentResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: isSet(object.data) ? AssistantWhatsappDeployment.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: AssistantWhatsappDeploymentResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data !== undefined) {
      obj.data = AssistantWhatsappDeployment.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantWhatsappDeploymentResponse>, I>>(
    base?: I,
  ): AssistantWhatsappDeploymentResponse {
    return AssistantWhatsappDeploymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantWhatsappDeploymentResponse>, I>>(
    object: I,
  ): AssistantWhatsappDeploymentResponse {
    const message = createBaseAssistantWhatsappDeploymentResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = (object.data !== undefined && object.data !== null)
      ? AssistantWhatsappDeployment.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseCreateAssistantDebuggerDeploymentRequest(): CreateAssistantDebuggerDeploymentRequest {
  return { deployment: undefined };
}

export const CreateAssistantDebuggerDeploymentRequest: MessageFns<CreateAssistantDebuggerDeploymentRequest> = {
  encode(message: CreateAssistantDebuggerDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== undefined) {
      AssistantDebuggerDeployment.encode(message.deployment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantDebuggerDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantDebuggerDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployment = AssistantDebuggerDeployment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantDebuggerDeploymentRequest {
    return {
      deployment: isSet(object.deployment) ? AssistantDebuggerDeployment.fromJSON(object.deployment) : undefined,
    };
  },

  toJSON(message: CreateAssistantDebuggerDeploymentRequest): unknown {
    const obj: any = {};
    if (message.deployment !== undefined) {
      obj.deployment = AssistantDebuggerDeployment.toJSON(message.deployment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantDebuggerDeploymentRequest>, I>>(
    base?: I,
  ): CreateAssistantDebuggerDeploymentRequest {
    return CreateAssistantDebuggerDeploymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantDebuggerDeploymentRequest>, I>>(
    object: I,
  ): CreateAssistantDebuggerDeploymentRequest {
    const message = createBaseCreateAssistantDebuggerDeploymentRequest();
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? AssistantDebuggerDeployment.fromPartial(object.deployment)
      : undefined;
    return message;
  },
};

function createBaseAssistantDebuggerDeploymentResponse(): AssistantDebuggerDeploymentResponse {
  return { code: 0, success: false, data: undefined, error: undefined };
}

export const AssistantDebuggerDeploymentResponse: MessageFns<AssistantDebuggerDeploymentResponse> = {
  encode(message: AssistantDebuggerDeploymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.data !== undefined) {
      AssistantDebuggerDeployment.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantDebuggerDeploymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantDebuggerDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = AssistantDebuggerDeployment.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantDebuggerDeploymentResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: isSet(object.data) ? AssistantDebuggerDeployment.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: AssistantDebuggerDeploymentResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data !== undefined) {
      obj.data = AssistantDebuggerDeployment.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantDebuggerDeploymentResponse>, I>>(
    base?: I,
  ): AssistantDebuggerDeploymentResponse {
    return AssistantDebuggerDeploymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantDebuggerDeploymentResponse>, I>>(
    object: I,
  ): AssistantDebuggerDeploymentResponse {
    const message = createBaseAssistantDebuggerDeploymentResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = (object.data !== undefined && object.data !== null)
      ? AssistantDebuggerDeployment.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseCreateAssistantWebpluginDeploymentRequest(): CreateAssistantWebpluginDeploymentRequest {
  return { deployment: undefined };
}

export const CreateAssistantWebpluginDeploymentRequest: MessageFns<CreateAssistantWebpluginDeploymentRequest> = {
  encode(message: CreateAssistantWebpluginDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== undefined) {
      AssistantWebpluginDeployment.encode(message.deployment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAssistantWebpluginDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAssistantWebpluginDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployment = AssistantWebpluginDeployment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAssistantWebpluginDeploymentRequest {
    return {
      deployment: isSet(object.deployment) ? AssistantWebpluginDeployment.fromJSON(object.deployment) : undefined,
    };
  },

  toJSON(message: CreateAssistantWebpluginDeploymentRequest): unknown {
    const obj: any = {};
    if (message.deployment !== undefined) {
      obj.deployment = AssistantWebpluginDeployment.toJSON(message.deployment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAssistantWebpluginDeploymentRequest>, I>>(
    base?: I,
  ): CreateAssistantWebpluginDeploymentRequest {
    return CreateAssistantWebpluginDeploymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAssistantWebpluginDeploymentRequest>, I>>(
    object: I,
  ): CreateAssistantWebpluginDeploymentRequest {
    const message = createBaseCreateAssistantWebpluginDeploymentRequest();
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? AssistantWebpluginDeployment.fromPartial(object.deployment)
      : undefined;
    return message;
  },
};

function createBaseAssistantWebpluginDeploymentResponse(): AssistantWebpluginDeploymentResponse {
  return { code: 0, success: false, data: undefined, error: undefined };
}

export const AssistantWebpluginDeploymentResponse: MessageFns<AssistantWebpluginDeploymentResponse> = {
  encode(message: AssistantWebpluginDeploymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.data !== undefined) {
      AssistantWebpluginDeployment.encode(message.data, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssistantWebpluginDeploymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssistantWebpluginDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = AssistantWebpluginDeployment.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssistantWebpluginDeploymentResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      data: isSet(object.data) ? AssistantWebpluginDeployment.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: AssistantWebpluginDeploymentResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.data !== undefined) {
      obj.data = AssistantWebpluginDeployment.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssistantWebpluginDeploymentResponse>, I>>(
    base?: I,
  ): AssistantWebpluginDeploymentResponse {
    return AssistantWebpluginDeploymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssistantWebpluginDeploymentResponse>, I>>(
    object: I,
  ): AssistantWebpluginDeploymentResponse {
    const message = createBaseAssistantWebpluginDeploymentResponse();
    message.code = object.code ?? 0;
    message.success = object.success ?? false;
    message.data = (object.data !== undefined && object.data !== null)
      ? AssistantWebpluginDeployment.fromPartial(object.data)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseGetAssistantDeploymentRequest(): GetAssistantDeploymentRequest {
  return { assistantId: 0 };
}

export const GetAssistantDeploymentRequest: MessageFns<GetAssistantDeploymentRequest> = {
  encode(message: GetAssistantDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assistantId !== 0) {
      writer.uint32(8).uint64(message.assistantId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAssistantDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssistantDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.assistantId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssistantDeploymentRequest {
    return { assistantId: isSet(object.assistantId) ? globalThis.Number(object.assistantId) : 0 };
  },

  toJSON(message: GetAssistantDeploymentRequest): unknown {
    const obj: any = {};
    if (message.assistantId !== 0) {
      obj.assistantId = Math.round(message.assistantId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAssistantDeploymentRequest>, I>>(base?: I): GetAssistantDeploymentRequest {
    return GetAssistantDeploymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAssistantDeploymentRequest>, I>>(
    object: I,
  ): GetAssistantDeploymentRequest {
    const message = createBaseGetAssistantDeploymentRequest();
    message.assistantId = object.assistantId ?? 0;
    return message;
  },
};

export type AssistantDeploymentServiceService = typeof AssistantDeploymentServiceService;
export const AssistantDeploymentServiceService = {
  createAssistantApiDeployment: {
    path: "/assistant_api.AssistantDeploymentService/CreateAssistantApiDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAssistantApiDeploymentRequest): Buffer =>
      Buffer.from(CreateAssistantApiDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAssistantApiDeploymentRequest =>
      CreateAssistantApiDeploymentRequest.decode(value),
    responseSerialize: (value: AssistantApiDeploymentResponse): Buffer =>
      Buffer.from(AssistantApiDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantApiDeploymentResponse =>
      AssistantApiDeploymentResponse.decode(value),
  },
  getAssistantApiDeployment: {
    path: "/assistant_api.AssistantDeploymentService/GetAssistantApiDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAssistantDeploymentRequest): Buffer =>
      Buffer.from(GetAssistantDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAssistantDeploymentRequest => GetAssistantDeploymentRequest.decode(value),
    responseSerialize: (value: AssistantApiDeploymentResponse): Buffer =>
      Buffer.from(AssistantApiDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantApiDeploymentResponse =>
      AssistantApiDeploymentResponse.decode(value),
  },
  createAssistantWebpluginDeployment: {
    path: "/assistant_api.AssistantDeploymentService/CreateAssistantWebpluginDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAssistantWebpluginDeploymentRequest): Buffer =>
      Buffer.from(CreateAssistantWebpluginDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAssistantWebpluginDeploymentRequest =>
      CreateAssistantWebpluginDeploymentRequest.decode(value),
    responseSerialize: (value: AssistantWebpluginDeploymentResponse): Buffer =>
      Buffer.from(AssistantWebpluginDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantWebpluginDeploymentResponse =>
      AssistantWebpluginDeploymentResponse.decode(value),
  },
  getAssistantWebpluginDeployment: {
    path: "/assistant_api.AssistantDeploymentService/GetAssistantWebpluginDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAssistantDeploymentRequest): Buffer =>
      Buffer.from(GetAssistantDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAssistantDeploymentRequest => GetAssistantDeploymentRequest.decode(value),
    responseSerialize: (value: AssistantWebpluginDeploymentResponse): Buffer =>
      Buffer.from(AssistantWebpluginDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantWebpluginDeploymentResponse =>
      AssistantWebpluginDeploymentResponse.decode(value),
  },
  createAssistantDebuggerDeployment: {
    path: "/assistant_api.AssistantDeploymentService/CreateAssistantDebuggerDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAssistantDebuggerDeploymentRequest): Buffer =>
      Buffer.from(CreateAssistantDebuggerDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAssistantDebuggerDeploymentRequest =>
      CreateAssistantDebuggerDeploymentRequest.decode(value),
    responseSerialize: (value: AssistantDebuggerDeploymentResponse): Buffer =>
      Buffer.from(AssistantDebuggerDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantDebuggerDeploymentResponse =>
      AssistantDebuggerDeploymentResponse.decode(value),
  },
  getAssistantDebuggerDeployment: {
    path: "/assistant_api.AssistantDeploymentService/GetAssistantDebuggerDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAssistantDeploymentRequest): Buffer =>
      Buffer.from(GetAssistantDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAssistantDeploymentRequest => GetAssistantDeploymentRequest.decode(value),
    responseSerialize: (value: AssistantDebuggerDeploymentResponse): Buffer =>
      Buffer.from(AssistantDebuggerDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantDebuggerDeploymentResponse =>
      AssistantDebuggerDeploymentResponse.decode(value),
  },
  createAssistantWhatsappDeployment: {
    path: "/assistant_api.AssistantDeploymentService/CreateAssistantWhatsappDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAssistantWhatsappDeploymentRequest): Buffer =>
      Buffer.from(CreateAssistantWhatsappDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAssistantWhatsappDeploymentRequest =>
      CreateAssistantWhatsappDeploymentRequest.decode(value),
    responseSerialize: (value: AssistantWhatsappDeploymentResponse): Buffer =>
      Buffer.from(AssistantWhatsappDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantWhatsappDeploymentResponse =>
      AssistantWhatsappDeploymentResponse.decode(value),
  },
  getAssistantWhatsappDeployment: {
    path: "/assistant_api.AssistantDeploymentService/GetAssistantWhatsappDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAssistantDeploymentRequest): Buffer =>
      Buffer.from(GetAssistantDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAssistantDeploymentRequest => GetAssistantDeploymentRequest.decode(value),
    responseSerialize: (value: AssistantWhatsappDeploymentResponse): Buffer =>
      Buffer.from(AssistantWhatsappDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantWhatsappDeploymentResponse =>
      AssistantWhatsappDeploymentResponse.decode(value),
  },
  createAssistantPhoneDeployment: {
    path: "/assistant_api.AssistantDeploymentService/CreateAssistantPhoneDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAssistantPhoneDeploymentRequest): Buffer =>
      Buffer.from(CreateAssistantPhoneDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAssistantPhoneDeploymentRequest =>
      CreateAssistantPhoneDeploymentRequest.decode(value),
    responseSerialize: (value: AssistantPhoneDeploymentResponse): Buffer =>
      Buffer.from(AssistantPhoneDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantPhoneDeploymentResponse =>
      AssistantPhoneDeploymentResponse.decode(value),
  },
  getAssistantPhoneDeployment: {
    path: "/assistant_api.AssistantDeploymentService/GetAssistantPhoneDeployment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAssistantDeploymentRequest): Buffer =>
      Buffer.from(GetAssistantDeploymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAssistantDeploymentRequest => GetAssistantDeploymentRequest.decode(value),
    responseSerialize: (value: AssistantPhoneDeploymentResponse): Buffer =>
      Buffer.from(AssistantPhoneDeploymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssistantPhoneDeploymentResponse =>
      AssistantPhoneDeploymentResponse.decode(value),
  },
} as const;

export interface AssistantDeploymentServiceServer extends UntypedServiceImplementation {
  createAssistantApiDeployment: handleUnaryCall<CreateAssistantApiDeploymentRequest, AssistantApiDeploymentResponse>;
  getAssistantApiDeployment: handleUnaryCall<GetAssistantDeploymentRequest, AssistantApiDeploymentResponse>;
  createAssistantWebpluginDeployment: handleUnaryCall<
    CreateAssistantWebpluginDeploymentRequest,
    AssistantWebpluginDeploymentResponse
  >;
  getAssistantWebpluginDeployment: handleUnaryCall<GetAssistantDeploymentRequest, AssistantWebpluginDeploymentResponse>;
  createAssistantDebuggerDeployment: handleUnaryCall<
    CreateAssistantDebuggerDeploymentRequest,
    AssistantDebuggerDeploymentResponse
  >;
  getAssistantDebuggerDeployment: handleUnaryCall<GetAssistantDeploymentRequest, AssistantDebuggerDeploymentResponse>;
  createAssistantWhatsappDeployment: handleUnaryCall<
    CreateAssistantWhatsappDeploymentRequest,
    AssistantWhatsappDeploymentResponse
  >;
  getAssistantWhatsappDeployment: handleUnaryCall<GetAssistantDeploymentRequest, AssistantWhatsappDeploymentResponse>;
  createAssistantPhoneDeployment: handleUnaryCall<
    CreateAssistantPhoneDeploymentRequest,
    AssistantPhoneDeploymentResponse
  >;
  getAssistantPhoneDeployment: handleUnaryCall<GetAssistantDeploymentRequest, AssistantPhoneDeploymentResponse>;
}

export interface AssistantDeploymentServiceClient extends Client {
  createAssistantApiDeployment(
    request: CreateAssistantApiDeploymentRequest,
    callback: (error: ServiceError | null, response: AssistantApiDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantApiDeployment(
    request: CreateAssistantApiDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssistantApiDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantApiDeployment(
    request: CreateAssistantApiDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssistantApiDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantApiDeployment(
    request: GetAssistantDeploymentRequest,
    callback: (error: ServiceError | null, response: AssistantApiDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantApiDeployment(
    request: GetAssistantDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssistantApiDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantApiDeployment(
    request: GetAssistantDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssistantApiDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantWebpluginDeployment(
    request: CreateAssistantWebpluginDeploymentRequest,
    callback: (error: ServiceError | null, response: AssistantWebpluginDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantWebpluginDeployment(
    request: CreateAssistantWebpluginDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssistantWebpluginDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantWebpluginDeployment(
    request: CreateAssistantWebpluginDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssistantWebpluginDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantWebpluginDeployment(
    request: GetAssistantDeploymentRequest,
    callback: (error: ServiceError | null, response: AssistantWebpluginDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantWebpluginDeployment(
    request: GetAssistantDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssistantWebpluginDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantWebpluginDeployment(
    request: GetAssistantDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssistantWebpluginDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantDebuggerDeployment(
    request: CreateAssistantDebuggerDeploymentRequest,
    callback: (error: ServiceError | null, response: AssistantDebuggerDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantDebuggerDeployment(
    request: CreateAssistantDebuggerDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssistantDebuggerDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantDebuggerDeployment(
    request: CreateAssistantDebuggerDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssistantDebuggerDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantDebuggerDeployment(
    request: GetAssistantDeploymentRequest,
    callback: (error: ServiceError | null, response: AssistantDebuggerDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantDebuggerDeployment(
    request: GetAssistantDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssistantDebuggerDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantDebuggerDeployment(
    request: GetAssistantDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssistantDebuggerDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantWhatsappDeployment(
    request: CreateAssistantWhatsappDeploymentRequest,
    callback: (error: ServiceError | null, response: AssistantWhatsappDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantWhatsappDeployment(
    request: CreateAssistantWhatsappDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssistantWhatsappDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantWhatsappDeployment(
    request: CreateAssistantWhatsappDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssistantWhatsappDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantWhatsappDeployment(
    request: GetAssistantDeploymentRequest,
    callback: (error: ServiceError | null, response: AssistantWhatsappDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantWhatsappDeployment(
    request: GetAssistantDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssistantWhatsappDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantWhatsappDeployment(
    request: GetAssistantDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssistantWhatsappDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantPhoneDeployment(
    request: CreateAssistantPhoneDeploymentRequest,
    callback: (error: ServiceError | null, response: AssistantPhoneDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantPhoneDeployment(
    request: CreateAssistantPhoneDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssistantPhoneDeploymentResponse) => void,
  ): ClientUnaryCall;
  createAssistantPhoneDeployment(
    request: CreateAssistantPhoneDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssistantPhoneDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantPhoneDeployment(
    request: GetAssistantDeploymentRequest,
    callback: (error: ServiceError | null, response: AssistantPhoneDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantPhoneDeployment(
    request: GetAssistantDeploymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssistantPhoneDeploymentResponse) => void,
  ): ClientUnaryCall;
  getAssistantPhoneDeployment(
    request: GetAssistantDeploymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssistantPhoneDeploymentResponse) => void,
  ): ClientUnaryCall;
}

export const AssistantDeploymentServiceClient = makeGenericClientConstructor(
  AssistantDeploymentServiceService,
  "assistant_api.AssistantDeploymentService",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AssistantDeploymentServiceClient;
  service: typeof AssistantDeploymentServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
