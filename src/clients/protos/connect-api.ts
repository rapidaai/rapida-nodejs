/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: connect-api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/struct";
import * as dependency_2 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace connect_api {
    export class KnowledgeConnectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: string;
            code?: string;
            scope?: string;
            connect?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
                if ("connect" in data && data.connect != undefined) {
                    this.connect = data.connect;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set scope(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get connect() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set connect(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            state?: string;
            code?: string;
            scope?: string;
            connect?: string;
        }): KnowledgeConnectRequest {
            const message = new KnowledgeConnectRequest({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.scope != null) {
                message.scope = data.scope;
            }
            if (data.connect != null) {
                message.connect = data.connect;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: string;
                code?: string;
                scope?: string;
                connect?: string;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.scope != null) {
                data.scope = this.scope;
            }
            if (this.connect != null) {
                data.connect = this.connect;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state.length)
                writer.writeString(1, this.state);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (this.scope.length)
                writer.writeString(3, this.scope);
            if (this.connect.length)
                writer.writeString(4, this.connect);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KnowledgeConnectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KnowledgeConnectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    case 3:
                        message.scope = reader.readString();
                        break;
                    case 4:
                        message.connect = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KnowledgeConnectRequest {
            return KnowledgeConnectRequest.deserialize(bytes);
        }
    }
    export class KnowledgeConnectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            toolId?: string;
            redirectTo?: string;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("toolId" in data && data.toolId != undefined) {
                    this.toolId = data.toolId;
                }
                if ("redirectTo" in data && data.redirectTo != undefined) {
                    this.redirectTo = data.redirectTo;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get toolId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set toolId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get redirectTo() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set redirectTo(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 5) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            toolId?: string;
            redirectTo?: string;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): KnowledgeConnectResponse {
            const message = new KnowledgeConnectResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.toolId != null) {
                message.toolId = data.toolId;
            }
            if (data.redirectTo != null) {
                message.redirectTo = data.redirectTo;
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                toolId?: string;
                redirectTo?: string;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.toolId != null) {
                data.toolId = this.toolId;
            }
            if (this.redirectTo != null) {
                data.redirectTo = this.redirectTo;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.toolId != "0")
                writer.writeUint64String(3, this.toolId);
            if (this.redirectTo.length)
                writer.writeString(4, this.redirectTo);
            if (this.has_error)
                writer.writeMessage(5, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KnowledgeConnectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KnowledgeConnectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.toolId = reader.readUint64String();
                        break;
                    case 4:
                        message.redirectTo = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KnowledgeConnectResponse {
            return KnowledgeConnectResponse.deserialize(bytes);
        }
    }
    export class GeneralConnectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: string;
            code?: string;
            scope?: string;
            connect?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
                if ("connect" in data && data.connect != undefined) {
                    this.connect = data.connect;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set scope(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get connect() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set connect(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            state?: string;
            code?: string;
            scope?: string;
            connect?: string;
        }): GeneralConnectRequest {
            const message = new GeneralConnectRequest({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.scope != null) {
                message.scope = data.scope;
            }
            if (data.connect != null) {
                message.connect = data.connect;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: string;
                code?: string;
                scope?: string;
                connect?: string;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.scope != null) {
                data.scope = this.scope;
            }
            if (this.connect != null) {
                data.connect = this.connect;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state.length)
                writer.writeString(1, this.state);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (this.scope.length)
                writer.writeString(3, this.scope);
            if (this.connect.length)
                writer.writeString(4, this.connect);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GeneralConnectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GeneralConnectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    case 3:
                        message.scope = reader.readString();
                        break;
                    case 4:
                        message.connect = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GeneralConnectRequest {
            return GeneralConnectRequest.deserialize(bytes);
        }
    }
    export class GeneralConnectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            toolId?: string;
            redirectTo?: string;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("toolId" in data && data.toolId != undefined) {
                    this.toolId = data.toolId;
                }
                if ("redirectTo" in data && data.redirectTo != undefined) {
                    this.redirectTo = data.redirectTo;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get toolId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set toolId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get redirectTo() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set redirectTo(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 5) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            toolId?: string;
            redirectTo?: string;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): GeneralConnectResponse {
            const message = new GeneralConnectResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.toolId != null) {
                message.toolId = data.toolId;
            }
            if (data.redirectTo != null) {
                message.redirectTo = data.redirectTo;
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                toolId?: string;
                redirectTo?: string;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.toolId != null) {
                data.toolId = this.toolId;
            }
            if (this.redirectTo != null) {
                data.redirectTo = this.redirectTo;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.toolId != "0")
                writer.writeUint64String(3, this.toolId);
            if (this.redirectTo.length)
                writer.writeString(4, this.redirectTo);
            if (this.has_error)
                writer.writeMessage(5, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GeneralConnectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GeneralConnectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.toolId = reader.readUint64String();
                        break;
                    case 4:
                        message.redirectTo = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GeneralConnectResponse {
            return GeneralConnectResponse.deserialize(bytes);
        }
    }
    export class ActionConnectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: string;
            code?: string;
            scope?: string;
            connect?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
                if ("connect" in data && data.connect != undefined) {
                    this.connect = data.connect;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set scope(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get connect() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set connect(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            state?: string;
            code?: string;
            scope?: string;
            connect?: string;
        }): ActionConnectRequest {
            const message = new ActionConnectRequest({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.scope != null) {
                message.scope = data.scope;
            }
            if (data.connect != null) {
                message.connect = data.connect;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: string;
                code?: string;
                scope?: string;
                connect?: string;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.scope != null) {
                data.scope = this.scope;
            }
            if (this.connect != null) {
                data.connect = this.connect;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state.length)
                writer.writeString(1, this.state);
            if (this.code.length)
                writer.writeString(2, this.code);
            if (this.scope.length)
                writer.writeString(3, this.scope);
            if (this.connect.length)
                writer.writeString(4, this.connect);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActionConnectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActionConnectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readString();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    case 3:
                        message.scope = reader.readString();
                        break;
                    case 4:
                        message.connect = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActionConnectRequest {
            return ActionConnectRequest.deserialize(bytes);
        }
    }
    export class ActionConnectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            toolId?: string;
            redirectTo?: string;
            error?: dependency_2.Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("toolId" in data && data.toolId != undefined) {
                    this.toolId = data.toolId;
                }
                if ("redirectTo" in data && data.redirectTo != undefined) {
                    this.redirectTo = data.redirectTo;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get toolId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set toolId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get redirectTo() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set redirectTo(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 5) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            toolId?: string;
            redirectTo?: string;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
        }): ActionConnectResponse {
            const message = new ActionConnectResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.toolId != null) {
                message.toolId = data.toolId;
            }
            if (data.redirectTo != null) {
                message.redirectTo = data.redirectTo;
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                toolId?: string;
                redirectTo?: string;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.toolId != null) {
                data.toolId = this.toolId;
            }
            if (this.redirectTo != null) {
                data.redirectTo = this.redirectTo;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.toolId != "0")
                writer.writeUint64String(3, this.toolId);
            if (this.redirectTo.length)
                writer.writeString(4, this.redirectTo);
            if (this.has_error)
                writer.writeMessage(5, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActionConnectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActionConnectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.toolId = reader.readUint64String();
                        break;
                    case 4:
                        message.redirectTo = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActionConnectResponse {
            return ActionConnectResponse.deserialize(bytes);
        }
    }
    export class GetConnectorFilesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paginate?: dependency_2.Paginate;
            criterias?: dependency_2.Criteria[];
            toolId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paginate" in data && data.paginate != undefined) {
                    this.paginate = data.paginate;
                }
                if ("criterias" in data && data.criterias != undefined) {
                    this.criterias = data.criterias;
                }
                if ("toolId" in data && data.toolId != undefined) {
                    this.toolId = data.toolId;
                }
            }
        }
        get paginate() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginate, 1) as dependency_2.Paginate;
        }
        set paginate(value: dependency_2.Paginate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_paginate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get criterias() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Criteria, 2) as dependency_2.Criteria[];
        }
        set criterias(value: dependency_2.Criteria[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get toolId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set toolId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
            criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
            toolId?: string;
        }): GetConnectorFilesRequest {
            const message = new GetConnectorFilesRequest({});
            if (data.paginate != null) {
                message.paginate = dependency_2.Paginate.fromObject(data.paginate);
            }
            if (data.criterias != null) {
                message.criterias = data.criterias.map(item => dependency_2.Criteria.fromObject(item));
            }
            if (data.toolId != null) {
                message.toolId = data.toolId;
            }
            return message;
        }
        toObject() {
            const data: {
                paginate?: ReturnType<typeof dependency_2.Paginate.prototype.toObject>;
                criterias?: ReturnType<typeof dependency_2.Criteria.prototype.toObject>[];
                toolId?: string;
            } = {};
            if (this.paginate != null) {
                data.paginate = this.paginate.toObject();
            }
            if (this.criterias != null) {
                data.criterias = this.criterias.map((item: dependency_2.Criteria) => item.toObject());
            }
            if (this.toolId != null) {
                data.toolId = this.toolId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_paginate)
                writer.writeMessage(1, this.paginate, () => this.paginate.serialize(writer));
            if (this.criterias.length)
                writer.writeRepeatedMessage(2, this.criterias, (item: dependency_2.Criteria) => item.serialize(writer));
            if (this.toolId != "0")
                writer.writeUint64String(3, this.toolId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetConnectorFilesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetConnectorFilesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.paginate, () => message.paginate = dependency_2.Paginate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.criterias, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.Criteria.deserialize(reader), dependency_2.Criteria));
                        break;
                    case 3:
                        message.toolId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetConnectorFilesRequest {
            return GetConnectorFilesRequest.deserialize(bytes);
        }
    }
    export class GetConnectorFilesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            success?: boolean;
            data?: dependency_1.google.protobuf.Struct[];
            paginated?: dependency_2.Paginated;
            error?: dependency_2.Error;
            args?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("paginated" in data && data.paginated != undefined) {
                    this.paginated = data.paginated;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("args" in data && data.args != undefined) {
                    this.args = data.args;
                }
            }
            if (!this.args)
                this.args = new Map();
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.protobuf.Struct, 3) as dependency_1.google.protobuf.Struct[];
        }
        set data(value: dependency_1.google.protobuf.Struct[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get paginated() {
            return pb_1.Message.getWrapperField(this, dependency_2.Paginated, 4) as dependency_2.Paginated;
        }
        set paginated(value: dependency_2.Paginated) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_paginated() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.Error, 5) as dependency_2.Error;
        }
        set error(value: dependency_2.Error) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get args() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set args(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        static fromObject(data: {
            code?: number;
            success?: boolean;
            data?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>[];
            paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
            args?: {
                [key: string]: string;
            };
        }): GetConnectorFilesResponse {
            const message = new GetConnectorFilesResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.data != null) {
                message.data = data.data.map(item => dependency_1.google.protobuf.Struct.fromObject(item));
            }
            if (data.paginated != null) {
                message.paginated = dependency_2.Paginated.fromObject(data.paginated);
            }
            if (data.error != null) {
                message.error = dependency_2.Error.fromObject(data.error);
            }
            if (typeof data.args == "object") {
                message.args = new Map(Object.entries(data.args));
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                success?: boolean;
                data?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>[];
                paginated?: ReturnType<typeof dependency_2.Paginated.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.Error.prototype.toObject>;
                args?: {
                    [key: string]: string;
                };
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.data != null) {
                data.data = this.data.map((item: dependency_1.google.protobuf.Struct) => item.toObject());
            }
            if (this.paginated != null) {
                data.paginated = this.paginated.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.args != null) {
                data.args = (Object.fromEntries)(this.args);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: dependency_1.google.protobuf.Struct) => item.serialize(writer));
            if (this.has_paginated)
                writer.writeMessage(4, this.paginated, () => this.paginated.serialize(writer));
            if (this.has_error)
                writer.writeMessage(5, this.error, () => this.error.serialize(writer));
            for (const [key, value] of this.args) {
                writer.writeMessage(6, this.args, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetConnectorFilesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetConnectorFilesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.google.protobuf.Struct.deserialize(reader), dependency_1.google.protobuf.Struct));
                        break;
                    case 4:
                        reader.readMessage(message.paginated, () => message.paginated = dependency_2.Paginated.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.error, () => message.error = dependency_2.Error.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.args as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetConnectorFilesResponse {
            return GetConnectorFilesResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedConnectServiceService {
        static definition = {
            KnowledgeConnect: {
                path: "/connect_api.ConnectService/KnowledgeConnect",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: KnowledgeConnectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => KnowledgeConnectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: KnowledgeConnectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => KnowledgeConnectResponse.deserialize(new Uint8Array(bytes))
            },
            GeneralConnect: {
                path: "/connect_api.ConnectService/GeneralConnect",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GeneralConnectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GeneralConnectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GeneralConnectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GeneralConnectResponse.deserialize(new Uint8Array(bytes))
            },
            ActionConnect: {
                path: "/connect_api.ConnectService/ActionConnect",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ActionConnectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ActionConnectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ActionConnectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ActionConnectResponse.deserialize(new Uint8Array(bytes))
            },
            GetConnectorFiles: {
                path: "/connect_api.ConnectService/GetConnectorFiles",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetConnectorFilesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetConnectorFilesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetConnectorFilesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetConnectorFilesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract KnowledgeConnect(call: grpc_1.ServerUnaryCall<KnowledgeConnectRequest, KnowledgeConnectResponse>, callback: grpc_1.sendUnaryData<KnowledgeConnectResponse>): void;
        abstract GeneralConnect(call: grpc_1.ServerUnaryCall<GeneralConnectRequest, GeneralConnectResponse>, callback: grpc_1.sendUnaryData<GeneralConnectResponse>): void;
        abstract ActionConnect(call: grpc_1.ServerUnaryCall<ActionConnectRequest, ActionConnectResponse>, callback: grpc_1.sendUnaryData<ActionConnectResponse>): void;
        abstract GetConnectorFiles(call: grpc_1.ServerUnaryCall<GetConnectorFilesRequest, GetConnectorFilesResponse>, callback: grpc_1.sendUnaryData<GetConnectorFilesResponse>): void;
    }
    export class ConnectServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedConnectServiceService.definition, "ConnectService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        KnowledgeConnect: GrpcUnaryServiceInterface<KnowledgeConnectRequest, KnowledgeConnectResponse> = (message: KnowledgeConnectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<KnowledgeConnectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<KnowledgeConnectResponse>, callback?: grpc_1.requestCallback<KnowledgeConnectResponse>): grpc_1.ClientUnaryCall => {
            return super.KnowledgeConnect(message, metadata, options, callback);
        };
        GeneralConnect: GrpcUnaryServiceInterface<GeneralConnectRequest, GeneralConnectResponse> = (message: GeneralConnectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GeneralConnectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GeneralConnectResponse>, callback?: grpc_1.requestCallback<GeneralConnectResponse>): grpc_1.ClientUnaryCall => {
            return super.GeneralConnect(message, metadata, options, callback);
        };
        ActionConnect: GrpcUnaryServiceInterface<ActionConnectRequest, ActionConnectResponse> = (message: ActionConnectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ActionConnectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ActionConnectResponse>, callback?: grpc_1.requestCallback<ActionConnectResponse>): grpc_1.ClientUnaryCall => {
            return super.ActionConnect(message, metadata, options, callback);
        };
        GetConnectorFiles: GrpcUnaryServiceInterface<GetConnectorFilesRequest, GetConnectorFilesResponse> = (message: GetConnectorFilesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetConnectorFilesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetConnectorFilesResponse>, callback?: grpc_1.requestCallback<GetConnectorFilesResponse>): grpc_1.ClientUnaryCall => {
            return super.GetConnectorFiles(message, metadata, options, callback);
        };
    }
}
